

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Oct 06 10:44:31 2020

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65  0000                     
    66                           ; Version 1.41
    67                           ; Generated 25/01/2017 GMT
    68                           ; 
    69                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F4550 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100  0000                     
   101                           	psect	smallconst
   102  000800                     __psmallconst:
   103                           	opt stack 0
   104  000800  00                 	db	0
   105  000801                     _dpowers:
   106                           	opt stack 0
   107  000801  0001               	dw	1
   108  000803  0000               	dw	0
   109  000805  000A               	dw	10
   110  000807  0000               	dw	0
   111  000809  0064               	dw	100
   112  00080B  0000               	dw	0
   113  00080D  03E8               	dw	1000
   114  00080F  0000               	dw	0
   115  000811  2710               	dw	10000
   116  000813  0000               	dw	0
   117  000815  86A0               	dw	34464
   118  000817  0001               	dw	1
   119  000819  4240               	dw	16960
   120  00081B  000F               	dw	15
   121  00081D  9680               	dw	38528
   122  00081F  0098               	dw	152
   123  000821  E100               	dw	57600
   124  000823  05F5               	dw	1525
   125  000825  CA00               	dw	51712
   126  000827  3B9A               	dw	15258
   127  000829                     __end_of_dpowers:
   128                           	opt stack 0
   129  000829                     __powers_:
   130                           	opt stack 0
   131  000829  00                 	db	0
   132  00082A  80                 	db	128
   133  00082B  3F                 	db	63
   134  00082C  00                 	db	0
   135  00082D  20                 	db	32
   136  00082E  41                 	db	65
   137  00082F  00                 	db	0
   138  000830  C8                 	db	200
   139  000831  42                 	db	66
   140  000832  00                 	db	0
   141  000833  7A                 	db	122
   142  000834  44                 	db	68
   143  000835  40                 	db	64
   144  000836  1C                 	db	28
   145  000837  46                 	db	70
   146  000838  50                 	db	80
   147  000839  C3                 	db	195
   148  00083A  47                 	db	71
   149  00083B  24                 	db	36
   150  00083C  74                 	db	116
   151  00083D  49                 	db	73
   152  00083E  97                 	db	151
   153  00083F  18                 	db	24
   154  000840  4B                 	db	75
   155  000841  BC                 	db	188
   156  000842  BE                 	db	190
   157  000843  4C                 	db	76
   158  000844  6B                 	db	107
   159  000845  6E                 	db	110
   160  000846  4E                 	db	78
   161  000847  03                 	db	3
   162  000848  15                 	db	21
   163  000849  50                 	db	80
   164  00084A  79                 	db	121
   165  00084B  AD                 	db	173
   166  00084C  60                 	db	96
   167  00084D  F3                 	db	243
   168  00084E  49                 	db	73
   169  00084F  71                 	db	113
   170  000850                     __end_of__powers_:
   171                           	opt stack 0
   172  000850                     __npowers_:
   173                           	opt stack 0
   174  000850  00                 	db	0
   175  000851  80                 	db	128
   176  000852  3F                 	db	63
   177  000853  CD                 	db	205
   178  000854  CC                 	db	204
   179  000855  3D                 	db	61
   180  000856  D7                 	db	215
   181  000857  23                 	db	35
   182  000858  3C                 	db	60
   183  000859  12                 	db	18
   184  00085A  83                 	db	131
   185  00085B  3A                 	db	58
   186  00085C  B7                 	db	183
   187  00085D  D1                 	db	209
   188  00085E  38                 	db	56
   189  00085F  C6                 	db	198
   190  000860  27                 	db	39
   191  000861  37                 	db	55
   192  000862  38                 	db	56
   193  000863  86                 	db	134
   194  000864  35                 	db	53
   195  000865  C0                 	db	192
   196  000866  D6                 	db	214
   197  000867  33                 	db	51
   198  000868  CC                 	db	204
   199  000869  2B                 	db	43
   200  00086A  32                 	db	50
   201  00086B  70                 	db	112
   202  00086C  89                 	db	137
   203  00086D  30                 	db	48
   204  00086E  E7                 	db	231
   205  00086F  DB                 	db	219
   206  000870  2E                 	db	46
   207  000871  E5                 	db	229
   208  000872  3C                 	db	60
   209  000873  1E                 	db	30
   210  000874  42                 	db	66
   211  000875  A2                 	db	162
   212  000876  0D                 	db	13
   213  000877                     __end_of__npowers_:
   214                           	opt stack 0
   215  0000                     _TXREG	set	4013
   216  0000                     _RCSTA	set	4011
   217  0000                     _TXSTA	set	4012
   218  0000                     _SPBRG	set	4015
   219  0000                     _TRISB	set	3987
   220  0000                     _TRISD	set	3989
   221  0000                     _LATB	set	3978
   222  0000                     _RCSTAbits	set	4011
   223  0000                     _RCREG	set	4014
   224  0000                     _ADCON0bits	set	4034
   225  0000                     _ADCON0	set	4034
   226  0000                     _ADRESL	set	4035
   227  0000                     _ADRESH	set	4036
   228  0000                     _ADCON2	set	4032
   229  0000                     _ADCON1	set	4033
   230  0000                     _TRISA	set	3986
   231  0000                     _PIE1bits	set	3997
   232  0000                     _INTCONbits	set	4082
   233  0000                     _OSCCON	set	4051
   234  0000                     _TXIF	set	31988
   235  0000                     _TRISC7	set	31911
   236  0000                     _TRISC6	set	31910
   237  0000                     _LATD2	set	31842
   238  0000                     _LATD1	set	31841
   239  0000                     _LATD0	set	31840
   240  0000                     _CREN	set	32092
   241  0000                     _GIE	set	32663
   242  0000                     _RCIF	set	31989
   243  0000                     _GO	set	32273
   244  0000                     _ADON	set	32272
   245  000877                     STR_2:
   246  000877  55                 	db	85	;'U'
   247  000878  54                 	db	84	;'T'
   248  000879  43                 	db	67	;'C'
   249  00087A  20                 	db	32
   250  00087B  54                 	db	84	;'T'
   251  00087C  69                 	db	105	;'i'
   252  00087D  6D                 	db	109	;'m'
   253  00087E  65                 	db	101	;'e'
   254  00087F  3A                 	db	58	;':'
   255  000880  20                 	db	32
   256  000881  00                 	db	0
   257  000882                     STR_13:
   258  000882  25                 	db	37
   259  000883  64                 	db	100	;'d'
   260  000884  3A                 	db	58	;':'
   261  000885  25                 	db	37
   262  000886  64                 	db	100	;'d'
   263  000887  3A                 	db	58	;':'
   264  000888  25                 	db	37
   265  000889  64                 	db	100	;'d'
   266  00088A  00                 	db	0
   267  00088B                     STR_1:
   268  00088B  25                 	db	37
   269  00088C  64                 	db	100	;'d'
   270  00088D  25                 	db	37
   271  00088E  63                 	db	99	;'c'
   272  00088F  43                 	db	67	;'C'
   273  000890  20                 	db	32
   274  000891  20                 	db	32
   275  000892  00                 	db	0
   276  000893                     STR_8:
   277  000893  4C                 	db	76	;'L'
   278  000894  6F                 	db	111	;'o'
   279  000895  6E                 	db	110	;'n'
   280  000896  67                 	db	103	;'g'
   281  000897  3A                 	db	58	;':'
   282  000898  20                 	db	32
   283  000899  00                 	db	0
   284  00089A                     STR_5:
   285  00089A  4C                 	db	76	;'L'
   286  00089B  61                 	db	97	;'a'
   287  00089C  74                 	db	116	;'t'
   288  00089D  3A                 	db	58	;':'
   289  00089E  20                 	db	32
   290  00089F  00                 	db	0
   291  0008A0                     STR_11:
   292  0008A0  41                 	db	65	;'A'
   293  0008A1  6C                 	db	108	;'l'
   294  0008A2  74                 	db	116	;'t'
   295  0008A3  3A                 	db	58	;':'
   296  0008A4  20                 	db	32
   297  0008A5  00                 	db	0
   298  0008A6                     STR_6:
   299  0008A6  25                 	db	37
   300  0008A7  2E                 	db	46
   301  0008A8  30                 	db	48	;'0'
   302  0008A9  35                 	db	53	;'5'
   303  0008AA  66                 	db	102	;'f'
   304  0008AB  00                 	db	0
   305  0008AC                     STR_12:
   306  0008AC  25                 	db	37
   307  0008AD  2E                 	db	46
   308  0008AE  32                 	db	50	;'2'
   309  0008AF  66                 	db	102	;'f'
   310  0008B0  00                 	db	0
   311  0008B1                     STR_4:
   312  0008B1  2C                 	db	44
   313  0008B2  00                 	db	0
   314  0008B3  00                 	db	0	; dummy byte at the end
   315  0000                     
   316                           ; #config settings
   317                           
   318                           	psect	cinit
   319  0034E0                     __pcinit:
   320                           	opt stack 0
   321  0034E0                     start_initialization:
   322                           	opt stack 0
   323  0034E0                     __initialization:
   324                           	opt stack 0
   325                           
   326                           ; Clear objects allocated to BANK1 (130 bytes)
   327  0034E0  EE01  F000         	lfsr	0,__pbssBANK1
   328  0034E4  0E82               	movlw	130
   329  0034E6                     clear_0:
   330  0034E6  6AEE               	clrf	postinc0,c
   331  0034E8  06E8               	decf	wreg,f,c
   332  0034EA  E1FD               	bnz	clear_0
   333                           
   334                           ; Clear objects allocated to BANK0 (48 bytes)
   335  0034EC  EE00  F0C0         	lfsr	0,__pbssBANK0
   336  0034F0  0E30               	movlw	48
   337  0034F2                     clear_1:
   338  0034F2  6AEE               	clrf	postinc0,c
   339  0034F4  06E8               	decf	wreg,f,c
   340  0034F6  E1FD               	bnz	clear_1
   341                           
   342                           ; Clear objects allocated to COMRAM (9 bytes)
   343  0034F8  EE00  F046         	lfsr	0,__pbssCOMRAM
   344  0034FC  0E09               	movlw	9
   345  0034FE                     clear_2:
   346  0034FE  6AEE               	clrf	postinc0,c
   347  003500  06E8               	decf	wreg,f,c
   348  003502  E1FD               	bnz	clear_2
   349  003504                     end_of_initialization:
   350                           	opt stack 0
   351  003504                     __end_of__initialization:
   352                           	opt stack 0
   353  003504  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   354  003506  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   355  003508  0E00               	movlw	low (__Lmediumconst shr (0+16))
   356  00350A  6EF8               	movwf	tblptru,c
   357  00350C  0100               	movlb	0
   358  00350E  EF19  F00D         	goto	_main	;jump to C main() function
   359                           tblptru	equ	0xFF8
   360                           postinc0	equ	0xFEE
   361                           wreg	equ	0xFE8
   362                           
   363                           	psect	bssCOMRAM
   364  000046                     __pbssCOMRAM:
   365                           	opt stack 0
   366  000046                     _GGA_CODE:
   367                           	opt stack 0
   368  000046                     	ds	3
   369  000049                     _GGA_Index:
   370                           	opt stack 0
   371  000049                     	ds	2
   372  00004B                     _IsItGGAString:
   373                           	opt stack 0
   374  00004B                     	ds	1
   375  00004C                     _CommaCounter:
   376                           	opt stack 0
   377  00004C                     	ds	1
   378  00004D                     _E_W:
   379                           	opt stack 0
   380  00004D                     	ds	1
   381  00004E                     _N_S:
   382                           	opt stack 0
   383  00004E                     	ds	1
   384                           tblptru	equ	0xFF8
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           
   388                           	psect	bssBANK0
   389  0000C0                     __pbssBANK0:
   390                           	opt stack 0
   391  0000C0                     _GGA_Pointers:
   392                           	opt stack 0
   393  0000C0                     	ds	20
   394  0000D4                     _celsius:
   395                           	opt stack 0
   396  0000D4                     	ds	3
   397  0000D7                     _Data_Buffer:
   398                           	opt stack 0
   399  0000D7                     	ds	15
   400  0000E6                     _Temperature:
   401                           	opt stack 0
   402  0000E6                     	ds	10
   403                           tblptru	equ	0xFF8
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           
   407                           	psect	bssBANK1
   408  000100                     __pbssBANK1:
   409                           	opt stack 0
   410  000100                     _GGA_Buffer:
   411                           	opt stack 0
   412  000100                     	ds	80
   413  000150                     _stringBT:
   414                           	opt stack 0
   415  000150                     	ds	50
   416                           tblptru	equ	0xFF8
   417                           postinc0	equ	0xFEE
   418                           wreg	equ	0xFE8
   419                           
   420                           	psect	cstackBANK0
   421  000060                     __pcstackBANK0:
   422                           	opt stack 0
   423  000060                     ?_get_latitude:
   424                           	opt stack 0
   425  000060                     ?_get_longitude:
   426                           	opt stack 0
   427  000060                     ?_get_altitude:
   428                           	opt stack 0
   429  000060                     ___ftadd@sign:
   430                           	opt stack 0
   431  000060                     ___fttol@sign1:
   432                           	opt stack 0
   433                           
   434                           ; 1 bytes @ 0x0
   435  000060                     	ds	1
   436  000061                     ___ftadd@exp2:
   437                           	opt stack 0
   438  000061                     ___fttol@lval:
   439                           	opt stack 0
   440                           
   441                           ; 4 bytes @ 0x1
   442  000061                     	ds	1
   443  000062                     ___ftadd@exp1:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x2
   447  000062                     	ds	1
   448  000063                     ?___ftsub:
   449                           	opt stack 0
   450  000063                     ___ftsub@f1:
   451                           	opt stack 0
   452  000063                     get_altitude@Alt_Buffer:
   453                           	opt stack 0
   454  000063                     get_latitude@Lat_Buffer:
   455                           	opt stack 0
   456  000063                     get_longitude@Long_Buffer:
   457                           	opt stack 0
   458                           
   459                           ; 15 bytes @ 0x3
   460  000063                     	ds	2
   461  000065                     ___fttol@exp1:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x5
   465  000065                     	ds	1
   466  000066                     ?_convert_to_degrees:
   467                           	opt stack 0
   468  000066                     convert_to_degrees@NMEA_lat_long:
   469                           	opt stack 0
   470  000066                     ___ftsub@f2:
   471                           	opt stack 0
   472  000066                     USART_Init@baud_rate:
   473                           	opt stack 0
   474                           
   475                           ; 4 bytes @ 0x6
   476  000066                     	ds	3
   477  000069                     ?_sprintf:
   478                           	opt stack 0
   479  000069                     sprintf@sp:
   480                           	opt stack 0
   481  000069                     convert_to_degrees@minutes:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x9
   485  000069                     	ds	1
   486  00006A                     USART_Init@temp:
   487                           	opt stack 0
   488                           
   489                           ; 3 bytes @ 0xA
   490  00006A                     	ds	1
   491  00006B                     sprintf@f:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0xB
   495  00006B                     	ds	1
   496  00006C                     convert_to_degrees@dec_deg:
   497                           	opt stack 0
   498                           
   499                           ; 3 bytes @ 0xC
   500  00006C                     	ds	3
   501  00006F                     convert_to_degrees@degrees:
   502                           	opt stack 0
   503  00006F                     get_altitude@_Altitude:
   504                           	opt stack 0
   505                           
   506                           ; 3 bytes @ 0xF
   507  00006F                     	ds	2
   508  000071                     convert_to_degrees@decimal:
   509                           	opt stack 0
   510                           
   511                           ; 3 bytes @ 0x11
   512  000071                     	ds	1
   513  000072                     get_altitude@alt_pointer:
   514                           	opt stack 0
   515  000072                     get_latitude@_latitude:
   516                           	opt stack 0
   517  000072                     get_longitude@_longitude:
   518                           	opt stack 0
   519                           
   520                           ; 3 bytes @ 0x12
   521  000072                     	ds	1
   522  000073                     ??_sprintf:
   523  000073                     get_altitude@alt_index:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x13
   527  000073                     	ds	1
   528  000074                     get_altitude@index:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x14
   532  000074                     	ds	1
   533  000075                     get_latitude@lat_pointer:
   534                           	opt stack 0
   535  000075                     get_longitude@long_pointer:
   536                           	opt stack 0
   537                           
   538                           ; 1 bytes @ 0x15
   539  000075                     	ds	1
   540  000076                     get_latitude@index:
   541                           	opt stack 0
   542  000076                     get_longitude@index:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x16
   546  000076                     	ds	1
   547  000077                     get_latitude@lat_index:
   548                           	opt stack 0
   549  000077                     get_longitude@long_index:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x17
   553  000077                     	ds	2
   554  000079                     _sprintf$1186:
   555                           	opt stack 0
   556                           
   557                           ; 3 bytes @ 0x19
   558  000079                     	ds	3
   559  00007C                     sprintf@cp:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x1C
   563  00007C                     	ds	2
   564  00007E                     sprintf@len:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x1E
   568  00007E                     	ds	2
   569  000080                     sprintf@ap:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x20
   573  000080                     	ds	2
   574  000082                     sprintf@flag:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x22
   578  000082                     	ds	2
   579  000084                     sprintf@exp:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x24
   583  000084                     	ds	2
   584  000086                     sprintf@tmpval:
   585                           	opt stack 0
   586                           
   587                           ; 4 bytes @ 0x26
   588  000086                     	ds	4
   589  00008A                     sprintf@val:
   590                           	opt stack 0
   591                           
   592                           ; 4 bytes @ 0x2A
   593  00008A                     	ds	4
   594  00008E                     sprintf@fval:
   595                           	opt stack 0
   596                           
   597                           ; 3 bytes @ 0x2E
   598  00008E                     	ds	3
   599  000091                     sprintf@prec:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x31
   603  000091                     	ds	2
   604  000093                     sprintf@c:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x33
   608  000093                     	ds	1
   609  000094                     convert_time_to_UTC@UTC_Time:
   610                           	opt stack 0
   611                           
   612                           ; 4 bytes @ 0x34
   613  000094                     	ds	4
   614  000098                     _convert_time_to_UTC$1182:
   615                           	opt stack 0
   616                           
   617                           ; 4 bytes @ 0x38
   618  000098                     	ds	4
   619  00009C                     convert_time_to_UTC@hour:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x3C
   623  00009C                     	ds	2
   624  00009E                     convert_time_to_UTC@min:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x3E
   628  00009E                     	ds	2
   629  0000A0                     convert_time_to_UTC@sec:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x40
   633  0000A0                     	ds	2
   634  0000A2                     main@GPS_Buffer:
   635                           	opt stack 0
   636                           
   637                           ; 15 bytes @ 0x42
   638  0000A2                     	ds	15
   639  0000B1                     main@Time:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x51
   643  0000B1                     	ds	4
   644  0000B5                     main@Altitude:
   645                           	opt stack 0
   646                           
   647                           ; 3 bytes @ 0x55
   648  0000B5                     	ds	3
   649  0000B8                     _main$1181:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x58
   653  0000B8                     	ds	2
   654  0000BA                     main@Latitude:
   655                           	opt stack 0
   656                           
   657                           ; 3 bytes @ 0x5A
   658  0000BA                     	ds	3
   659  0000BD                     main@Longitude:
   660                           	opt stack 0
   661                           
   662                           ; 3 bytes @ 0x5D
   663  0000BD                     	ds	3
   664                           tblptru	equ	0xFF8
   665                           postinc0	equ	0xFEE
   666                           wreg	equ	0xFE8
   667                           
   668                           	psect	cstackCOMRAM
   669  000001                     __pcstackCOMRAM:
   670                           	opt stack 0
   671  000001                     ??_Serial_ISR:
   672  000001                     
   673                           ; 1 bytes @ 0x0
   674  000001                     	ds	14
   675  00000F                     Serial_ISR@received_char:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0xE
   679  00000F                     	ds	1
   680  000010                     ??_isdigit:
   681  000010                     ??_isspace:
   682  000010                     ?_ADC_Read:
   683                           	opt stack 0
   684  000010                     ?___awmod:
   685                           	opt stack 0
   686  000010                     ?___ftpack:
   687                           	opt stack 0
   688  000010                     ?__tdiv_to_l_:
   689                           	opt stack 0
   690  000010                     ?__div_to_l_:
   691                           	opt stack 0
   692  000010                     ?___lmul:
   693                           	opt stack 0
   694  000010                     ?___llmod:
   695                           	opt stack 0
   696  000010                     USART_TxChar@out:
   697                           	opt stack 0
   698  000010                     ADC_Read@channel:
   699                           	opt stack 0
   700  000010                     MSdelay@val:
   701                           	opt stack 0
   702  000010                     ___awmod@dividend:
   703                           	opt stack 0
   704  000010                     memset@p1:
   705                           	opt stack 0
   706  000010                     strcat@to:
   707                           	opt stack 0
   708  000010                     strcpy@to:
   709                           	opt stack 0
   710  000010                     __div_to_l_@f1:
   711                           	opt stack 0
   712  000010                     ___ftpack@arg:
   713                           	opt stack 0
   714  000010                     __tdiv_to_l_@f1:
   715                           	opt stack 0
   716  000010                     ___ftge@ff1:
   717                           	opt stack 0
   718  000010                     ___lmul@multiplier:
   719                           	opt stack 0
   720  000010                     ___llmod@dividend:
   721                           	opt stack 0
   722                           
   723                           ; 4 bytes @ 0xF
   724  000010                     	ds	1
   725  000011                     _isdigit$831:
   726                           	opt stack 0
   727  000011                     _isspace$834:
   728                           	opt stack 0
   729  000011                     USART_SendString@out:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x10
   733  000011                     	ds	1
   734  000012                     ??_ADC_Read:
   735  000012                     isdigit@c:
   736                           	opt stack 0
   737  000012                     isspace@c:
   738                           	opt stack 0
   739  000012                     MSdelay@i:
   740                           	opt stack 0
   741  000012                     ___awmod@divisor:
   742                           	opt stack 0
   743  000012                     memset@c:
   744                           	opt stack 0
   745  000012                     strcat@from:
   746                           	opt stack 0
   747  000012                     strcpy@from:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x11
   751  000012                     	ds	1
   752  000013                     ___ftpack@exp:
   753                           	opt stack 0
   754  000013                     __div_to_l_@f2:
   755                           	opt stack 0
   756  000013                     __tdiv_to_l_@f2:
   757                           	opt stack 0
   758  000013                     ___ftge@ff2:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x12
   762  000013                     	ds	1
   763  000014                     ___awmod@counter:
   764                           	opt stack 0
   765  000014                     ___ftpack@sign:
   766                           	opt stack 0
   767  000014                     MSdelay@j:
   768                           	opt stack 0
   769  000014                     memset@n:
   770                           	opt stack 0
   771  000014                     strcat@cp:
   772                           	opt stack 0
   773  000014                     strcpy@cp:
   774                           	opt stack 0
   775  000014                     ___lmul@multiplicand:
   776                           	opt stack 0
   777  000014                     ___llmod@divisor:
   778                           	opt stack 0
   779                           
   780                           ; 4 bytes @ 0x13
   781  000014                     	ds	1
   782  000015                     ??___ftpack:
   783  000015                     ___awmod@sign:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x14
   787  000015                     	ds	1
   788  000016                     ??__tdiv_to_l_:
   789  000016                     ??___ftge:
   790  000016                     ?___awdiv:
   791                           	opt stack 0
   792  000016                     LCD_Command@cmd:
   793                           	opt stack 0
   794  000016                     LCD_Char@char_data:
   795                           	opt stack 0
   796  000016                     ADC_Read@digital:
   797                           	opt stack 0
   798  000016                     ___awdiv@dividend:
   799                           	opt stack 0
   800  000016                     memset@p:
   801                           	opt stack 0
   802  000016                     __div_to_l_@quot:
   803                           	opt stack 0
   804                           
   805                           ; 4 bytes @ 0x15
   806  000016                     	ds	1
   807  000017                     LCD_String@str:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x16
   811  000017                     	ds	1
   812  000018                     ?___altoft:
   813                           	opt stack 0
   814  000018                     ?___awtoft:
   815                           	opt stack 0
   816  000018                     ?___lltoft:
   817                           	opt stack 0
   818  000018                     ___llmod@counter:
   819                           	opt stack 0
   820  000018                     ___awdiv@divisor:
   821                           	opt stack 0
   822  000018                     ___awtoft@c:
   823                           	opt stack 0
   824  000018                     ___lmul@product:
   825                           	opt stack 0
   826  000018                     ___altoft@c:
   827                           	opt stack 0
   828  000018                     ___lltoft@c:
   829                           	opt stack 0
   830                           
   831                           ; 4 bytes @ 0x17
   832  000018                     	ds	1
   833  000019                     ?___lldiv:
   834                           	opt stack 0
   835  000019                     LCD_String_xy@pos:
   836                           	opt stack 0
   837  000019                     __tdiv_to_l_@quot:
   838                           	opt stack 0
   839  000019                     ___lldiv@dividend:
   840                           	opt stack 0
   841                           
   842                           ; 4 bytes @ 0x18
   843  000019                     	ds	1
   844  00001A                     ___awdiv@counter:
   845                           	opt stack 0
   846  00001A                     __div_to_l_@cntr:
   847                           	opt stack 0
   848  00001A                     LCD_String_xy@str:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x19
   852  00001A                     	ds	1
   853  00001B                     ___awdiv@sign:
   854                           	opt stack 0
   855  00001B                     ___awtoft@sign:
   856                           	opt stack 0
   857  00001B                     __div_to_l_@exp1:
   858                           	opt stack 0
   859                           
   860                           ; 1 bytes @ 0x1A
   861  00001B                     	ds	1
   862  00001C                     ??___altoft:
   863  00001C                     ??___lltoft:
   864  00001C                     ?_atol:
   865                           	opt stack 0
   866  00001C                     LCD_String_xy@row:
   867                           	opt stack 0
   868  00001C                     atol@s:
   869                           	opt stack 0
   870  00001C                     ___awdiv@quotient:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x1B
   874  00001C                     	ds	1
   875  00001D                     __tdiv_to_l_@cntr:
   876                           	opt stack 0
   877  00001D                     ___lldiv@divisor:
   878                           	opt stack 0
   879                           
   880                           ; 4 bytes @ 0x1C
   881  00001D                     	ds	1
   882  00001E                     ?___wmul:
   883                           	opt stack 0
   884  00001E                     __tdiv_to_l_@exp1:
   885                           	opt stack 0
   886  00001E                     ___wmul@multiplier:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x1D
   890  00001E                     	ds	2
   891  000020                     ??_atol:
   892  000020                     ___altoft@exp:
   893                           	opt stack 0
   894  000020                     ___lltoft@exp:
   895                           	opt stack 0
   896  000020                     ___wmul@multiplicand:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x1F
   900  000020                     	ds	1
   901  000021                     ___altoft@sign:
   902                           	opt stack 0
   903  000021                     ___lldiv@quotient:
   904                           	opt stack 0
   905                           
   906                           ; 4 bytes @ 0x20
   907  000021                     	ds	1
   908  000022                     ?___ftdiv:
   909                           	opt stack 0
   910  000022                     ___wmul@product:
   911                           	opt stack 0
   912  000022                     ___ftdiv@f1:
   913                           	opt stack 0
   914                           
   915                           ; 3 bytes @ 0x21
   916  000022                     	ds	2
   917  000024                     ?___ftmul:
   918                           	opt stack 0
   919  000024                     atol@sign:
   920                           	opt stack 0
   921  000024                     ___ftmul@f1:
   922                           	opt stack 0
   923                           
   924                           ; 3 bytes @ 0x23
   925  000024                     	ds	1
   926  000025                     ___lldiv@counter:
   927                           	opt stack 0
   928  000025                     ___ftdiv@f2:
   929                           	opt stack 0
   930  000025                     atol@a:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x24
   934  000025                     	ds	2
   935  000027                     ___ftmul@f2:
   936                           	opt stack 0
   937                           
   938                           ; 3 bytes @ 0x26
   939  000027                     	ds	1
   940  000028                     ??___ftdiv:
   941                           
   942                           ; 1 bytes @ 0x27
   943  000028                     	ds	1
   944  000029                     atol@c:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x28
   948  000029                     	ds	1
   949  00002A                     ??___ftmul:
   950  00002A                     ?_get_gpstime:
   951                           	opt stack 0
   952                           
   953                           ; 4 bytes @ 0x29
   954  00002A                     	ds	1
   955  00002B                     ___ftdiv@cntr:
   956                           	opt stack 0
   957                           
   958                           ; 1 bytes @ 0x2A
   959  00002B                     	ds	1
   960  00002C                     ___ftdiv@f3:
   961                           	opt stack 0
   962                           
   963                           ; 3 bytes @ 0x2B
   964  00002C                     	ds	1
   965  00002D                     ___ftmul@exp:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x2C
   969  00002D                     	ds	1
   970  00002E                     ___ftmul@f3_as_product:
   971                           	opt stack 0
   972                           
   973                           ; 3 bytes @ 0x2D
   974  00002E                     	ds	1
   975  00002F                     ___ftdiv@exp:
   976                           	opt stack 0
   977  00002F                     get_gpstime@Time_Buffer:
   978                           	opt stack 0
   979                           
   980                           ; 15 bytes @ 0x2E
   981  00002F                     	ds	1
   982  000030                     ___ftdiv@sign:
   983                           	opt stack 0
   984                           
   985                           ; 1 bytes @ 0x2F
   986  000030                     	ds	1
   987  000031                     ___ftmul@cntr:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x30
   991  000031                     	ds	1
   992  000032                     ___ftmul@sign:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x31
   996  000032                     	ds	1
   997  000033                     ?_fround:
   998                           	opt stack 0
   999  000033                     ?_scale:
  1000                           	opt stack 0
  1001  000033                     ?___ftneg:
  1002                           	opt stack 0
  1003  000033                     ___ftneg@f1:
  1004                           	opt stack 0
  1005                           
  1006                           ; 3 bytes @ 0x32
  1007  000033                     	ds	3
  1008  000036                     ?_strtod:
  1009                           	opt stack 0
  1010  000036                     strtod@s:
  1011                           	opt stack 0
  1012  000036                     _fround$1184:
  1013                           	opt stack 0
  1014  000036                     _scale$1185:
  1015                           	opt stack 0
  1016                           
  1017                           ; 3 bytes @ 0x35
  1018  000036                     	ds	2
  1019  000038                     strtod@res:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x37
  1023  000038                     	ds	1
  1024  000039                     scale@scl:
  1025                           	opt stack 0
  1026  000039                     _fround$1183:
  1027                           	opt stack 0
  1028                           
  1029                           ; 3 bytes @ 0x38
  1030  000039                     	ds	1
  1031  00003A                     ??_strtod:
  1032  00003A                     ?___fttol:
  1033                           	opt stack 0
  1034  00003A                     ___fttol@f1:
  1035                           	opt stack 0
  1036                           
  1037                           ; 3 bytes @ 0x39
  1038  00003A                     	ds	1
  1039  00003B                     strtod@eexp:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x3A
  1043  00003B                     	ds	1
  1044  00003C                     fround@prec:
  1045                           	opt stack 0
  1046  00003C                     strtod@flags:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x3B
  1050  00003C                     	ds	1
  1051  00003D                     ?___ftadd:
  1052                           	opt stack 0
  1053  00003D                     strtod@expon:
  1054                           	opt stack 0
  1055  00003D                     ___ftadd@f1:
  1056                           	opt stack 0
  1057                           
  1058                           ; 3 bytes @ 0x3C
  1059  00003D                     	ds	1
  1060  00003E                     ??___fttol:
  1061  00003E                     get_gpstime@_Time:
  1062                           	opt stack 0
  1063  00003E                     strtod@_u:
  1064                           	opt stack 0
  1065                           
  1066                           ; 4 bytes @ 0x3D
  1067  00003E                     	ds	2
  1068  000040                     ___ftadd@f2:
  1069                           	opt stack 0
  1070                           
  1071                           ; 3 bytes @ 0x3F
  1072  000040                     	ds	2
  1073  000042                     ?_atof:
  1074                           	opt stack 0
  1075  000042                     get_gpstime@index:
  1076                           	opt stack 0
  1077  000042                     atof@s:
  1078                           	opt stack 0
  1079                           
  1080                           ; 2 bytes @ 0x41
  1081  000042                     	ds	1
  1082  000043                     ??___ftadd:
  1083                           
  1084                           ; 1 bytes @ 0x42
  1085  000043                     	ds	2
  1086  000045                     
  1087                           ; 1 bytes @ 0x44
  1088  000045                     	ds	1
  1089  000046                     tblptru	equ	0xFF8
  1090                           postinc0	equ	0xFEE
  1091                           wreg	equ	0xFE8
  1092                           
  1093                           ; 1 bytes @ 0x45
  1094 ;;
  1095 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1096 ;;
  1097 ;; *************** function _main *****************
  1098 ;; Defined at:
  1099 ;;		line 40 in file "GPS.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;		None
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;  GPS_Buffer     15   66[BANK0 ] unsigned char [15]
  1104 ;;  Time            4   81[BANK0 ] unsigned long 
  1105 ;;  Longitude       3   93[BANK0 ] float 
  1106 ;;  Latitude        3   90[BANK0 ] float 
  1107 ;;  Altitude        3   85[BANK0 ] float 
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  1    wreg      void 
  1110 ;; Registers used:
  1111 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1112 ;; Tracked objects:
  1113 ;;		On entry : 0/0
  1114 ;;		On exit  : 0/0
  1115 ;;		Unchanged: 0/0
  1116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1117 ;;      Params:         0       0       0       0       0       0       0       0       0
  1118 ;;      Locals:         0      30       0       0       0       0       0       0       0
  1119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1120 ;;      Totals:         0      30       0       0       0       0       0       0       0
  1121 ;;Total ram usage:       30 bytes
  1122 ;; Hardware stack levels required when called:    6
  1123 ;; This function calls:
  1124 ;;		_ADC_Init
  1125 ;;		_ADC_Read
  1126 ;;		_LCD_Init
  1127 ;;		_LCD_String
  1128 ;;		_LCD_String_xy
  1129 ;;		_USART_Init
  1130 ;;		_USART_SendString
  1131 ;;		___awtoft
  1132 ;;		___ftdiv
  1133 ;;		___ftmul
  1134 ;;		___fttol
  1135 ;;		_convert_time_to_UTC
  1136 ;;		_convert_to_degrees
  1137 ;;		_get_altitude
  1138 ;;		_get_gpstime
  1139 ;;		_get_latitude
  1140 ;;		_get_longitude
  1141 ;;		_memset
  1142 ;;		_sprintf
  1143 ;;		_strcat
  1144 ;;		_strcpy
  1145 ;; This function is called by:
  1146 ;;		Startup code after reset
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150                           	psect	text0
  1151  001A32                     __ptext0:
  1152                           	opt stack 0
  1153  001A32                     _main:
  1154                           	opt stack 25
  1155                           
  1156                           ;GPS.c: 41: unsigned long int Time;
  1157                           ;GPS.c: 42: float Latitude,Longitude,Altitude;
  1158                           ;GPS.c: 43: char GPS_Buffer[15];
  1159                           ;GPS.c: 45: OSCCON = 0x72;
  1160                           
  1161                           ;incstack = 0
  1162  001A32  0E72               	movlw	114
  1163  001A34  6ED3               	movwf	4051,c	;volatile
  1164                           
  1165                           ;GPS.c: 46: LCD_Init();
  1166  001A36  EC19  F01A         	call	_LCD_Init	;wreg free
  1167                           
  1168                           ;GPS.c: 47: INTCONbits.GIE=1;
  1169  001A3A  8EF2               	bsf	intcon,7,c	;volatile
  1170                           
  1171                           ;GPS.c: 48: INTCONbits.PEIE=1;
  1172  001A3C  8CF2               	bsf	intcon,6,c	;volatile
  1173                           
  1174                           ;GPS.c: 49: PIE1bits.RCIE=1;
  1175  001A3E  8A9D               	bsf	3997,5,c	;volatile
  1176                           
  1177                           ;GPS.c: 50: USART_Init(9600);
  1178  001A40  0E80               	movlw	128
  1179  001A42  0100               	movlb	0	; () banked
  1180  001A44  6F66               	movwf	USART_Init@baud_rate& (0+255),b
  1181  001A46  0E25               	movlw	37
  1182  001A48  6F67               	movwf	(USART_Init@baud_rate+1)& (0+255),b
  1183  001A4A  0E00               	movlw	0
  1184  001A4C  6F68               	movwf	(USART_Init@baud_rate+2)& (0+255),b
  1185  001A4E  0E00               	movlw	0
  1186  001A50  6F69               	movwf	(USART_Init@baud_rate+3)& (0+255),b
  1187  001A52  ECBD  F017         	call	_USART_Init	;wreg free
  1188                           
  1189                           ;GPS.c: 51: ADC_Init();
  1190  001A56  EC3E  F01B         	call	_ADC_Init	;wreg free
  1191  001A5A                     l4980:
  1192                           
  1193                           ;GPS.c: 90: celsius = (ADC_Read(0)*4.88);
  1194  001A5A  0E00               	movlw	0
  1195  001A5C  6E11               	movwf	ADC_Read@channel+1,c
  1196  001A5E  0E00               	movlw	0
  1197  001A60  6E10               	movwf	ADC_Read@channel,c
  1198  001A62  ECFA  F017         	call	_ADC_Read	;wreg free
  1199  001A66  C010  F018         	movff	?_ADC_Read,___awtoft@c
  1200  001A6A  C011  F019         	movff	?_ADC_Read+1,___awtoft@c+1
  1201  001A6E  EC39  F01A         	call	___awtoft	;wreg free
  1202  001A72  C018  F024         	movff	?___awtoft,___ftmul@f1
  1203  001A76  C019  F025         	movff	?___awtoft+1,___ftmul@f1+1
  1204  001A7A  C01A  F026         	movff	?___awtoft+2,___ftmul@f1+2
  1205  001A7E  0E29               	movlw	41
  1206  001A80  6E27               	movwf	___ftmul@f2,c
  1207  001A82  0E9C               	movlw	156
  1208  001A84  6E28               	movwf	___ftmul@f2+1,c
  1209  001A86  0E40               	movlw	64
  1210  001A88  6E29               	movwf	___ftmul@f2+2,c
  1211  001A8A  ECCE  F014         	call	___ftmul	;wreg free
  1212  001A8E  C024  F0D4         	movff	?___ftmul,_celsius
  1213  001A92  C025  F0D5         	movff	?___ftmul+1,_celsius+1
  1214  001A96  C026  F0D6         	movff	?___ftmul+2,_celsius+2
  1215                           
  1216                           ;GPS.c: 91: celsius = (celsius/10.00);
  1217  001A9A  C0D4  F022         	movff	_celsius,___ftdiv@f1
  1218  001A9E  C0D5  F023         	movff	_celsius+1,___ftdiv@f1+1
  1219  001AA2  C0D6  F024         	movff	_celsius+2,___ftdiv@f1+2
  1220  001AA6  0E00               	movlw	0
  1221  001AA8  6E25               	movwf	___ftdiv@f2,c
  1222  001AAA  0E20               	movlw	32
  1223  001AAC  6E26               	movwf	___ftdiv@f2+1,c
  1224  001AAE  0E41               	movlw	65
  1225  001AB0  6E27               	movwf	___ftdiv@f2+2,c
  1226  001AB2  EC48  F015         	call	___ftdiv	;wreg free
  1227  001AB6  C022  F0D4         	movff	?___ftdiv,_celsius
  1228  001ABA  C023  F0D5         	movff	?___ftdiv+1,_celsius+1
  1229  001ABE  C024  F0D6         	movff	?___ftdiv+2,_celsius+2
  1230                           
  1231                           ;GPS.c: 93: sprintf(Temperature,"%d%cC  ",(int)celsius,0xdf);
  1232  001AC2  C0D4  F03A         	movff	_celsius,___fttol@f1
  1233  001AC6  C0D5  F03B         	movff	_celsius+1,___fttol@f1+1
  1234  001ACA  C0D6  F03C         	movff	_celsius+2,___fttol@f1+2
  1235  001ACE  ECB1  F012         	call	___fttol	;wreg free
  1236  001AD2  C03A  F0B8         	movff	?___fttol,_main$1181
  1237  001AD6  C03B  F0B9         	movff	?___fttol+1,_main$1181+1
  1238                           
  1239                           ;GPS.c: 93: sprintf(Temperature,"%d%cC  ",(int)celsius,0xdf);
  1240  001ADA  0EE6               	movlw	low _Temperature
  1241  001ADC  0100               	movlb	0	; () banked
  1242  001ADE  6F69               	movwf	sprintf@sp& (0+255),b
  1243  001AE0  0E00               	movlw	high _Temperature
  1244  001AE2  0100               	movlb	0	; () banked
  1245  001AE4  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  1246  001AE6  0E8B               	movlw	low STR_1
  1247  001AE8  0100               	movlb	0	; () banked
  1248  001AEA  6F6B               	movwf	sprintf@f& (0+255),b
  1249  001AEC  0E08               	movlw	high STR_1
  1250  001AEE  0100               	movlb	0	; () banked
  1251  001AF0  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  1252  001AF2  C0B8  F06D         	movff	_main$1181,?_sprintf+4
  1253  001AF6  C0B9  F06E         	movff	_main$1181+1,?_sprintf+5
  1254  001AFA  0E00               	movlw	0
  1255  001AFC  0100               	movlb	0	; () banked
  1256  001AFE  6F70               	movwf	(?_sprintf+7)& (0+255),b
  1257  001B00  0EDF               	movlw	223
  1258  001B02  6F6F               	movwf	(?_sprintf+6)& (0+255),b
  1259  001B04  EC5A  F004         	call	_sprintf	;wreg free
  1260                           
  1261                           ;GPS.c: 96: memset(GPS_Buffer,0,15);
  1262  001B08  0EA2               	movlw	low main@GPS_Buffer
  1263  001B0A  6E10               	movwf	memset@p1,c
  1264  001B0C  0E00               	movlw	high main@GPS_Buffer
  1265  001B0E  6E11               	movwf	memset@p1+1,c
  1266  001B10  0E00               	movlw	0
  1267  001B12  6E13               	movwf	memset@c+1,c
  1268  001B14  0E00               	movlw	0
  1269  001B16  6E12               	movwf	memset@c,c
  1270  001B18  0E00               	movlw	0
  1271  001B1A  6E15               	movwf	memset@n+1,c
  1272  001B1C  0E0F               	movlw	15
  1273  001B1E  6E14               	movwf	memset@n,c
  1274  001B20  ECA0  F01A         	call	_memset	;wreg free
  1275                           
  1276                           ;GPS.c: 97: LCD_String_xy(1,0,"UTC Time: ");
  1277  001B24  0E00               	movlw	0
  1278  001B26  6E19               	movwf	LCD_String_xy@pos,c
  1279  001B28  0E77               	movlw	low STR_2
  1280  001B2A  6E1A               	movwf	LCD_String_xy@str,c
  1281  001B2C  0E08               	movlw	high STR_2
  1282  001B2E  6E1B               	movwf	LCD_String_xy@str+1,c
  1283  001B30  0E01               	movlw	1
  1284  001B32  EC45  F019         	call	_LCD_String_xy
  1285                           
  1286                           ;GPS.c: 98: Time = get_gpstime();
  1287  001B36  EC73  F018         	call	_get_gpstime	;wreg free
  1288  001B3A  C02A  F0B1         	movff	?_get_gpstime,main@Time
  1289  001B3E  C02B  F0B2         	movff	?_get_gpstime+1,main@Time+1
  1290  001B42  C02C  F0B3         	movff	?_get_gpstime+2,main@Time+2
  1291  001B46  C02D  F0B4         	movff	?_get_gpstime+3,main@Time+3
  1292                           
  1293                           ;GPS.c: 99: convert_time_to_UTC(Time);
  1294  001B4A  C0B1  F094         	movff	main@Time,convert_time_to_UTC@UTC_Time
  1295  001B4E  C0B2  F095         	movff	main@Time+1,convert_time_to_UTC@UTC_Time+1
  1296  001B52  C0B3  F096         	movff	main@Time+2,convert_time_to_UTC@UTC_Time+2
  1297  001B56  C0B4  F097         	movff	main@Time+3,convert_time_to_UTC@UTC_Time+3
  1298  001B5A  ECC9  F013         	call	_convert_time_to_UTC	;wreg free
  1299                           
  1300                           ;GPS.c: 100: LCD_String(Data_Buffer);
  1301  001B5E  0ED7               	movlw	low _Data_Buffer
  1302  001B60  6E17               	movwf	LCD_String@str,c
  1303  001B62  0E00               	movlw	high _Data_Buffer
  1304  001B64  6E18               	movwf	LCD_String@str+1,c
  1305  001B66  ECCA  F019         	call	_LCD_String	;wreg free
  1306                           
  1307                           ;GPS.c: 101: LCD_String("  ");
  1308  001B6A  0E90               	movlw	low (STR_1+5)
  1309  001B6C  6E17               	movwf	LCD_String@str,c
  1310  001B6E  0E08               	movlw	high (STR_1+5)
  1311  001B70  6E18               	movwf	LCD_String@str+1,c
  1312  001B72  ECCA  F019         	call	_LCD_String	;wreg free
  1313                           
  1314                           ;GPS.c: 103: strcpy(stringBT, Data_Buffer);
  1315  001B76  0E50               	movlw	low _stringBT
  1316  001B78  6E10               	movwf	strcpy@to,c
  1317  001B7A  0E01               	movlw	high _stringBT
  1318  001B7C  6E11               	movwf	strcpy@to+1,c
  1319  001B7E  0ED7               	movlw	low _Data_Buffer
  1320  001B80  6E12               	movwf	strcpy@from,c
  1321  001B82  0E00               	movlw	high _Data_Buffer
  1322  001B84  6E13               	movwf	strcpy@from+1,c
  1323  001B86  EC89  F01A         	call	_strcpy	;wreg free
  1324                           
  1325                           ;GPS.c: 104: strcat(stringBT, ",");
  1326  001B8A  0E50               	movlw	low _stringBT
  1327  001B8C  6E10               	movwf	strcat@to,c
  1328  001B8E  0E01               	movlw	high _stringBT
  1329  001B90  6E11               	movwf	strcat@to+1,c
  1330  001B92  0EB1               	movlw	low STR_4
  1331  001B94  6E12               	movwf	strcat@from,c
  1332  001B96  0E08               	movlw	high STR_4
  1333  001B98  6E13               	movwf	strcat@from+1,c
  1334  001B9A  EC73  F019         	call	_strcat	;wreg free
  1335                           
  1336                           ;GPS.c: 106: LCD_String_xy(2,0,"Lat: ");
  1337  001B9E  0E00               	movlw	0
  1338  001BA0  6E19               	movwf	LCD_String_xy@pos,c
  1339  001BA2  0E9A               	movlw	low STR_5
  1340  001BA4  6E1A               	movwf	LCD_String_xy@str,c
  1341  001BA6  0E08               	movlw	high STR_5
  1342  001BA8  6E1B               	movwf	LCD_String_xy@str+1,c
  1343  001BAA  0E02               	movlw	2
  1344  001BAC  EC45  F019         	call	_LCD_String_xy
  1345                           
  1346                           ;GPS.c: 107: Latitude = get_latitude(GGA_Pointers[0]);
  1347  001BB0  0100               	movlb	0	; () banked
  1348  001BB2  51C0               	movf	_GGA_Pointers& (0+255),w,b
  1349  001BB4  EC61  F016         	call	_get_latitude
  1350  001BB8  C060  F0BA         	movff	?_get_latitude,main@Latitude
  1351  001BBC  C061  F0BB         	movff	?_get_latitude+1,main@Latitude+1
  1352  001BC0  C062  F0BC         	movff	?_get_latitude+2,main@Latitude+2
  1353                           
  1354                           ;GPS.c: 108: Latitude = convert_to_degrees(Latitude);
  1355  001BC4  C0BA  F066         	movff	main@Latitude,convert_to_degrees@NMEA_lat_long
  1356  001BC8  C0BB  F067         	movff	main@Latitude+1,convert_to_degrees@NMEA_lat_long+1
  1357  001BCC  C0BC  F068         	movff	main@Latitude+2,convert_to_degrees@NMEA_lat_long+2
  1358  001BD0  ECE9  F010         	call	_convert_to_degrees	;wreg free
  1359  001BD4  C066  F0BA         	movff	?_convert_to_degrees,main@Latitude
  1360  001BD8  C067  F0BB         	movff	?_convert_to_degrees+1,main@Latitude+1
  1361  001BDC  C068  F0BC         	movff	?_convert_to_degrees+2,main@Latitude+2
  1362                           
  1363                           ;GPS.c: 109: sprintf(GPS_Buffer,"%.05f",Latitude);
  1364  001BE0  0EA2               	movlw	low main@GPS_Buffer
  1365  001BE2  0100               	movlb	0	; () banked
  1366  001BE4  6F69               	movwf	sprintf@sp& (0+255),b
  1367  001BE6  0E00               	movlw	high main@GPS_Buffer
  1368  001BE8  0100               	movlb	0	; () banked
  1369  001BEA  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  1370  001BEC  0EA6               	movlw	low STR_6
  1371  001BEE  0100               	movlb	0	; () banked
  1372  001BF0  6F6B               	movwf	sprintf@f& (0+255),b
  1373  001BF2  0E08               	movlw	high STR_6
  1374  001BF4  0100               	movlb	0	; () banked
  1375  001BF6  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  1376  001BF8  C0BA  F06D         	movff	main@Latitude,?_sprintf+4
  1377  001BFC  C0BB  F06E         	movff	main@Latitude+1,?_sprintf+5
  1378  001C00  C0BC  F06F         	movff	main@Latitude+2,?_sprintf+6
  1379  001C04  EC5A  F004         	call	_sprintf	;wreg free
  1380                           
  1381                           ;GPS.c: 110: LCD_String(GPS_Buffer);
  1382  001C08  0EA2               	movlw	low main@GPS_Buffer
  1383  001C0A  6E17               	movwf	LCD_String@str,c
  1384  001C0C  0E00               	movlw	high main@GPS_Buffer
  1385  001C0E  6E18               	movwf	LCD_String@str+1,c
  1386  001C10  ECCA  F019         	call	_LCD_String	;wreg free
  1387                           
  1388                           ;GPS.c: 111: memset(GPS_Buffer,0,15);
  1389  001C14  0EA2               	movlw	low main@GPS_Buffer
  1390  001C16  6E10               	movwf	memset@p1,c
  1391  001C18  0E00               	movlw	high main@GPS_Buffer
  1392  001C1A  6E11               	movwf	memset@p1+1,c
  1393  001C1C  0E00               	movlw	0
  1394  001C1E  6E13               	movwf	memset@c+1,c
  1395  001C20  0E00               	movlw	0
  1396  001C22  6E12               	movwf	memset@c,c
  1397  001C24  0E00               	movlw	0
  1398  001C26  6E15               	movwf	memset@n+1,c
  1399  001C28  0E0F               	movlw	15
  1400  001C2A  6E14               	movwf	memset@n,c
  1401  001C2C  ECA0  F01A         	call	_memset	;wreg free
  1402                           
  1403                           ;GPS.c: 113: strcat(stringBT, GPS_Buffer);
  1404  001C30  0E50               	movlw	low _stringBT
  1405  001C32  6E10               	movwf	strcat@to,c
  1406  001C34  0E01               	movlw	high _stringBT
  1407  001C36  6E11               	movwf	strcat@to+1,c
  1408  001C38  0EA2               	movlw	low main@GPS_Buffer
  1409  001C3A  6E12               	movwf	strcat@from,c
  1410  001C3C  0E00               	movlw	high main@GPS_Buffer
  1411  001C3E  6E13               	movwf	strcat@from+1,c
  1412  001C40  EC73  F019         	call	_strcat	;wreg free
  1413                           
  1414                           ;GPS.c: 114: strcat(stringBT, ",");
  1415  001C44  0E50               	movlw	low _stringBT
  1416  001C46  6E10               	movwf	strcat@to,c
  1417  001C48  0E01               	movlw	high _stringBT
  1418  001C4A  6E11               	movwf	strcat@to+1,c
  1419  001C4C  0EB1               	movlw	low STR_4
  1420  001C4E  6E12               	movwf	strcat@from,c
  1421  001C50  0E08               	movlw	high STR_4
  1422  001C52  6E13               	movwf	strcat@from+1,c
  1423  001C54  EC73  F019         	call	_strcat	;wreg free
  1424                           
  1425                           ;GPS.c: 116: LCD_String_xy(3,0,"Long: ");
  1426  001C58  0E00               	movlw	0
  1427  001C5A  6E19               	movwf	LCD_String_xy@pos,c
  1428  001C5C  0E93               	movlw	low STR_8
  1429  001C5E  6E1A               	movwf	LCD_String_xy@str,c
  1430  001C60  0E08               	movlw	high STR_8
  1431  001C62  6E1B               	movwf	LCD_String_xy@str+1,c
  1432  001C64  0E03               	movlw	3
  1433  001C66  EC45  F019         	call	_LCD_String_xy
  1434                           
  1435                           ;GPS.c: 117: Longitude = get_longitude(GGA_Pointers[2]);
  1436  001C6A  0100               	movlb	0	; () banked
  1437  001C6C  51C2               	movf	(_GGA_Pointers+2)& (0+255),w,b
  1438  001C6E  EC12  F016         	call	_get_longitude
  1439  001C72  C060  F0BD         	movff	?_get_longitude,main@Longitude
  1440  001C76  C061  F0BE         	movff	?_get_longitude+1,main@Longitude+1
  1441  001C7A  C062  F0BF         	movff	?_get_longitude+2,main@Longitude+2
  1442                           
  1443                           ;GPS.c: 118: Longitude = convert_to_degrees(Longitude);
  1444  001C7E  C0BD  F066         	movff	main@Longitude,convert_to_degrees@NMEA_lat_long
  1445  001C82  C0BE  F067         	movff	main@Longitude+1,convert_to_degrees@NMEA_lat_long+1
  1446  001C86  C0BF  F068         	movff	main@Longitude+2,convert_to_degrees@NMEA_lat_long+2
  1447  001C8A  ECE9  F010         	call	_convert_to_degrees	;wreg free
  1448  001C8E  C066  F0BD         	movff	?_convert_to_degrees,main@Longitude
  1449  001C92  C067  F0BE         	movff	?_convert_to_degrees+1,main@Longitude+1
  1450  001C96  C068  F0BF         	movff	?_convert_to_degrees+2,main@Longitude+2
  1451                           
  1452                           ;GPS.c: 119: sprintf(GPS_Buffer,"%.05f",Longitude);
  1453  001C9A  0EA2               	movlw	low main@GPS_Buffer
  1454  001C9C  0100               	movlb	0	; () banked
  1455  001C9E  6F69               	movwf	sprintf@sp& (0+255),b
  1456  001CA0  0E00               	movlw	high main@GPS_Buffer
  1457  001CA2  0100               	movlb	0	; () banked
  1458  001CA4  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  1459  001CA6  0EA6               	movlw	low STR_6
  1460  001CA8  0100               	movlb	0	; () banked
  1461  001CAA  6F6B               	movwf	sprintf@f& (0+255),b
  1462  001CAC  0E08               	movlw	high STR_6
  1463  001CAE  0100               	movlb	0	; () banked
  1464  001CB0  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  1465  001CB2  C0BD  F06D         	movff	main@Longitude,?_sprintf+4
  1466  001CB6  C0BE  F06E         	movff	main@Longitude+1,?_sprintf+5
  1467  001CBA  C0BF  F06F         	movff	main@Longitude+2,?_sprintf+6
  1468  001CBE  EC5A  F004         	call	_sprintf	;wreg free
  1469                           
  1470                           ;GPS.c: 120: LCD_String(GPS_Buffer);
  1471  001CC2  0EA2               	movlw	low main@GPS_Buffer
  1472  001CC4  6E17               	movwf	LCD_String@str,c
  1473  001CC6  0E00               	movlw	high main@GPS_Buffer
  1474  001CC8  6E18               	movwf	LCD_String@str+1,c
  1475  001CCA  ECCA  F019         	call	_LCD_String	;wreg free
  1476                           
  1477                           ;GPS.c: 121: memset(GPS_Buffer,0,15);
  1478  001CCE  0EA2               	movlw	low main@GPS_Buffer
  1479  001CD0  6E10               	movwf	memset@p1,c
  1480  001CD2  0E00               	movlw	high main@GPS_Buffer
  1481  001CD4  6E11               	movwf	memset@p1+1,c
  1482  001CD6  0E00               	movlw	0
  1483  001CD8  6E13               	movwf	memset@c+1,c
  1484  001CDA  0E00               	movlw	0
  1485  001CDC  6E12               	movwf	memset@c,c
  1486  001CDE  0E00               	movlw	0
  1487  001CE0  6E15               	movwf	memset@n+1,c
  1488  001CE2  0E0F               	movlw	15
  1489  001CE4  6E14               	movwf	memset@n,c
  1490  001CE6  ECA0  F01A         	call	_memset	;wreg free
  1491                           
  1492                           ;GPS.c: 123: strcat(stringBT, GPS_Buffer);
  1493  001CEA  0E50               	movlw	low _stringBT
  1494  001CEC  6E10               	movwf	strcat@to,c
  1495  001CEE  0E01               	movlw	high _stringBT
  1496  001CF0  6E11               	movwf	strcat@to+1,c
  1497  001CF2  0EA2               	movlw	low main@GPS_Buffer
  1498  001CF4  6E12               	movwf	strcat@from,c
  1499  001CF6  0E00               	movlw	high main@GPS_Buffer
  1500  001CF8  6E13               	movwf	strcat@from+1,c
  1501  001CFA  EC73  F019         	call	_strcat	;wreg free
  1502                           
  1503                           ;GPS.c: 124: strcat(stringBT, ",");
  1504  001CFE  0E50               	movlw	low _stringBT
  1505  001D00  6E10               	movwf	strcat@to,c
  1506  001D02  0E01               	movlw	high _stringBT
  1507  001D04  6E11               	movwf	strcat@to+1,c
  1508  001D06  0EB1               	movlw	low STR_4
  1509  001D08  6E12               	movwf	strcat@from,c
  1510  001D0A  0E08               	movlw	high STR_4
  1511  001D0C  6E13               	movwf	strcat@from+1,c
  1512  001D0E  EC73  F019         	call	_strcat	;wreg free
  1513                           
  1514                           ;GPS.c: 126: LCD_String_xy(4,0,"Alt: ");
  1515  001D12  0E00               	movlw	0
  1516  001D14  6E19               	movwf	LCD_String_xy@pos,c
  1517  001D16  0EA0               	movlw	low STR_11
  1518  001D18  6E1A               	movwf	LCD_String_xy@str,c
  1519  001D1A  0E08               	movlw	high STR_11
  1520  001D1C  6E1B               	movwf	LCD_String_xy@str+1,c
  1521  001D1E  0E04               	movlw	4
  1522  001D20  EC45  F019         	call	_LCD_String_xy
  1523                           
  1524                           ;GPS.c: 127: Altitude = get_altitude(GGA_Pointers[7]);
  1525  001D24  0100               	movlb	0	; () banked
  1526  001D26  51C7               	movf	(_GGA_Pointers+7)& (0+255),w,b
  1527  001D28  ECF8  F016         	call	_get_altitude
  1528  001D2C  C060  F0B5         	movff	?_get_altitude,main@Altitude
  1529  001D30  C061  F0B6         	movff	?_get_altitude+1,main@Altitude+1
  1530  001D34  C062  F0B7         	movff	?_get_altitude+2,main@Altitude+2
  1531                           
  1532                           ;GPS.c: 128: sprintf(GPS_Buffer,"%.2f",Altitude);
  1533  001D38  0EA2               	movlw	low main@GPS_Buffer
  1534  001D3A  0100               	movlb	0	; () banked
  1535  001D3C  6F69               	movwf	sprintf@sp& (0+255),b
  1536  001D3E  0E00               	movlw	high main@GPS_Buffer
  1537  001D40  0100               	movlb	0	; () banked
  1538  001D42  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  1539  001D44  0EAC               	movlw	low STR_12
  1540  001D46  0100               	movlb	0	; () banked
  1541  001D48  6F6B               	movwf	sprintf@f& (0+255),b
  1542  001D4A  0E08               	movlw	high STR_12
  1543  001D4C  0100               	movlb	0	; () banked
  1544  001D4E  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  1545  001D50  C0B5  F06D         	movff	main@Altitude,?_sprintf+4
  1546  001D54  C0B6  F06E         	movff	main@Altitude+1,?_sprintf+5
  1547  001D58  C0B7  F06F         	movff	main@Altitude+2,?_sprintf+6
  1548  001D5C  EC5A  F004         	call	_sprintf	;wreg free
  1549                           
  1550                           ;GPS.c: 129: LCD_String(GPS_Buffer);
  1551  001D60  0EA2               	movlw	low main@GPS_Buffer
  1552  001D62  6E17               	movwf	LCD_String@str,c
  1553  001D64  0E00               	movlw	high main@GPS_Buffer
  1554  001D66  6E18               	movwf	LCD_String@str+1,c
  1555  001D68  ECCA  F019         	call	_LCD_String	;wreg free
  1556                           
  1557                           ;GPS.c: 131: strcat(stringBT, Temperature);
  1558  001D6C  0E50               	movlw	low _stringBT
  1559  001D6E  6E10               	movwf	strcat@to,c
  1560  001D70  0E01               	movlw	high _stringBT
  1561  001D72  6E11               	movwf	strcat@to+1,c
  1562  001D74  0EE6               	movlw	low _Temperature
  1563  001D76  6E12               	movwf	strcat@from,c
  1564  001D78  0E00               	movlw	high _Temperature
  1565  001D7A  6E13               	movwf	strcat@from+1,c
  1566  001D7C  EC73  F019         	call	_strcat	;wreg free
  1567                           
  1568                           ;GPS.c: 133: USART_SendString(stringBT);
  1569  001D80  0E50               	movlw	low _stringBT
  1570  001D82  6E11               	movwf	USART_SendString@out,c
  1571  001D84  0E01               	movlw	high _stringBT
  1572  001D86  6E12               	movwf	USART_SendString@out+1,c
  1573  001D88  ECEE  F01A         	call	_USART_SendString	;wreg free
  1574  001D8C  D666               	goto	l4980
  1575  001D8E                     __end_of_main:
  1576                           	opt stack 0
  1577                           tblptru	equ	0xFF8
  1578                           intcon	equ	0xFF2
  1579                           postinc0	equ	0xFEE
  1580                           wreg	equ	0xFE8
  1581                           
  1582 ;; *************** function _strcpy *****************
  1583 ;; Defined at:
  1584 ;;		line 8 in file "D:\mplab\sources\common\strcpy.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;  to              2   15[COMRAM] PTR unsigned char 
  1587 ;;		 -> stringBT(50), 
  1588 ;;  from            2   17[COMRAM] PTR const unsigned char 
  1589 ;;		 -> Data_Buffer(15), 
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;  cp              2   19[COMRAM] PTR unsigned char 
  1592 ;;		 -> stringBT(50), 
  1593 ;; Return value:  Size  Location     Type
  1594 ;;                  2   15[COMRAM] PTR unsigned char 
  1595 ;; Registers used:
  1596 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1602 ;;      Params:         4       0       0       0       0       0       0       0       0
  1603 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1604 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1605 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1606 ;;Total ram usage:        6 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; Hardware stack levels required when called:    1
  1609 ;; This function calls:
  1610 ;;		Nothing
  1611 ;; This function is called by:
  1612 ;;		_main
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           	psect	text1
  1617  003512                     __ptext1:
  1618                           	opt stack 0
  1619  003512                     _strcpy:
  1620                           	opt stack 29
  1621                           
  1622                           ;incstack = 0
  1623  003512  C010  F014         	movff	strcpy@to,strcpy@cp
  1624  003516  C011  F015         	movff	strcpy@to+1,strcpy@cp+1
  1625  00351A  D004               	goto	l3890
  1626  00351C                     l3888:
  1627  00351C  4A14               	infsnz	strcpy@cp,f,c
  1628  00351E  2A15               	incf	strcpy@cp+1,f,c
  1629  003520  4A12               	infsnz	strcpy@from,f,c
  1630  003522  2A13               	incf	strcpy@from+1,f,c
  1631  003524                     l3890:
  1632  003524  C012  FFD9         	movff	strcpy@from,fsr2l
  1633  003528  C013  FFDA         	movff	strcpy@from+1,fsr2h
  1634  00352C  C014  FFE1         	movff	strcpy@cp,fsr1l
  1635  003530  C015  FFE2         	movff	strcpy@cp+1,fsr1h
  1636  003534  CFDF FFE7          	movff	indf2,indf1
  1637  003538  50E7               	movf	indf1,w,c
  1638  00353A  B4D8               	btfsc	status,2,c
  1639  00353C  0012               	return	
  1640  00353E  D7EE               	goto	l3888
  1641  003540                     __end_of_strcpy:
  1642                           	opt stack 0
  1643                           tblptru	equ	0xFF8
  1644                           intcon	equ	0xFF2
  1645                           postinc0	equ	0xFEE
  1646                           wreg	equ	0xFE8
  1647                           indf1	equ	0xFE7
  1648                           fsr1h	equ	0xFE2
  1649                           fsr1l	equ	0xFE1
  1650                           indf2	equ	0xFDF
  1651                           fsr2h	equ	0xFDA
  1652                           fsr2l	equ	0xFD9
  1653                           status	equ	0xFD8
  1654                           
  1655 ;; *************** function _strcat *****************
  1656 ;; Defined at:
  1657 ;;		line 8 in file "D:\mplab\sources\common\strcat.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;  to              2   15[COMRAM] PTR unsigned char 
  1660 ;;		 -> stringBT(50), 
  1661 ;;  from            2   17[COMRAM] PTR const unsigned char 
  1662 ;;		 -> STR_10(2), STR_7(2), STR_4(2), main@GPS_Buffer(15), 
  1663 ;;		 -> Temperature(10), 
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;  cp              2   19[COMRAM] PTR unsigned char 
  1666 ;;		 -> stringBT(50), 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  2   15[COMRAM] PTR unsigned char 
  1669 ;; Registers used:
  1670 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1676 ;;      Params:         4       0       0       0       0       0       0       0       0
  1677 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1678 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1679 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1680 ;;Total ram usage:        6 bytes
  1681 ;; Hardware stack levels used:    1
  1682 ;; Hardware stack levels required when called:    1
  1683 ;; This function calls:
  1684 ;;		Nothing
  1685 ;; This function is called by:
  1686 ;;		_main
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text2
  1691  0032E6                     __ptext2:
  1692                           	opt stack 0
  1693  0032E6                     _strcat:
  1694                           	opt stack 29
  1695                           
  1696                           ;incstack = 0
  1697  0032E6  C010  F014         	movff	strcat@to,strcat@cp
  1698  0032EA  C011  F015         	movff	strcat@to+1,strcat@cp+1
  1699  0032EE  D002               	goto	l3896
  1700  0032F0                     l3894:
  1701  0032F0  4A14               	infsnz	strcat@cp,f,c
  1702  0032F2  2A15               	incf	strcat@cp+1,f,c
  1703  0032F4                     l3896:
  1704  0032F4  C014  FFD9         	movff	strcat@cp,fsr2l
  1705  0032F8  C015  FFDA         	movff	strcat@cp+1,fsr2h
  1706  0032FC  50DF               	movf	indf2,w,c
  1707  0032FE  B4D8               	btfsc	status,2,c
  1708  003300  D005               	goto	l3900
  1709  003302  D7F6               	goto	l3894
  1710  003304                     l3898:
  1711  003304  4A14               	infsnz	strcat@cp,f,c
  1712  003306  2A15               	incf	strcat@cp+1,f,c
  1713  003308  4A12               	infsnz	strcat@from,f,c
  1714  00330A  2A13               	incf	strcat@from+1,f,c
  1715  00330C                     l3900:
  1716  00330C  C012  FFF6         	movff	strcat@from,tblptrl
  1717  003310  C013  FFF7         	movff	strcat@from+1,tblptrh
  1718  003314  6AF8               	clrf	tblptru,c
  1719  003316  C014  FFD9         	movff	strcat@cp,fsr2l
  1720  00331A  C015  FFDA         	movff	strcat@cp+1,fsr2h
  1721  00331E  0E07               	movlw	(high __ramtop+-1)
  1722  003320  64F7               	cpfsgt	tblptrh,c
  1723  003322  D003               	bra	u4337
  1724  003324  0008               	tblrd		*
  1725  003326  50F5               	movf	tablat,w,c
  1726  003328  D005               	bra	u4330
  1727  00332A                     u4337:
  1728  00332A  CFF6 FFE1          	movff	tblptrl,fsr1l
  1729  00332E  CFF7 FFE2          	movff	tblptrh,fsr1h
  1730  003332  50E7               	movf	indf1,w,c
  1731  003334                     u4330:
  1732  003334  6EDF               	movwf	indf2,c
  1733  003336  50DF               	movf	indf2,w,c
  1734  003338  B4D8               	btfsc	status,2,c
  1735  00333A  0012               	return	
  1736  00333C  D7E3               	goto	l3898
  1737  00333E                     __end_of_strcat:
  1738                           	opt stack 0
  1739                           tblptru	equ	0xFF8
  1740                           tblptrh	equ	0xFF7
  1741                           tblptrl	equ	0xFF6
  1742                           tablat	equ	0xFF5
  1743                           intcon	equ	0xFF2
  1744                           postinc0	equ	0xFEE
  1745                           wreg	equ	0xFE8
  1746                           indf1	equ	0xFE7
  1747                           fsr1h	equ	0xFE2
  1748                           fsr1l	equ	0xFE1
  1749                           indf2	equ	0xFDF
  1750                           fsr2h	equ	0xFDA
  1751                           fsr2l	equ	0xFD9
  1752                           status	equ	0xFD8
  1753                           
  1754 ;; *************** function _memset *****************
  1755 ;; Defined at:
  1756 ;;		line 8 in file "D:\mplab\sources\common\memset.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  p1              2   15[COMRAM] PTR void 
  1759 ;;		 -> main@GPS_Buffer(15), 
  1760 ;;  c               2   17[COMRAM] int 
  1761 ;;  n               2   19[COMRAM] unsigned int 
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;  p               2   21[COMRAM] PTR unsigned char 
  1764 ;;		 -> main@GPS_Buffer(15), 
  1765 ;; Return value:  Size  Location     Type
  1766 ;;                  2   15[COMRAM] PTR void 
  1767 ;; Registers used:
  1768 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1774 ;;      Params:         6       0       0       0       0       0       0       0       0
  1775 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1776 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1777 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1778 ;;Total ram usage:        8 bytes
  1779 ;; Hardware stack levels used:    1
  1780 ;; Hardware stack levels required when called:    1
  1781 ;; This function calls:
  1782 ;;		Nothing
  1783 ;; This function is called by:
  1784 ;;		_main
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788                           	psect	text3
  1789  003540                     __ptext3:
  1790                           	opt stack 0
  1791  003540                     _memset:
  1792                           	opt stack 29
  1793                           
  1794                           ;incstack = 0
  1795  003540  C010  F016         	movff	memset@p1,memset@p
  1796  003544  C011  F017         	movff	memset@p1+1,memset@p+1
  1797  003548  D008               	goto	l3848
  1798  00354A                     l3844:
  1799  00354A  C016  FFD9         	movff	memset@p,fsr2l
  1800  00354E  C017  FFDA         	movff	memset@p+1,fsr2h
  1801  003552  C012  FFDF         	movff	memset@c,indf2
  1802  003556  4A16               	infsnz	memset@p,f,c
  1803  003558  2A17               	incf	memset@p+1,f,c
  1804  00355A                     l3848:
  1805  00355A  0614               	decf	memset@n,f,c
  1806  00355C  A0D8               	btfss	status,0,c
  1807  00355E  0615               	decf	memset@n+1,f,c
  1808  003560  2814               	incf	memset@n,w,c
  1809  003562  E1F3               	bnz	l3844
  1810  003564  2815               	incf	memset@n+1,w,c
  1811  003566  B4D8               	btfsc	status,2,c
  1812  003568  0012               	return	
  1813  00356A  D7EF               	goto	l3844
  1814  00356C                     __end_of_memset:
  1815                           	opt stack 0
  1816                           tblptru	equ	0xFF8
  1817                           tblptrh	equ	0xFF7
  1818                           tblptrl	equ	0xFF6
  1819                           tablat	equ	0xFF5
  1820                           intcon	equ	0xFF2
  1821                           postinc0	equ	0xFEE
  1822                           wreg	equ	0xFE8
  1823                           indf1	equ	0xFE7
  1824                           fsr1h	equ	0xFE2
  1825                           fsr1l	equ	0xFE1
  1826                           indf2	equ	0xFDF
  1827                           fsr2h	equ	0xFDA
  1828                           fsr2l	equ	0xFD9
  1829                           status	equ	0xFD8
  1830                           
  1831 ;; *************** function _get_longitude *****************
  1832 ;; Defined at:
  1833 ;;		line 196 in file "GPS.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;  long_pointer    1    wreg     unsigned char 
  1836 ;; Auto vars:     Size  Location     Type
  1837 ;;  long_pointer    1   21[BANK0 ] unsigned char 
  1838 ;;  Long_Buffer    15    3[BANK0 ] unsigned char [15]
  1839 ;;  _longitude      3   18[BANK0 ] float 
  1840 ;;  long_index      1   23[BANK0 ] unsigned char 
  1841 ;;  index           1   22[BANK0 ] unsigned char 
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  3    0[BANK0 ] float 
  1844 ;; Registers used:
  1845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1851 ;;      Params:         0       3       0       0       0       0       0       0       0
  1852 ;;      Locals:         0      21       0       0       0       0       0       0       0
  1853 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1854 ;;      Totals:         1      24       0       0       0       0       0       0       0
  1855 ;;Total ram usage:       25 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; Hardware stack levels required when called:    5
  1858 ;; This function calls:
  1859 ;;		_atof
  1860 ;; This function is called by:
  1861 ;;		_main
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	text4
  1866  002C24                     __ptext4:
  1867                           	opt stack 0
  1868  002C24                     _get_longitude:
  1869                           	opt stack 25
  1870                           
  1871                           ;incstack = 0
  1872                           ;get_longitude@long_pointer stored from wreg
  1873  002C24  0100               	movlb	0	; () banked
  1874  002C26  6F75               	movwf	get_longitude@long_pointer& (0+255),b
  1875                           
  1876                           ;GPS.c: 197: unsigned char long_index;
  1877                           ;GPS.c: 198: unsigned char index = long_pointer+1;
  1878  002C28  0100               	movlb	0	; () banked
  1879  002C2A  2975               	incf	get_longitude@long_pointer& (0+255),w,b
  1880  002C2C  0100               	movlb	0	; () banked
  1881  002C2E  6F76               	movwf	get_longitude@index& (0+255),b
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;GPS.c: 199: char Long_Buffer[15];
  1885                           ;GPS.c: 200: float _longitude;
  1886                           ;GPS.c: 201: long_index=0;
  1887  002C30  0E00               	movlw	0
  1888  002C32  0100               	movlb	0	; () banked
  1889  002C34  6F77               	movwf	get_longitude@long_index& (0+255),b
  1890                           
  1891                           ;GPS.c: 204: for( ; GGA_Buffer[index]!=','; index++){
  1892  002C36  D018               	goto	l4936
  1893  002C38                     l4930:
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;GPS.c: 205: Long_Buffer[long_index]= GGA_Buffer[index];
  1897  002C38  0100               	movlb	0	; () banked
  1898  002C3A  5176               	movf	get_longitude@index& (0+255),w,b
  1899  002C3C  0D01               	mullw	1
  1900  002C3E  0E00               	movlw	low _GGA_Buffer
  1901  002C40  24F3               	addwf	prodl,w,c
  1902  002C42  6ED9               	movwf	fsr2l,c
  1903  002C44  0E01               	movlw	high _GGA_Buffer
  1904  002C46  20F4               	addwfc	prodh,w,c
  1905  002C48  6EDA               	movwf	fsr2h,c
  1906  002C4A  0100               	movlb	0	; () banked
  1907  002C4C  5177               	movf	get_longitude@long_index& (0+255),w,b
  1908  002C4E  0D01               	mullw	1
  1909  002C50  0E63               	movlw	low get_longitude@Long_Buffer
  1910  002C52  24F3               	addwf	prodl,w,c
  1911  002C54  6EE1               	movwf	fsr1l,c
  1912  002C56  0E00               	movlw	high get_longitude@Long_Buffer
  1913  002C58  20F4               	addwfc	prodh,w,c
  1914  002C5A  6EE2               	movwf	fsr1h,c
  1915  002C5C  CFDF FFE7          	movff	indf2,indf1
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;GPS.c: 206: long_index++;
  1919  002C60  0100               	movlb	0	; () banked
  1920  002C62  2B77               	incf	get_longitude@long_index& (0+255),f,b
  1921                           
  1922                           ; BSR set to: 0
  1923  002C64  0100               	movlb	0	; () banked
  1924  002C66  2B76               	incf	get_longitude@index& (0+255),f,b
  1925  002C68                     l4936:
  1926                           
  1927                           ; BSR set to: 0
  1928  002C68  0100               	movlb	0	; () banked
  1929  002C6A  5176               	movf	get_longitude@index& (0+255),w,b
  1930  002C6C  0D01               	mullw	1
  1931  002C6E  0E00               	movlw	low _GGA_Buffer
  1932  002C70  24F3               	addwf	prodl,w,c
  1933  002C72  6ED9               	movwf	fsr2l,c
  1934  002C74  0E01               	movlw	high _GGA_Buffer
  1935  002C76  20F4               	addwfc	prodh,w,c
  1936  002C78  6EDA               	movwf	fsr2h,c
  1937  002C7A  0E2C               	movlw	44
  1938  002C7C  18DE               	xorwf	postinc2,w,c
  1939  002C7E  A4D8               	btfss	status,2,c
  1940  002C80  D7DB               	goto	l4930
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;GPS.c: 207: }
  1944                           ;GPS.c: 208: long_index++;
  1945                           
  1946                           ; BSR set to: 0
  1947  002C82  0100               	movlb	0	; () banked
  1948  002C84  2B77               	incf	get_longitude@long_index& (0+255),f,b
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;GPS.c: 209: E_W = GGA_Buffer[long_index];
  1952  002C86  0100               	movlb	0	; () banked
  1953  002C88  5177               	movf	get_longitude@long_index& (0+255),w,b
  1954  002C8A  0D01               	mullw	1
  1955  002C8C  0E00               	movlw	low _GGA_Buffer
  1956  002C8E  24F3               	addwf	prodl,w,c
  1957  002C90  6ED9               	movwf	fsr2l,c
  1958  002C92  0E01               	movlw	high _GGA_Buffer
  1959  002C94  20F4               	addwfc	prodh,w,c
  1960  002C96  6EDA               	movwf	fsr2h,c
  1961  002C98  50DF               	movf	indf2,w,c
  1962  002C9A  6E4D               	movwf	_E_W,c
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;GPS.c: 210: _longitude = atof(Long_Buffer);
  1966  002C9C  0E63               	movlw	low get_longitude@Long_Buffer
  1967  002C9E  6E42               	movwf	atof@s,c
  1968  002CA0  0E00               	movlw	high get_longitude@Long_Buffer
  1969  002CA2  6E43               	movwf	atof@s+1,c
  1970  002CA4  EC00  F01B         	call	_atof	;wreg free
  1971  002CA8  C042  F072         	movff	?_atof,get_longitude@_longitude
  1972  002CAC  C043  F073         	movff	?_atof+1,get_longitude@_longitude+1
  1973  002CB0  C044  F074         	movff	?_atof+2,get_longitude@_longitude+2
  1974                           
  1975                           ;GPS.c: 211: return _longitude;
  1976  002CB4  C072  F060         	movff	get_longitude@_longitude,?_get_longitude
  1977  002CB8  C073  F061         	movff	get_longitude@_longitude+1,?_get_longitude+1
  1978  002CBC  C074  F062         	movff	get_longitude@_longitude+2,?_get_longitude+2
  1979  002CC0  0012               	return	
  1980  002CC2                     __end_of_get_longitude:
  1981                           	opt stack 0
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           prodh	equ	0xFF4
  1987                           prodl	equ	0xFF3
  1988                           intcon	equ	0xFF2
  1989                           postinc0	equ	0xFEE
  1990                           wreg	equ	0xFE8
  1991                           indf1	equ	0xFE7
  1992                           fsr1h	equ	0xFE2
  1993                           fsr1l	equ	0xFE1
  1994                           indf2	equ	0xFDF
  1995                           postinc2	equ	0xFDE
  1996                           fsr2h	equ	0xFDA
  1997                           fsr2l	equ	0xFD9
  1998                           status	equ	0xFD8
  1999                           
  2000 ;; *************** function _get_latitude *****************
  2001 ;; Defined at:
  2002 ;;		line 179 in file "GPS.c"
  2003 ;; Parameters:    Size  Location     Type
  2004 ;;  lat_pointer     1    wreg     unsigned char 
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;  lat_pointer     1   21[BANK0 ] unsigned char 
  2007 ;;  Lat_Buffer     15    3[BANK0 ] unsigned char [15]
  2008 ;;  _latitude       3   18[BANK0 ] float 
  2009 ;;  lat_index       1   23[BANK0 ] unsigned char 
  2010 ;;  index           1   22[BANK0 ] unsigned char 
  2011 ;; Return value:  Size  Location     Type
  2012 ;;                  3    0[BANK0 ] float 
  2013 ;; Registers used:
  2014 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2015 ;; Tracked objects:
  2016 ;;		On entry : 0/0
  2017 ;;		On exit  : 0/0
  2018 ;;		Unchanged: 0/0
  2019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2020 ;;      Params:         0       3       0       0       0       0       0       0       0
  2021 ;;      Locals:         0      21       0       0       0       0       0       0       0
  2022 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2023 ;;      Totals:         1      24       0       0       0       0       0       0       0
  2024 ;;Total ram usage:       25 bytes
  2025 ;; Hardware stack levels used:    1
  2026 ;; Hardware stack levels required when called:    5
  2027 ;; This function calls:
  2028 ;;		_atof
  2029 ;; This function is called by:
  2030 ;;		_main
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034                           	psect	text5
  2035  002CC2                     __ptext5:
  2036                           	opt stack 0
  2037  002CC2                     _get_latitude:
  2038                           	opt stack 25
  2039                           
  2040                           ;incstack = 0
  2041                           ;get_latitude@lat_pointer stored from wreg
  2042  002CC2  0100               	movlb	0	; () banked
  2043  002CC4  6F75               	movwf	get_latitude@lat_pointer& (0+255),b
  2044                           
  2045                           ;GPS.c: 180: unsigned char lat_index = lat_pointer+1;
  2046  002CC6  0100               	movlb	0	; () banked
  2047  002CC8  2975               	incf	get_latitude@lat_pointer& (0+255),w,b
  2048  002CCA  0100               	movlb	0	; () banked
  2049  002CCC  6F77               	movwf	get_latitude@lat_index& (0+255),b
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;GPS.c: 181: unsigned char index = 0;
  2053  002CCE  0E00               	movlw	0
  2054  002CD0  0100               	movlb	0	; () banked
  2055  002CD2  6F76               	movwf	get_latitude@index& (0+255),b
  2056                           
  2057                           ;GPS.c: 182: char Lat_Buffer[15];
  2058                           ;GPS.c: 183: float _latitude;
  2059                           ;GPS.c: 186: for(;GGA_Buffer[lat_index]!=',';lat_index++){
  2060  002CD4  D018               	goto	l4902
  2061  002CD6                     l4896:
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;GPS.c: 187: Lat_Buffer[index]= GGA_Buffer[lat_index];
  2065  002CD6  0100               	movlb	0	; () banked
  2066  002CD8  5177               	movf	get_latitude@lat_index& (0+255),w,b
  2067  002CDA  0D01               	mullw	1
  2068  002CDC  0E00               	movlw	low _GGA_Buffer
  2069  002CDE  24F3               	addwf	prodl,w,c
  2070  002CE0  6ED9               	movwf	fsr2l,c
  2071  002CE2  0E01               	movlw	high _GGA_Buffer
  2072  002CE4  20F4               	addwfc	prodh,w,c
  2073  002CE6  6EDA               	movwf	fsr2h,c
  2074  002CE8  0100               	movlb	0	; () banked
  2075  002CEA  5176               	movf	get_latitude@index& (0+255),w,b
  2076  002CEC  0D01               	mullw	1
  2077  002CEE  0E63               	movlw	low get_latitude@Lat_Buffer
  2078  002CF0  24F3               	addwf	prodl,w,c
  2079  002CF2  6EE1               	movwf	fsr1l,c
  2080  002CF4  0E00               	movlw	high get_latitude@Lat_Buffer
  2081  002CF6  20F4               	addwfc	prodh,w,c
  2082  002CF8  6EE2               	movwf	fsr1h,c
  2083  002CFA  CFDF FFE7          	movff	indf2,indf1
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;GPS.c: 188: index++;
  2087  002CFE  0100               	movlb	0	; () banked
  2088  002D00  2B76               	incf	get_latitude@index& (0+255),f,b
  2089                           
  2090                           ; BSR set to: 0
  2091  002D02  0100               	movlb	0	; () banked
  2092  002D04  2B77               	incf	get_latitude@lat_index& (0+255),f,b
  2093  002D06                     l4902:
  2094                           
  2095                           ; BSR set to: 0
  2096  002D06  0100               	movlb	0	; () banked
  2097  002D08  5177               	movf	get_latitude@lat_index& (0+255),w,b
  2098  002D0A  0D01               	mullw	1
  2099  002D0C  0E00               	movlw	low _GGA_Buffer
  2100  002D0E  24F3               	addwf	prodl,w,c
  2101  002D10  6ED9               	movwf	fsr2l,c
  2102  002D12  0E01               	movlw	high _GGA_Buffer
  2103  002D14  20F4               	addwfc	prodh,w,c
  2104  002D16  6EDA               	movwf	fsr2h,c
  2105  002D18  0E2C               	movlw	44
  2106  002D1A  18DE               	xorwf	postinc2,w,c
  2107  002D1C  A4D8               	btfss	status,2,c
  2108  002D1E  D7DB               	goto	l4896
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;GPS.c: 189: }
  2112                           ;GPS.c: 190: lat_index++;
  2113                           
  2114                           ; BSR set to: 0
  2115  002D20  0100               	movlb	0	; () banked
  2116  002D22  2B77               	incf	get_latitude@lat_index& (0+255),f,b
  2117                           
  2118                           ; BSR set to: 0
  2119                           ;GPS.c: 191: N_S = GGA_Buffer[lat_index];
  2120  002D24  0100               	movlb	0	; () banked
  2121  002D26  5177               	movf	get_latitude@lat_index& (0+255),w,b
  2122  002D28  0D01               	mullw	1
  2123  002D2A  0E00               	movlw	low _GGA_Buffer
  2124  002D2C  24F3               	addwf	prodl,w,c
  2125  002D2E  6ED9               	movwf	fsr2l,c
  2126  002D30  0E01               	movlw	high _GGA_Buffer
  2127  002D32  20F4               	addwfc	prodh,w,c
  2128  002D34  6EDA               	movwf	fsr2h,c
  2129  002D36  50DF               	movf	indf2,w,c
  2130  002D38  6E4E               	movwf	_N_S,c
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;GPS.c: 192: _latitude = atof(Lat_Buffer);
  2134  002D3A  0E63               	movlw	low get_latitude@Lat_Buffer
  2135  002D3C  6E42               	movwf	atof@s,c
  2136  002D3E  0E00               	movlw	high get_latitude@Lat_Buffer
  2137  002D40  6E43               	movwf	atof@s+1,c
  2138  002D42  EC00  F01B         	call	_atof	;wreg free
  2139  002D46  C042  F072         	movff	?_atof,get_latitude@_latitude
  2140  002D4A  C043  F073         	movff	?_atof+1,get_latitude@_latitude+1
  2141  002D4E  C044  F074         	movff	?_atof+2,get_latitude@_latitude+2
  2142                           
  2143                           ;GPS.c: 193: return _latitude;
  2144  002D52  C072  F060         	movff	get_latitude@_latitude,?_get_latitude
  2145  002D56  C073  F061         	movff	get_latitude@_latitude+1,?_get_latitude+1
  2146  002D5A  C074  F062         	movff	get_latitude@_latitude+2,?_get_latitude+2
  2147  002D5E  0012               	return	
  2148  002D60                     __end_of_get_latitude:
  2149                           	opt stack 0
  2150                           tblptru	equ	0xFF8
  2151                           tblptrh	equ	0xFF7
  2152                           tblptrl	equ	0xFF6
  2153                           tablat	equ	0xFF5
  2154                           prodh	equ	0xFF4
  2155                           prodl	equ	0xFF3
  2156                           intcon	equ	0xFF2
  2157                           postinc0	equ	0xFEE
  2158                           wreg	equ	0xFE8
  2159                           indf1	equ	0xFE7
  2160                           fsr1h	equ	0xFE2
  2161                           fsr1l	equ	0xFE1
  2162                           indf2	equ	0xFDF
  2163                           postinc2	equ	0xFDE
  2164                           fsr2h	equ	0xFDA
  2165                           fsr2l	equ	0xFD9
  2166                           status	equ	0xFD8
  2167                           
  2168 ;; *************** function _get_gpstime *****************
  2169 ;; Defined at:
  2170 ;;		line 164 in file "GPS.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;		None
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;  Time_Buffer    15   46[COMRAM] unsigned char [15]
  2175 ;;  _Time           4   61[COMRAM] unsigned long 
  2176 ;;  index           1   65[COMRAM] unsigned char 
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  4   41[COMRAM] unsigned long 
  2179 ;; Registers used:
  2180 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2186 ;;      Params:         4       0       0       0       0       0       0       0       0
  2187 ;;      Locals:        20       0       0       0       0       0       0       0       0
  2188 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2189 ;;      Totals:        25       0       0       0       0       0       0       0       0
  2190 ;;Total ram usage:       25 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    3
  2193 ;; This function calls:
  2194 ;;		_atol
  2195 ;; This function is called by:
  2196 ;;		_main
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text6
  2201  0030E6                     __ptext6:
  2202                           	opt stack 0
  2203  0030E6                     _get_gpstime:
  2204                           	opt stack 27
  2205                           
  2206                           ;GPS.c: 165: unsigned char index;
  2207                           ;GPS.c: 166: unsigned char Time_Buffer[15];
  2208                           ;GPS.c: 167: unsigned long int _Time;
  2209                           ;GPS.c: 170: for(index = 0;GGA_Buffer[index]!=','; index++){
  2210                           
  2211                           ;incstack = 0
  2212  0030E6  0E00               	movlw	0
  2213  0030E8  6E42               	movwf	get_gpstime@index,c
  2214  0030EA  D013               	goto	l3874
  2215  0030EC                     l3870:
  2216                           
  2217                           ;GPS.c: 171: Time_Buffer[index] = GGA_Buffer[index];
  2218  0030EC  5042               	movf	get_gpstime@index,w,c
  2219  0030EE  0D01               	mullw	1
  2220  0030F0  0E00               	movlw	low _GGA_Buffer
  2221  0030F2  24F3               	addwf	prodl,w,c
  2222  0030F4  6ED9               	movwf	fsr2l,c
  2223  0030F6  0E01               	movlw	high _GGA_Buffer
  2224  0030F8  20F4               	addwfc	prodh,w,c
  2225  0030FA  6EDA               	movwf	fsr2h,c
  2226  0030FC  5042               	movf	get_gpstime@index,w,c
  2227  0030FE  0D01               	mullw	1
  2228  003100  0E2F               	movlw	low get_gpstime@Time_Buffer
  2229  003102  24F3               	addwf	prodl,w,c
  2230  003104  6EE1               	movwf	fsr1l,c
  2231  003106  0E00               	movlw	high get_gpstime@Time_Buffer
  2232  003108  20F4               	addwfc	prodh,w,c
  2233  00310A  6EE2               	movwf	fsr1h,c
  2234  00310C  CFDF FFE7          	movff	indf2,indf1
  2235  003110  2A42               	incf	get_gpstime@index,f,c
  2236  003112                     l3874:
  2237  003112  5042               	movf	get_gpstime@index,w,c
  2238  003114  0D01               	mullw	1
  2239  003116  0E00               	movlw	low _GGA_Buffer
  2240  003118  24F3               	addwf	prodl,w,c
  2241  00311A  6ED9               	movwf	fsr2l,c
  2242  00311C  0E01               	movlw	high _GGA_Buffer
  2243  00311E  20F4               	addwfc	prodh,w,c
  2244  003120  6EDA               	movwf	fsr2h,c
  2245  003122  0E2C               	movlw	44
  2246  003124  18DE               	xorwf	postinc2,w,c
  2247  003126  A4D8               	btfss	status,2,c
  2248  003128  D7E1               	goto	l3870
  2249                           
  2250                           ;GPS.c: 172: }
  2251                           ;GPS.c: 173: _Time= atol(Time_Buffer);
  2252  00312A  0E2F               	movlw	low get_gpstime@Time_Buffer
  2253  00312C  6E1C               	movwf	atol@s,c
  2254  00312E  0E00               	movlw	high get_gpstime@Time_Buffer
  2255  003130  6E1D               	movwf	atol@s+1,c
  2256  003132  EC52  F014         	call	_atol	;wreg free
  2257  003136  C01C  F03E         	movff	?_atol,get_gpstime@_Time
  2258  00313A  C01D  F03F         	movff	?_atol+1,get_gpstime@_Time+1
  2259  00313E  C01E  F040         	movff	?_atol+2,get_gpstime@_Time+2
  2260  003142  C01F  F041         	movff	?_atol+3,get_gpstime@_Time+3
  2261                           
  2262                           ;GPS.c: 174: return _Time;
  2263  003146  C03E  F02A         	movff	get_gpstime@_Time,?_get_gpstime
  2264  00314A  C03F  F02B         	movff	get_gpstime@_Time+1,?_get_gpstime+1
  2265  00314E  C040  F02C         	movff	get_gpstime@_Time+2,?_get_gpstime+2
  2266  003152  C041  F02D         	movff	get_gpstime@_Time+3,?_get_gpstime+3
  2267  003156  0012               	return	
  2268  003158                     __end_of_get_gpstime:
  2269                           	opt stack 0
  2270                           tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           prodh	equ	0xFF4
  2275                           prodl	equ	0xFF3
  2276                           intcon	equ	0xFF2
  2277                           postinc0	equ	0xFEE
  2278                           wreg	equ	0xFE8
  2279                           indf1	equ	0xFE7
  2280                           fsr1h	equ	0xFE2
  2281                           fsr1l	equ	0xFE1
  2282                           indf2	equ	0xFDF
  2283                           postinc2	equ	0xFDE
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _atol *****************
  2289 ;; Defined at:
  2290 ;;		line 5 in file "D:\mplab\sources\common\atol.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  s               2   27[COMRAM] PTR const unsigned char 
  2293 ;;		 -> get_gpstime@Time_Buffer(15), 
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  a               4   36[COMRAM] long 
  2296 ;;  c               1   40[COMRAM] unsigned char 
  2297 ;;  sign            1   35[COMRAM] unsigned char 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;                  4   27[COMRAM] long 
  2300 ;; Registers used:
  2301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2307 ;;      Params:         4       0       0       0       0       0       0       0       0
  2308 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2309 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2310 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2311 ;;Total ram usage:       14 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; Hardware stack levels required when called:    2
  2314 ;; This function calls:
  2315 ;;		___lmul
  2316 ;;		_isdigit
  2317 ;; This function is called by:
  2318 ;;		_get_gpstime
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321                           
  2322                           	psect	text7
  2323  0028A4                     __ptext7:
  2324                           	opt stack 0
  2325  0028A4                     _atol:
  2326                           	opt stack 27
  2327  0028A4  C01C  FFD9         	movff	atol@s,fsr2l
  2328  0028A8  C01D  FFDA         	movff	atol@s+1,fsr2h
  2329  0028AC  50DF               	movf	indf2,w,c
  2330  0028AE  6E29               	movwf	atol@c,c
  2331  0028B0  4A1C               	infsnz	atol@s,f,c
  2332  0028B2  2A1D               	incf	atol@s+1,f,c
  2333  0028B4  0E20               	movlw	32
  2334  0028B6  1829               	xorwf	atol@c,w,c
  2335  0028B8  B4D8               	btfsc	status,2,c
  2336  0028BA  D7F4               	goto	l3734
  2337  0028BC  0E09               	movlw	9
  2338  0028BE  1829               	xorwf	atol@c,w,c
  2339  0028C0  B4D8               	btfsc	status,2,c
  2340  0028C2  D7F0               	goto	l3734
  2341  0028C4  0E00               	movlw	0
  2342  0028C6  6E25               	movwf	atol@a,c
  2343  0028C8  0E00               	movlw	0
  2344  0028CA  6E26               	movwf	atol@a+1,c
  2345  0028CC  0E00               	movlw	0
  2346  0028CE  6E27               	movwf	atol@a+2,c
  2347  0028D0  0E00               	movlw	0
  2348  0028D2  6E28               	movwf	atol@a+3,c
  2349  0028D4  0E00               	movlw	0
  2350  0028D6  6E24               	movwf	atol@sign,c
  2351  0028D8  0E2D               	movlw	45
  2352  0028DA  1829               	xorwf	atol@c,w,c
  2353  0028DC  A4D8               	btfss	status,2,c
  2354  0028DE  D005               	goto	l3752
  2355  0028E0  2A24               	incf	atol@sign,f,c
  2356  0028E2  D02A               	goto	l3760
  2357  0028E4                     l3750:
  2358  0028E4  4A1C               	infsnz	atol@s,f,c
  2359  0028E6  2A1D               	incf	atol@s+1,f,c
  2360  0028E8  D02E               	goto	l3764
  2361  0028EA                     l3752:
  2362  0028EA  0E2B               	movlw	43
  2363  0028EC  1829               	xorwf	atol@c,w,c
  2364  0028EE  A4D8               	btfss	status,2,c
  2365  0028F0  D02A               	goto	l3764
  2366  0028F2  D022               	goto	l3760
  2367  0028F4                     l3758:
  2368  0028F4  C025  F010         	movff	atol@a,___lmul@multiplier
  2369  0028F8  C026  F011         	movff	atol@a+1,___lmul@multiplier+1
  2370  0028FC  C027  F012         	movff	atol@a+2,___lmul@multiplier+2
  2371  002900  C028  F013         	movff	atol@a+3,___lmul@multiplier+3
  2372  002904  0E0A               	movlw	10
  2373  002906  6E14               	movwf	___lmul@multiplicand,c
  2374  002908  0E00               	movlw	0
  2375  00290A  6E15               	movwf	___lmul@multiplicand+1,c
  2376  00290C  0E00               	movlw	0
  2377  00290E  6E16               	movwf	___lmul@multiplicand+2,c
  2378  002910  0E00               	movlw	0
  2379  002912  6E17               	movwf	___lmul@multiplicand+3,c
  2380  002914  EC9F  F019         	call	___lmul	;wreg free
  2381  002918  C029  F020         	movff	atol@c,??_atol
  2382  00291C  0ED0               	movlw	208
  2383  00291E  2620               	addwf	??_atol,f,c
  2384  002920  5020               	movf	??_atol,w,c
  2385  002922  2410               	addwf	?___lmul,w,c
  2386  002924  6E25               	movwf	atol@a,c
  2387  002926  0E00               	movlw	0
  2388  002928  2011               	addwfc	?___lmul+1,w,c
  2389  00292A  6E26               	movwf	atol@a+1,c
  2390  00292C  0E00               	movlw	0
  2391  00292E  2012               	addwfc	?___lmul+2,w,c
  2392  002930  6E27               	movwf	atol@a+2,c
  2393  002932  0E00               	movlw	0
  2394  002934  2013               	addwfc	?___lmul+3,w,c
  2395  002936  6E28               	movwf	atol@a+3,c
  2396  002938                     l3760:
  2397  002938  C01C  FFD9         	movff	atol@s,fsr2l
  2398  00293C  C01D  FFDA         	movff	atol@s+1,fsr2h
  2399  002940  50DF               	movf	indf2,w,c
  2400  002942  6E29               	movwf	atol@c,c
  2401  002944  D7CF               	goto	l3750
  2402  002946                     l3764:
  2403  002946  5029               	movf	atol@c,w,c
  2404  002948  EC11  F01B         	call	_isdigit
  2405  00294C  B0D8               	btfsc	status,0,c
  2406  00294E  D7D2               	goto	l3758
  2407  002950  5024               	movf	atol@sign,w,c
  2408  002952  B4D8               	btfsc	status,2,c
  2409  002954  D01A               	goto	l597
  2410  002956  C025  F020         	movff	atol@a,??_atol
  2411  00295A  C026  F021         	movff	atol@a+1,??_atol+1
  2412  00295E  C027  F022         	movff	atol@a+2,??_atol+2
  2413  002962  C028  F023         	movff	atol@a+3,??_atol+3
  2414  002966  1E20               	comf	??_atol,f,c
  2415  002968  1E21               	comf	??_atol+1,f,c
  2416  00296A  1E22               	comf	??_atol+2,f,c
  2417  00296C  1E23               	comf	??_atol+3,f,c
  2418  00296E  2A20               	incf	??_atol,f,c
  2419  002970  0E00               	movlw	0
  2420  002972  2221               	addwfc	??_atol+1,f,c
  2421  002974  2222               	addwfc	??_atol+2,f,c
  2422  002976  2223               	addwfc	??_atol+3,f,c
  2423  002978  C020  F01C         	movff	??_atol,?_atol
  2424  00297C  C021  F01D         	movff	??_atol+1,?_atol+1
  2425  002980  C022  F01E         	movff	??_atol+2,?_atol+2
  2426  002984  C023  F01F         	movff	??_atol+3,?_atol+3
  2427  002988  0012               	return	
  2428  00298A                     l597:
  2429  00298A  C025  F01C         	movff	atol@a,?_atol
  2430  00298E  C026  F01D         	movff	atol@a+1,?_atol+1
  2431  002992  C027  F01E         	movff	atol@a+2,?_atol+2
  2432  002996  C028  F01F         	movff	atol@a+3,?_atol+3
  2433  00299A  0012               	return		;funcret
  2434  00299C                     __end_of_atol:
  2435                           	opt stack 0
  2436                           tblptru	equ	0xFF8
  2437                           tblptrh	equ	0xFF7
  2438                           tblptrl	equ	0xFF6
  2439                           tablat	equ	0xFF5
  2440                           prodh	equ	0xFF4
  2441                           prodl	equ	0xFF3
  2442                           intcon	equ	0xFF2
  2443                           postinc0	equ	0xFEE
  2444                           wreg	equ	0xFE8
  2445                           indf1	equ	0xFE7
  2446                           fsr1h	equ	0xFE2
  2447                           fsr1l	equ	0xFE1
  2448                           indf2	equ	0xFDF
  2449                           postinc2	equ	0xFDE
  2450                           fsr2h	equ	0xFDA
  2451                           fsr2l	equ	0xFD9
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _get_altitude *****************
  2455 ;; Defined at:
  2456 ;;		line 214 in file "GPS.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;  alt_pointer     1    wreg     unsigned char 
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;  alt_pointer     1   18[BANK0 ] unsigned char 
  2461 ;;  Alt_Buffer     12    3[BANK0 ] unsigned char [12]
  2462 ;;  _Altitude       3   15[BANK0 ] float 
  2463 ;;  index           1   20[BANK0 ] unsigned char 
  2464 ;;  alt_index       1   19[BANK0 ] unsigned char 
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  3    0[BANK0 ] float 
  2467 ;; Registers used:
  2468 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2474 ;;      Params:         0       3       0       0       0       0       0       0       0
  2475 ;;      Locals:         0      18       0       0       0       0       0       0       0
  2476 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2477 ;;      Totals:         1      21       0       0       0       0       0       0       0
  2478 ;;Total ram usage:       22 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    5
  2481 ;; This function calls:
  2482 ;;		_atof
  2483 ;; This function is called by:
  2484 ;;		_main
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text8
  2489  002DF0                     __ptext8:
  2490                           	opt stack 0
  2491  002DF0                     _get_altitude:
  2492                           	opt stack 25
  2493                           
  2494                           ;incstack = 0
  2495                           ;get_altitude@alt_pointer stored from wreg
  2496  002DF0  0100               	movlb	0	; () banked
  2497  002DF2  6F72               	movwf	get_altitude@alt_pointer& (0+255),b
  2498                           
  2499                           ;GPS.c: 215: unsigned char alt_index;
  2500                           ;GPS.c: 216: unsigned char index = alt_pointer+1;
  2501  002DF4  0100               	movlb	0	; () banked
  2502  002DF6  2972               	incf	get_altitude@alt_pointer& (0+255),w,b
  2503  002DF8  0100               	movlb	0	; () banked
  2504  002DFA  6F74               	movwf	get_altitude@index& (0+255),b
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;GPS.c: 217: char Alt_Buffer[12];
  2508                           ;GPS.c: 218: float _Altitude;
  2509                           ;GPS.c: 219: alt_index=0;
  2510  002DFC  0E00               	movlw	0
  2511  002DFE  0100               	movlb	0	; () banked
  2512  002E00  6F73               	movwf	get_altitude@alt_index& (0+255),b
  2513                           
  2514                           ;GPS.c: 222: for( ; GGA_Buffer[index]!=','; index++){
  2515  002E02  D018               	goto	l4958
  2516  002E04                     l4952:
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;GPS.c: 223: Alt_Buffer[alt_index]= GGA_Buffer[index];
  2520  002E04  0100               	movlb	0	; () banked
  2521  002E06  5174               	movf	get_altitude@index& (0+255),w,b
  2522  002E08  0D01               	mullw	1
  2523  002E0A  0E00               	movlw	low _GGA_Buffer
  2524  002E0C  24F3               	addwf	prodl,w,c
  2525  002E0E  6ED9               	movwf	fsr2l,c
  2526  002E10  0E01               	movlw	high _GGA_Buffer
  2527  002E12  20F4               	addwfc	prodh,w,c
  2528  002E14  6EDA               	movwf	fsr2h,c
  2529  002E16  0100               	movlb	0	; () banked
  2530  002E18  5173               	movf	get_altitude@alt_index& (0+255),w,b
  2531  002E1A  0D01               	mullw	1
  2532  002E1C  0E63               	movlw	low get_altitude@Alt_Buffer
  2533  002E1E  24F3               	addwf	prodl,w,c
  2534  002E20  6EE1               	movwf	fsr1l,c
  2535  002E22  0E00               	movlw	high get_altitude@Alt_Buffer
  2536  002E24  20F4               	addwfc	prodh,w,c
  2537  002E26  6EE2               	movwf	fsr1h,c
  2538  002E28  CFDF FFE7          	movff	indf2,indf1
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;GPS.c: 224: alt_index++;
  2542  002E2C  0100               	movlb	0	; () banked
  2543  002E2E  2B73               	incf	get_altitude@alt_index& (0+255),f,b
  2544                           
  2545                           ; BSR set to: 0
  2546  002E30  0100               	movlb	0	; () banked
  2547  002E32  2B74               	incf	get_altitude@index& (0+255),f,b
  2548  002E34                     l4958:
  2549                           
  2550                           ; BSR set to: 0
  2551  002E34  0100               	movlb	0	; () banked
  2552  002E36  5174               	movf	get_altitude@index& (0+255),w,b
  2553  002E38  0D01               	mullw	1
  2554  002E3A  0E00               	movlw	low _GGA_Buffer
  2555  002E3C  24F3               	addwf	prodl,w,c
  2556  002E3E  6ED9               	movwf	fsr2l,c
  2557  002E40  0E01               	movlw	high _GGA_Buffer
  2558  002E42  20F4               	addwfc	prodh,w,c
  2559  002E44  6EDA               	movwf	fsr2h,c
  2560  002E46  0E2C               	movlw	44
  2561  002E48  18DE               	xorwf	postinc2,w,c
  2562  002E4A  A4D8               	btfss	status,2,c
  2563  002E4C  D7DB               	goto	l4952
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;GPS.c: 225: }
  2567                           ;GPS.c: 226: _Altitude = atof(Alt_Buffer);
  2568                           
  2569                           ; BSR set to: 0
  2570  002E4E  0E63               	movlw	low get_altitude@Alt_Buffer
  2571  002E50  6E42               	movwf	atof@s,c
  2572  002E52  0E00               	movlw	high get_altitude@Alt_Buffer
  2573  002E54  6E43               	movwf	atof@s+1,c
  2574  002E56  EC00  F01B         	call	_atof	;wreg free
  2575  002E5A  C042  F06F         	movff	?_atof,get_altitude@_Altitude
  2576  002E5E  C043  F070         	movff	?_atof+1,get_altitude@_Altitude+1
  2577  002E62  C044  F071         	movff	?_atof+2,get_altitude@_Altitude+2
  2578                           
  2579                           ;GPS.c: 227: return _Altitude;
  2580  002E66  C06F  F060         	movff	get_altitude@_Altitude,?_get_altitude
  2581  002E6A  C070  F061         	movff	get_altitude@_Altitude+1,?_get_altitude+1
  2582  002E6E  C071  F062         	movff	get_altitude@_Altitude+2,?_get_altitude+2
  2583  002E72  0012               	return	
  2584  002E74                     __end_of_get_altitude:
  2585                           	opt stack 0
  2586                           tblptru	equ	0xFF8
  2587                           tblptrh	equ	0xFF7
  2588                           tblptrl	equ	0xFF6
  2589                           tablat	equ	0xFF5
  2590                           prodh	equ	0xFF4
  2591                           prodl	equ	0xFF3
  2592                           intcon	equ	0xFF2
  2593                           postinc0	equ	0xFEE
  2594                           wreg	equ	0xFE8
  2595                           indf1	equ	0xFE7
  2596                           fsr1h	equ	0xFE2
  2597                           fsr1l	equ	0xFE1
  2598                           indf2	equ	0xFDF
  2599                           postinc2	equ	0xFDE
  2600                           fsr2h	equ	0xFDA
  2601                           fsr2l	equ	0xFD9
  2602                           status	equ	0xFD8
  2603                           
  2604 ;; *************** function _atof *****************
  2605 ;; Defined at:
  2606 ;;		line 200 in file "D:\mplab\sources\common\atof.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;  s               2   65[COMRAM] PTR const unsigned char 
  2609 ;;		 -> get_altitude@Alt_Buffer(12), get_longitude@Long_Buffer(15), get_latitude@Lat_Buffer(15), 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;		None
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  3   65[COMRAM] PTR const unsigned char 
  2614 ;; Registers used:
  2615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2621 ;;      Params:         3       0       0       0       0       0       0       0       0
  2622 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2623 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2624 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2625 ;;Total ram usage:        3 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; Hardware stack levels required when called:    4
  2628 ;; This function calls:
  2629 ;;		_strtod
  2630 ;; This function is called by:
  2631 ;;		_get_latitude
  2632 ;;		_get_longitude
  2633 ;;		_get_altitude
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text9
  2638  003600                     __ptext9:
  2639                           	opt stack 0
  2640  003600                     _atof:
  2641                           	opt stack 25
  2642                           
  2643                           ;incstack = 0
  2644  003600  C042  F036         	movff	atof@s,strtod@s
  2645  003604  C043  F037         	movff	atof@s+1,strtod@s+1
  2646  003608  0E00               	movlw	0
  2647  00360A  6E38               	movwf	strtod@res,c
  2648  00360C  0E00               	movlw	0
  2649  00360E  6E39               	movwf	strtod@res+1,c
  2650  003610  EC3E  F00B         	call	_strtod	;wreg free
  2651  003614  C036  F042         	movff	?_strtod,?_atof
  2652  003618  C037  F043         	movff	?_strtod+1,?_atof+1
  2653  00361C  C038  F044         	movff	?_strtod+2,?_atof+2
  2654  003620  0012               	return	
  2655  003622                     __end_of_atof:
  2656                           	opt stack 0
  2657                           tblptru	equ	0xFF8
  2658                           tblptrh	equ	0xFF7
  2659                           tblptrl	equ	0xFF6
  2660                           tablat	equ	0xFF5
  2661                           prodh	equ	0xFF4
  2662                           prodl	equ	0xFF3
  2663                           intcon	equ	0xFF2
  2664                           postinc0	equ	0xFEE
  2665                           wreg	equ	0xFE8
  2666                           indf1	equ	0xFE7
  2667                           fsr1h	equ	0xFE2
  2668                           fsr1l	equ	0xFE1
  2669                           indf2	equ	0xFDF
  2670                           postinc2	equ	0xFDE
  2671                           fsr2h	equ	0xFDA
  2672                           fsr2l	equ	0xFD9
  2673                           status	equ	0xFD8
  2674                           
  2675 ;; *************** function _strtod *****************
  2676 ;; Defined at:
  2677 ;;		line 35 in file "D:\mplab\sources\common\atof.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;  s               2   53[COMRAM] PTR const unsigned char 
  2680 ;;		 -> get_altitude@Alt_Buffer(12), get_longitude@Long_Buffer(15), get_latitude@Lat_Buffer(15), 
  2681 ;;  res             2   55[COMRAM] PTR PTR const unsigned c
  2682 ;;		 -> NULL(0), 
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;  _u              4   61[COMRAM] struct .
  2685 ;;  expon           1   60[COMRAM] char 
  2686 ;;  flags           1   59[COMRAM] unsigned char 
  2687 ;;  eexp            1   58[COMRAM] char 
  2688 ;; Return value:  Size  Location     Type
  2689 ;;                  3   53[COMRAM] char 
  2690 ;; Registers used:
  2691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2692 ;; Tracked objects:
  2693 ;;		On entry : 0/0
  2694 ;;		On exit  : 0/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2697 ;;      Params:         4       0       0       0       0       0       0       0       0
  2698 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2699 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2700 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2701 ;;Total ram usage:       12 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; Hardware stack levels required when called:    3
  2704 ;; This function calls:
  2705 ;;		___altoft
  2706 ;;		___ftdiv
  2707 ;;		___ftge
  2708 ;;		___ftmul
  2709 ;;		___ftneg
  2710 ;;		___lmul
  2711 ;;		_isdigit
  2712 ;;		_isspace
  2713 ;; This function is called by:
  2714 ;;		_atof
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text10
  2719  00167C                     __ptext10:
  2720                           	opt stack 0
  2721  00167C                     _strtod:
  2722                           	opt stack 25
  2723                           
  2724                           ;incstack = 0
  2725  00167C  5038               	movf	strtod@res,w,c
  2726  00167E  1039               	iorwf	strtod@res+1,w,c
  2727  001680  B4D8               	btfsc	status,2,c
  2728  001682  D00B               	goto	l4388
  2729  001684  C038  FFD9         	movff	strtod@res,fsr2l
  2730  001688  C039  FFDA         	movff	strtod@res+1,fsr2h
  2731  00168C  C036  FFDE         	movff	strtod@s,postinc2
  2732  001690  C037  FFDD         	movff	strtod@s+1,postdec2
  2733  001694  D002               	goto	l4388
  2734  001696                     l4386:
  2735  001696  4A36               	infsnz	strtod@s,f,c
  2736  001698  2A37               	incf	strtod@s+1,f,c
  2737  00169A                     l4388:
  2738  00169A  C036  FFD9         	movff	strtod@s,fsr2l
  2739  00169E  C037  FFDA         	movff	strtod@s+1,fsr2h
  2740  0016A2  50DF               	movf	indf2,w,c
  2741  0016A4  6E3B               	movwf	strtod@eexp,c
  2742  0016A6  503B               	movf	strtod@eexp,w,c
  2743  0016A8  ECB6  F01A         	call	_isspace
  2744  0016AC  B0D8               	btfsc	status,0,c
  2745  0016AE  D7F3               	goto	l4386
  2746  0016B0  0E00               	movlw	0
  2747  0016B2  6E3C               	movwf	strtod@flags,c
  2748  0016B4  0E2D               	movlw	45
  2749  0016B6  183B               	xorwf	strtod@eexp,w,c
  2750  0016B8  A4D8               	btfss	status,2,c
  2751  0016BA  D003               	goto	l4398
  2752  0016BC  0E01               	movlw	1
  2753  0016BE  6E3C               	movwf	strtod@flags,c
  2754  0016C0  D004               	goto	l4400
  2755  0016C2                     l4398:
  2756  0016C2  0E2B               	movlw	43
  2757  0016C4  183B               	xorwf	strtod@eexp,w,c
  2758  0016C6  A4D8               	btfss	status,2,c
  2759  0016C8  D002               	goto	l4402
  2760  0016CA                     l4400:
  2761  0016CA  4A36               	infsnz	strtod@s,f,c
  2762  0016CC  2A37               	incf	strtod@s+1,f,c
  2763  0016CE                     l4402:
  2764  0016CE  0E00               	movlw	0
  2765  0016D0  6E3B               	movwf	strtod@eexp,c
  2766  0016D2  0E00               	movlw	0
  2767  0016D4  6E3E               	movwf	strtod@_u,c
  2768  0016D6  0E00               	movlw	0
  2769  0016D8  6E3F               	movwf	strtod@_u+1,c
  2770  0016DA  0E00               	movlw	0
  2771  0016DC  6E40               	movwf	strtod@_u+2,c
  2772  0016DE  0E00               	movlw	0
  2773  0016E0  6E41               	movwf	strtod@_u+3,c
  2774  0016E2  0E00               	movlw	0
  2775  0016E4  6E3D               	movwf	strtod@expon,c
  2776  0016E6                     l4408:
  2777  0016E6  B83C               	btfsc	strtod@flags,4,c
  2778  0016E8  D00A               	goto	l4414
  2779  0016EA  C036  FFD9         	movff	strtod@s,fsr2l
  2780  0016EE  C037  FFDA         	movff	strtod@s+1,fsr2h
  2781  0016F2  0E2E               	movlw	46
  2782  0016F4  18DE               	xorwf	postinc2,w,c
  2783  0016F6  A4D8               	btfss	status,2,c
  2784  0016F8  D002               	goto	l4414
  2785  0016FA  883C               	bsf	strtod@flags,4,c
  2786  0016FC  D03C               	goto	l544
  2787  0016FE                     l4414:
  2788  0016FE  C036  FFD9         	movff	strtod@s,fsr2l
  2789  001702  C037  FFDA         	movff	strtod@s+1,fsr2h
  2790  001706  50DF               	movf	indf2,w,c
  2791  001708  EC11  F01B         	call	_isdigit
  2792  00170C  A0D8               	btfss	status,0,c
  2793  00170E  D036               	goto	l4432
  2794  001710  823C               	bsf	strtod@flags,1,c
  2795  001712  0E08               	movlw	8
  2796  001714  183B               	xorwf	strtod@eexp,w,c
  2797  001716  B4D8               	btfsc	status,2,c
  2798  001718  D02C               	goto	l542
  2799  00171A  B83C               	btfsc	strtod@flags,4,c
  2800  00171C  063D               	decf	strtod@expon,f,c
  2801  00171E  2A3B               	incf	strtod@eexp,f,c
  2802  001720  C03E  F010         	movff	strtod@_u,___lmul@multiplier
  2803  001724  C03F  F011         	movff	strtod@_u+1,___lmul@multiplier+1
  2804  001728  C040  F012         	movff	strtod@_u+2,___lmul@multiplier+2
  2805  00172C  C041  F013         	movff	strtod@_u+3,___lmul@multiplier+3
  2806  001730  0E0A               	movlw	10
  2807  001732  6E14               	movwf	___lmul@multiplicand,c
  2808  001734  0E00               	movlw	0
  2809  001736  6E15               	movwf	___lmul@multiplicand+1,c
  2810  001738  0E00               	movlw	0
  2811  00173A  6E16               	movwf	___lmul@multiplicand+2,c
  2812  00173C  0E00               	movlw	0
  2813  00173E  6E17               	movwf	___lmul@multiplicand+3,c
  2814  001740  EC9F  F019         	call	___lmul	;wreg free
  2815  001744  C010  F03E         	movff	?___lmul,strtod@_u
  2816  001748  C011  F03F         	movff	?___lmul+1,strtod@_u+1
  2817  00174C  C012  F040         	movff	?___lmul+2,strtod@_u+2
  2818  001750  C013  F041         	movff	?___lmul+3,strtod@_u+3
  2819  001754  C036  FFD9         	movff	strtod@s,fsr2l
  2820  001758  C037  FFDA         	movff	strtod@s+1,fsr2h
  2821  00175C  50DF               	movf	indf2,w,c
  2822  00175E  6E3A               	movwf	??_strtod& (0+255),c
  2823  001760  0ED0               	movlw	208
  2824  001762  263A               	addwf	??_strtod,f,c
  2825  001764  503A               	movf	??_strtod,w,c
  2826  001766  263E               	addwf	strtod@_u,f,c
  2827  001768  0E00               	movlw	0
  2828  00176A  223F               	addwfc	strtod@_u+1,f,c
  2829  00176C  2240               	addwfc	strtod@_u+2,f,c
  2830  00176E  2241               	addwfc	strtod@_u+3,f,c
  2831  001770  D002               	goto	l544
  2832  001772                     l542:
  2833  001772  A83C               	btfss	strtod@flags,4,c
  2834  001774  2A3D               	incf	strtod@expon,f,c
  2835  001776                     l544:
  2836  001776  4A36               	infsnz	strtod@s,f,c
  2837  001778  2A37               	incf	strtod@s+1,f,c
  2838  00177A  D7B5               	goto	l4408
  2839  00177C                     l4432:
  2840  00177C  0E00               	movlw	0
  2841  00177E  6E3B               	movwf	strtod@eexp,c
  2842  001780  C036  FFD9         	movff	strtod@s,fsr2l
  2843  001784  C037  FFDA         	movff	strtod@s+1,fsr2h
  2844  001788  0E65               	movlw	101
  2845  00178A  18DE               	xorwf	postinc2,w,c
  2846  00178C  B4D8               	btfsc	status,2,c
  2847  00178E  D008               	goto	l4438
  2848  001790  C036  FFD9         	movff	strtod@s,fsr2l
  2849  001794  C037  FFDA         	movff	strtod@s+1,fsr2h
  2850  001798  0E45               	movlw	69
  2851  00179A  18DE               	xorwf	postinc2,w,c
  2852  00179C  A4D8               	btfss	status,2,c
  2853  00179E  D05E               	goto	l4470
  2854  0017A0                     l4438:
  2855  0017A0  4A36               	infsnz	strtod@s,f,c
  2856  0017A2  2A37               	incf	strtod@s+1,f,c
  2857  0017A4  C036  FFD9         	movff	strtod@s,fsr2l
  2858  0017A8  C037  FFDA         	movff	strtod@s+1,fsr2h
  2859  0017AC  0E2D               	movlw	45
  2860  0017AE  18DE               	xorwf	postinc2,w,c
  2861  0017B0  A4D8               	btfss	status,2,c
  2862  0017B2  D002               	goto	l4442
  2863  0017B4  863C               	bsf	strtod@flags,3,c
  2864  0017B6  D008               	goto	l4446
  2865  0017B8                     l4442:
  2866  0017B8  C036  FFD9         	movff	strtod@s,fsr2l
  2867  0017BC  C037  FFDA         	movff	strtod@s+1,fsr2h
  2868  0017C0  0E2B               	movlw	43
  2869  0017C2  18DE               	xorwf	postinc2,w,c
  2870  0017C4  A4D8               	btfss	status,2,c
  2871  0017C6  D002               	goto	l4448
  2872  0017C8                     l4446:
  2873  0017C8  4A36               	infsnz	strtod@s,f,c
  2874  0017CA  2A37               	incf	strtod@s+1,f,c
  2875  0017CC                     l4448:
  2876  0017CC  C036  FFD9         	movff	strtod@s,fsr2l
  2877  0017D0  C037  FFDA         	movff	strtod@s+1,fsr2h
  2878  0017D4  0E30               	movlw	48
  2879  0017D6  18DE               	xorwf	postinc2,w,c
  2880  0017D8  B4D8               	btfsc	status,2,c
  2881  0017DA  D7F6               	goto	l4446
  2882  0017DC  C036  FFD9         	movff	strtod@s,fsr2l
  2883  0017E0  C037  FFDA         	movff	strtod@s+1,fsr2h
  2884  0017E4  50DF               	movf	indf2,w,c
  2885  0017E6  EC11  F01B         	call	_isdigit
  2886  0017EA  A0D8               	btfss	status,0,c
  2887  0017EC  D035               	goto	l4466
  2888  0017EE  C036  FFD9         	movff	strtod@s,fsr2l
  2889  0017F2  C037  FFDA         	movff	strtod@s+1,fsr2h
  2890  0017F6  50DF               	movf	indf2,w,c
  2891  0017F8  0FD0               	addlw	208
  2892  0017FA  6E3B               	movwf	strtod@eexp,c
  2893  0017FC  4A36               	infsnz	strtod@s,f,c
  2894  0017FE  2A37               	incf	strtod@s+1,f,c
  2895  001800  C036  FFD9         	movff	strtod@s,fsr2l
  2896  001804  C037  FFDA         	movff	strtod@s+1,fsr2h
  2897  001808  50DF               	movf	indf2,w,c
  2898  00180A  EC11  F01B         	call	_isdigit
  2899  00180E  A0D8               	btfss	status,0,c
  2900  001810  D023               	goto	l4466
  2901  001812  C036  FFD9         	movff	strtod@s,fsr2l
  2902  001816  C037  FFDA         	movff	strtod@s+1,fsr2h
  2903  00181A  50DF               	movf	indf2,w,c
  2904  00181C  6E3A               	movwf	??_strtod& (0+255),c
  2905  00181E  503B               	movf	strtod@eexp,w,c
  2906  001820  0D0A               	mullw	10
  2907  001822  50F3               	movf	prodl,w,c
  2908  001824  243A               	addwf	??_strtod,w,c
  2909  001826  0FD0               	addlw	208
  2910  001828  6E3B               	movwf	strtod@eexp,c
  2911  00182A  4A36               	infsnz	strtod@s,f,c
  2912  00182C  2A37               	incf	strtod@s+1,f,c
  2913  00182E  C036  FFD9         	movff	strtod@s,fsr2l
  2914  001832  C037  FFDA         	movff	strtod@s+1,fsr2h
  2915  001836  50DF               	movf	indf2,w,c
  2916  001838  EC11  F01B         	call	_isdigit
  2917  00183C  A0D8               	btfss	status,0,c
  2918  00183E  D00C               	goto	l4466
  2919  001840  C036  FFD9         	movff	strtod@s,fsr2l
  2920  001844  C037  FFDA         	movff	strtod@s+1,fsr2h
  2921  001848  50DF               	movf	indf2,w,c
  2922  00184A  6E3A               	movwf	??_strtod& (0+255),c
  2923  00184C  503B               	movf	strtod@eexp,w,c
  2924  00184E  0D0A               	mullw	10
  2925  001850  50F3               	movf	prodl,w,c
  2926  001852  243A               	addwf	??_strtod,w,c
  2927  001854  0FD0               	addlw	208
  2928  001856  6E3B               	movwf	strtod@eexp,c
  2929  001858                     l4466:
  2930  001858  B63C               	btfsc	strtod@flags,3,c
  2931  00185A  6C3B               	negf	strtod@eexp,c
  2932  00185C                     l4470:
  2933  00185C  503B               	movf	strtod@eexp,w,c
  2934  00185E  263D               	addwf	strtod@expon,f,c
  2935  001860  5038               	movf	strtod@res,w,c
  2936  001862  1039               	iorwf	strtod@res+1,w,c
  2937  001864  A4D8               	btfss	status,2,c
  2938  001866  A23C               	btfss	strtod@flags,1,c
  2939  001868  D008               	goto	l4478
  2940  00186A  C038  FFD9         	movff	strtod@res,fsr2l
  2941  00186E  C039  FFDA         	movff	strtod@res+1,fsr2h
  2942  001872  C036  FFDE         	movff	strtod@s,postinc2
  2943  001876  C037  FFDD         	movff	strtod@s+1,postdec2
  2944  00187A                     l4478:
  2945  00187A  C03E  F018         	movff	strtod@_u,___altoft@c
  2946  00187E  C03F  F019         	movff	strtod@_u+1,___altoft@c+1
  2947  001882  C040  F01A         	movff	strtod@_u+2,___altoft@c+2
  2948  001886  C041  F01B         	movff	strtod@_u+3,___altoft@c+3
  2949  00188A  EC37  F018         	call	___altoft	;wreg free
  2950  00188E  C018  F03E         	movff	?___altoft,strtod@_u
  2951  001892  C019  F03F         	movff	?___altoft+1,strtod@_u+1
  2952  001896  C01A  F040         	movff	?___altoft+2,strtod@_u+2
  2953  00189A  503E               	movf	strtod@_u,w,c
  2954  00189C  103F               	iorwf	strtod@_u+1,w,c
  2955  00189E  1040               	iorwf	strtod@_u+2,w,c
  2956  0018A0  A4D8               	btfss	status,2,c
  2957  0018A2  D007               	goto	l4486
  2958  0018A4  0E00               	movlw	0
  2959  0018A6  6E36               	movwf	?_strtod,c
  2960  0018A8  0E00               	movlw	0
  2961  0018AA  6E37               	movwf	?_strtod+1,c
  2962  0018AC  0E00               	movlw	0
  2963  0018AE  6E38               	movwf	?_strtod+2,c
  2964  0018B0  0012               	return	
  2965  0018B2                     l4486:
  2966  0018B2  AE3D               	btfss	strtod@expon,7,c
  2967  0018B4  D056               	goto	l4514
  2968  0018B6  6C3D               	negf	strtod@expon,c
  2969  0018B8  D016               	goto	l4494
  2970  0018BA                     l4490:
  2971  0018BA  C03E  F022         	movff	strtod@_u,___ftdiv@f1
  2972  0018BE  C03F  F023         	movff	strtod@_u+1,___ftdiv@f1+1
  2973  0018C2  C040  F024         	movff	strtod@_u+2,___ftdiv@f1+2
  2974  0018C6  0E03               	movlw	3
  2975  0018C8  6E25               	movwf	___ftdiv@f2,c
  2976  0018CA  0E15               	movlw	21
  2977  0018CC  6E26               	movwf	___ftdiv@f2+1,c
  2978  0018CE  0E50               	movlw	80
  2979  0018D0  6E27               	movwf	___ftdiv@f2+2,c
  2980  0018D2  EC48  F015         	call	___ftdiv	;wreg free
  2981  0018D6  C022  F03E         	movff	?___ftdiv,strtod@_u
  2982  0018DA  C023  F03F         	movff	?___ftdiv+1,strtod@_u+1
  2983  0018DE  C024  F040         	movff	?___ftdiv+2,strtod@_u+2
  2984  0018E2  0EF6               	movlw	246
  2985  0018E4  263D               	addwf	strtod@expon,f,c
  2986  0018E6                     l4494:
  2987  0018E6  503D               	movf	strtod@expon,w,c
  2988  0018E8  0A80               	xorlw	128
  2989  0018EA  0F76               	addlw	-138
  2990  0018EC  A0D8               	btfss	status,0,c
  2991  0018EE  D016               	goto	l4500
  2992  0018F0  D7E4               	goto	l4490
  2993  0018F2                     l4496:
  2994  0018F2  C03E  F022         	movff	strtod@_u,___ftdiv@f1
  2995  0018F6  C03F  F023         	movff	strtod@_u+1,___ftdiv@f1+1
  2996  0018FA  C040  F024         	movff	strtod@_u+2,___ftdiv@f1+2
  2997  0018FE  0E00               	movlw	0
  2998  001900  6E25               	movwf	___ftdiv@f2,c
  2999  001902  0E20               	movlw	32
  3000  001904  6E26               	movwf	___ftdiv@f2+1,c
  3001  001906  0E41               	movlw	65
  3002  001908  6E27               	movwf	___ftdiv@f2+2,c
  3003  00190A  EC48  F015         	call	___ftdiv	;wreg free
  3004  00190E  C022  F03E         	movff	?___ftdiv,strtod@_u
  3005  001912  C023  F03F         	movff	?___ftdiv+1,strtod@_u+1
  3006  001916  C024  F040         	movff	?___ftdiv+2,strtod@_u+2
  3007  00191A  063D               	decf	strtod@expon,f,c
  3008  00191C                     l4500:
  3009  00191C  503D               	movf	strtod@expon,w,c
  3010  00191E  A4D8               	btfss	status,2,c
  3011  001920  D7E8               	goto	l4496
  3012  001922  C03E  F010         	movff	strtod@_u,___ftge@ff1
  3013  001926  C03F  F011         	movff	strtod@_u+1,___ftge@ff1+1
  3014  00192A  C040  F012         	movff	strtod@_u+2,___ftge@ff1+2
  3015  00192E  0E00               	movlw	0
  3016  001930  6E13               	movwf	___ftge@ff2,c
  3017  001932  0E80               	movlw	128
  3018  001934  6E14               	movwf	___ftge@ff2+1,c
  3019  001936  0E00               	movlw	0
  3020  001938  6E15               	movwf	___ftge@ff2+2,c
  3021  00193A  ECB0  F016         	call	___ftge	;wreg free
  3022  00193E  B0D8               	btfsc	status,0,c
  3023  001940  D061               	goto	l571
  3024  001942  A03C               	btfss	strtod@flags,0,c
  3025  001944  D007               	goto	l4510
  3026  001946                     l4506:
  3027  001946  0E00               	movlw	0
  3028  001948  6E36               	movwf	?_strtod,c
  3029  00194A  0E80               	movlw	128
  3030  00194C  6E37               	movwf	?_strtod+1,c
  3031  00194E  0E80               	movlw	128
  3032  001950  6E38               	movwf	?_strtod+2,c
  3033  001952  0012               	return	
  3034  001954                     l4510:
  3035  001954  0E00               	movlw	0
  3036  001956  6E36               	movwf	?_strtod,c
  3037  001958  0E80               	movlw	128
  3038  00195A  6E37               	movwf	?_strtod+1,c
  3039  00195C  0E00               	movlw	0
  3040  00195E  6E38               	movwf	?_strtod+2,c
  3041  001960  0012               	return	
  3042  001962                     l4514:
  3043  001962  503D               	movf	strtod@expon,w,c
  3044  001964  0A80               	xorlw	128
  3045  001966  0F7F               	addlw	-129
  3046  001968  B0D8               	btfsc	status,0,c
  3047  00196A  D017               	goto	l4522
  3048  00196C  D04B               	goto	l571
  3049  00196E                     l4518:
  3050  00196E  C03E  F024         	movff	strtod@_u,___ftmul@f1
  3051  001972  C03F  F025         	movff	strtod@_u+1,___ftmul@f1+1
  3052  001976  C040  F026         	movff	strtod@_u+2,___ftmul@f1+2
  3053  00197A  0E03               	movlw	3
  3054  00197C  6E27               	movwf	___ftmul@f2,c
  3055  00197E  0E15               	movlw	21
  3056  001980  6E28               	movwf	___ftmul@f2+1,c
  3057  001982  0E50               	movlw	80
  3058  001984  6E29               	movwf	___ftmul@f2+2,c
  3059  001986  ECCE  F014         	call	___ftmul	;wreg free
  3060  00198A  C024  F03E         	movff	?___ftmul,strtod@_u
  3061  00198E  C025  F03F         	movff	?___ftmul+1,strtod@_u+1
  3062  001992  C026  F040         	movff	?___ftmul+2,strtod@_u+2
  3063  001996  0EF6               	movlw	246
  3064  001998  263D               	addwf	strtod@expon,f,c
  3065  00199A                     l4522:
  3066  00199A  0E0A               	movlw	10
  3067  00199C  603D               	cpfslt	strtod@expon,c
  3068  00199E  D7E7               	goto	l4518
  3069  0019A0  D015               	goto	l4528
  3070  0019A2                     l4524:
  3071  0019A2  C03E  F024         	movff	strtod@_u,___ftmul@f1
  3072  0019A6  C03F  F025         	movff	strtod@_u+1,___ftmul@f1+1
  3073  0019AA  C040  F026         	movff	strtod@_u+2,___ftmul@f1+2
  3074  0019AE  0E00               	movlw	0
  3075  0019B0  6E27               	movwf	___ftmul@f2,c
  3076  0019B2  0E20               	movlw	32
  3077  0019B4  6E28               	movwf	___ftmul@f2+1,c
  3078  0019B6  0E41               	movlw	65
  3079  0019B8  6E29               	movwf	___ftmul@f2+2,c
  3080  0019BA  ECCE  F014         	call	___ftmul	;wreg free
  3081  0019BE  C024  F03E         	movff	?___ftmul,strtod@_u
  3082  0019C2  C025  F03F         	movff	?___ftmul+1,strtod@_u+1
  3083  0019C6  C026  F040         	movff	?___ftmul+2,strtod@_u+2
  3084  0019CA  063D               	decf	strtod@expon,f,c
  3085  0019CC                     l4528:
  3086  0019CC  503D               	movf	strtod@expon,w,c
  3087  0019CE  A4D8               	btfss	status,2,c
  3088  0019D0  D7E8               	goto	l4524
  3089  0019D2  0EFF               	movlw	255
  3090  0019D4  6E10               	movwf	___ftge@ff1,c
  3091  0019D6  0E7F               	movlw	127
  3092  0019D8  6E11               	movwf	___ftge@ff1+1,c
  3093  0019DA  0E7F               	movlw	127
  3094  0019DC  6E12               	movwf	___ftge@ff1+2,c
  3095  0019DE  C03E  F013         	movff	strtod@_u,___ftge@ff2
  3096  0019E2  C03F  F014         	movff	strtod@_u+1,___ftge@ff2+1
  3097  0019E6  C040  F015         	movff	strtod@_u+2,___ftge@ff2+2
  3098  0019EA  ECB0  F016         	call	___ftge	;wreg free
  3099  0019EE  B0D8               	btfsc	status,0,c
  3100  0019F0  D009               	goto	l571
  3101  0019F2  B03C               	btfsc	strtod@flags,0,c
  3102  0019F4  D7A8               	goto	l4506
  3103  0019F6  0E00               	movlw	0
  3104  0019F8  6E36               	movwf	?_strtod,c
  3105  0019FA  0E80               	movlw	128
  3106  0019FC  6E37               	movwf	?_strtod+1,c
  3107  0019FE  0E00               	movlw	0
  3108  001A00  6E38               	movwf	?_strtod+2,c
  3109  001A02  0012               	return	
  3110  001A04                     l571:
  3111  001A04  A03C               	btfss	strtod@flags,0,c
  3112  001A06  D00E               	goto	l4544
  3113  001A08  C03E  F033         	movff	strtod@_u,___ftneg@f1
  3114  001A0C  C03F  F034         	movff	strtod@_u+1,___ftneg@f1+1
  3115  001A10  C040  F035         	movff	strtod@_u+2,___ftneg@f1+2
  3116  001A14  ECDC  F01A         	call	___ftneg	;wreg free
  3117  001A18  C033  F03E         	movff	?___ftneg,strtod@_u
  3118  001A1C  C034  F03F         	movff	?___ftneg+1,strtod@_u+1
  3119  001A20  C035  F040         	movff	?___ftneg+2,strtod@_u+2
  3120  001A24                     l4544:
  3121  001A24  C03E  F036         	movff	strtod@_u,?_strtod
  3122  001A28  C03F  F037         	movff	strtod@_u+1,?_strtod+1
  3123  001A2C  C040  F038         	movff	strtod@_u+2,?_strtod+2
  3124  001A30  0012               	return	
  3125  001A32                     __end_of_strtod:
  3126                           	opt stack 0
  3127                           tblptru	equ	0xFF8
  3128                           tblptrh	equ	0xFF7
  3129                           tblptrl	equ	0xFF6
  3130                           tablat	equ	0xFF5
  3131                           prodh	equ	0xFF4
  3132                           prodl	equ	0xFF3
  3133                           intcon	equ	0xFF2
  3134                           postinc0	equ	0xFEE
  3135                           wreg	equ	0xFE8
  3136                           indf1	equ	0xFE7
  3137                           fsr1h	equ	0xFE2
  3138                           fsr1l	equ	0xFE1
  3139                           indf2	equ	0xFDF
  3140                           postinc2	equ	0xFDE
  3141                           postdec2	equ	0xFDD
  3142                           fsr2h	equ	0xFDA
  3143                           fsr2l	equ	0xFD9
  3144                           status	equ	0xFD8
  3145                           
  3146 ;; *************** function _isspace *****************
  3147 ;; Defined at:
  3148 ;;		line 8 in file "D:\mplab\sources\common\isspace.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;  c               1    wreg     unsigned char 
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;  c               1   17[COMRAM] unsigned char 
  3153 ;; Return value:  Size  Location     Type
  3154 ;;		None               void
  3155 ;; Registers used:
  3156 ;;		wreg, status,2, status,0
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3162 ;;      Params:         0       0       0       0       0       0       0       0       0
  3163 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3164 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3165 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3166 ;;Total ram usage:        3 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; Hardware stack levels required when called:    1
  3169 ;; This function calls:
  3170 ;;		Nothing
  3171 ;; This function is called by:
  3172 ;;		_strtod
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text11
  3177  00356C                     __ptext11:
  3178                           	opt stack 0
  3179  00356C                     _isspace:
  3180                           	opt stack 26
  3181                           
  3182                           ;incstack = 0
  3183                           ;isspace@c stored from wreg
  3184  00356C  6E12               	movwf	isspace@c,c
  3185  00356E  0E01               	movlw	1
  3186  003570  6E11               	movwf	_isspace$834,c
  3187  003572  0E20               	movlw	32
  3188  003574  1812               	xorwf	isspace@c,w,c
  3189  003576  B4D8               	btfsc	status,2,c
  3190  003578  D008               	goto	l2902
  3191  00357A  0E0E               	movlw	14
  3192  00357C  6012               	cpfslt	isspace@c,c
  3193  00357E  D003               	goto	l2900
  3194  003580  0E09               	movlw	9
  3195  003582  6012               	cpfslt	isspace@c,c
  3196  003584  D002               	goto	l2902
  3197  003586                     l2900:
  3198  003586  0E00               	movlw	0
  3199  003588  6E11               	movwf	_isspace$834,c
  3200  00358A                     l2902:
  3201  00358A  C011  F010         	movff	_isspace$834,??_isspace
  3202  00358E  3010               	rrcf	??_isspace,w,c
  3203  003590  0012               	return	
  3204  003592                     __end_of_isspace:
  3205                           	opt stack 0
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           prodh	equ	0xFF4
  3211                           prodl	equ	0xFF3
  3212                           intcon	equ	0xFF2
  3213                           postinc0	equ	0xFEE
  3214                           wreg	equ	0xFE8
  3215                           indf1	equ	0xFE7
  3216                           fsr1h	equ	0xFE2
  3217                           fsr1l	equ	0xFE1
  3218                           indf2	equ	0xFDF
  3219                           postinc2	equ	0xFDE
  3220                           postdec2	equ	0xFDD
  3221                           fsr2h	equ	0xFDA
  3222                           fsr2l	equ	0xFD9
  3223                           status	equ	0xFD8
  3224                           
  3225 ;; *************** function ___lmul *****************
  3226 ;; Defined at:
  3227 ;;		line 15 in file "D:\mplab\sources\common\Umul32.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;  multiplier      4   15[COMRAM] unsigned long 
  3230 ;;  multiplicand    4   19[COMRAM] unsigned long 
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;  product         4   23[COMRAM] unsigned long 
  3233 ;; Return value:  Size  Location     Type
  3234 ;;                  4   15[COMRAM] unsigned long 
  3235 ;; Registers used:
  3236 ;;		wreg, status,2, status,0
  3237 ;; Tracked objects:
  3238 ;;		On entry : 0/0
  3239 ;;		On exit  : 0/0
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3242 ;;      Params:         8       0       0       0       0       0       0       0       0
  3243 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3244 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3245 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3246 ;;Total ram usage:       12 bytes
  3247 ;; Hardware stack levels used:    1
  3248 ;; Hardware stack levels required when called:    1
  3249 ;; This function calls:
  3250 ;;		Nothing
  3251 ;; This function is called by:
  3252 ;;		_strtod
  3253 ;;		_atol
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           	psect	text12
  3258  00333E                     __ptext12:
  3259                           	opt stack 0
  3260  00333E                     ___lmul:
  3261                           	opt stack 26
  3262                           
  3263                           ;incstack = 0
  3264  00333E  0E00               	movlw	0
  3265  003340  6E18               	movwf	___lmul@product,c
  3266  003342  0E00               	movlw	0
  3267  003344  6E19               	movwf	___lmul@product+1,c
  3268  003346  0E00               	movlw	0
  3269  003348  6E1A               	movwf	___lmul@product+2,c
  3270  00334A  0E00               	movlw	0
  3271  00334C  6E1B               	movwf	___lmul@product+3,c
  3272  00334E                     l2704:
  3273  00334E  A010               	btfss	___lmul@multiplier,0,c
  3274  003350  D008               	goto	l2708
  3275  003352  5014               	movf	___lmul@multiplicand,w,c
  3276  003354  2618               	addwf	___lmul@product,f,c
  3277  003356  5015               	movf	___lmul@multiplicand+1,w,c
  3278  003358  2219               	addwfc	___lmul@product+1,f,c
  3279  00335A  5016               	movf	___lmul@multiplicand+2,w,c
  3280  00335C  221A               	addwfc	___lmul@product+2,f,c
  3281  00335E  5017               	movf	___lmul@multiplicand+3,w,c
  3282  003360  221B               	addwfc	___lmul@product+3,f,c
  3283  003362                     l2708:
  3284  003362  90D8               	bcf	status,0,c
  3285  003364  3614               	rlcf	___lmul@multiplicand,f,c
  3286  003366  3615               	rlcf	___lmul@multiplicand+1,f,c
  3287  003368  3616               	rlcf	___lmul@multiplicand+2,f,c
  3288  00336A  3617               	rlcf	___lmul@multiplicand+3,f,c
  3289  00336C  90D8               	bcf	status,0,c
  3290  00336E  3213               	rrcf	___lmul@multiplier+3,f,c
  3291  003370  3212               	rrcf	___lmul@multiplier+2,f,c
  3292  003372  3211               	rrcf	___lmul@multiplier+1,f,c
  3293  003374  3210               	rrcf	___lmul@multiplier,f,c
  3294  003376  5010               	movf	___lmul@multiplier,w,c
  3295  003378  1011               	iorwf	___lmul@multiplier+1,w,c
  3296  00337A  1012               	iorwf	___lmul@multiplier+2,w,c
  3297  00337C  1013               	iorwf	___lmul@multiplier+3,w,c
  3298  00337E  A4D8               	btfss	status,2,c
  3299  003380  D7E6               	goto	l2704
  3300  003382  C018  F010         	movff	___lmul@product,?___lmul
  3301  003386  C019  F011         	movff	___lmul@product+1,?___lmul+1
  3302  00338A  C01A  F012         	movff	___lmul@product+2,?___lmul+2
  3303  00338E  C01B  F013         	movff	___lmul@product+3,?___lmul+3
  3304  003392  0012               	return		;funcret
  3305  003394                     __end_of___lmul:
  3306                           	opt stack 0
  3307                           tblptru	equ	0xFF8
  3308                           tblptrh	equ	0xFF7
  3309                           tblptrl	equ	0xFF6
  3310                           tablat	equ	0xFF5
  3311                           prodh	equ	0xFF4
  3312                           prodl	equ	0xFF3
  3313                           intcon	equ	0xFF2
  3314                           postinc0	equ	0xFEE
  3315                           wreg	equ	0xFE8
  3316                           indf1	equ	0xFE7
  3317                           fsr1h	equ	0xFE2
  3318                           fsr1l	equ	0xFE1
  3319                           indf2	equ	0xFDF
  3320                           postinc2	equ	0xFDE
  3321                           postdec2	equ	0xFDD
  3322                           fsr2h	equ	0xFDA
  3323                           fsr2l	equ	0xFD9
  3324                           status	equ	0xFD8
  3325                           
  3326 ;; *************** function _convert_to_degrees *****************
  3327 ;; Defined at:
  3328 ;;		line 242 in file "GPS.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;  NMEA_lat_lon    3    6[BANK0 ] float 
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;  decimal         3   17[BANK0 ] float 
  3333 ;;  dec_deg         3   12[BANK0 ] float 
  3334 ;;  minutes         3    9[BANK0 ] float 
  3335 ;;  position        3    0        float 
  3336 ;;  degrees         2   15[BANK0 ] int 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  3    6[BANK0 ] float 
  3339 ;; Registers used:
  3340 ;;		wreg, status,2, status,0, cstack
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3346 ;;      Params:         0       3       0       0       0       0       0       0       0
  3347 ;;      Locals:         0      11       0       0       0       0       0       0       0
  3348 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3349 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3350 ;;Total ram usage:       14 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    3
  3353 ;; This function calls:
  3354 ;;		___awtoft
  3355 ;;		___ftadd
  3356 ;;		___ftdiv
  3357 ;;		___ftmul
  3358 ;;		___ftneg
  3359 ;;		___fttol
  3360 ;; This function is called by:
  3361 ;;		_main
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           	psect	text13
  3366  0021D2                     __ptext13:
  3367                           	opt stack 0
  3368  0021D2                     _convert_to_degrees:
  3369                           	opt stack 27
  3370                           
  3371                           ;GPS.c: 245: float minutes, dec_deg, decimal;
  3372                           ;GPS.c: 247: int degrees;
  3373                           ;GPS.c: 249: float position;
  3374                           ;GPS.c: 251: degrees = (int)(NMEA_lat_long/100.00);
  3375                           
  3376                           ;incstack = 0
  3377  0021D2  0E00               	movlw	0
  3378  0021D4  6E25               	movwf	___ftdiv@f2,c
  3379  0021D6  0EC8               	movlw	200
  3380  0021D8  6E26               	movwf	___ftdiv@f2+1,c
  3381  0021DA  0E42               	movlw	66
  3382  0021DC  6E27               	movwf	___ftdiv@f2+2,c
  3383  0021DE  C066  F022         	movff	convert_to_degrees@NMEA_lat_long,___ftdiv@f1
  3384  0021E2  C067  F023         	movff	convert_to_degrees@NMEA_lat_long+1,___ftdiv@f1+1
  3385  0021E6  C068  F024         	movff	convert_to_degrees@NMEA_lat_long+2,___ftdiv@f1+2
  3386  0021EA  EC48  F015         	call	___ftdiv	;wreg free
  3387  0021EE  C022  F03A         	movff	?___ftdiv,___fttol@f1
  3388  0021F2  C023  F03B         	movff	?___ftdiv+1,___fttol@f1+1
  3389  0021F6  C024  F03C         	movff	?___ftdiv+2,___fttol@f1+2
  3390  0021FA  ECB1  F012         	call	___fttol	;wreg free
  3391  0021FE  C03A  F06F         	movff	?___fttol,convert_to_degrees@degrees
  3392  002202  C03B  F070         	movff	?___fttol+1,convert_to_degrees@degrees+1
  3393                           
  3394                           ;GPS.c: 252: minutes = NMEA_lat_long - degrees*100.00;
  3395  002206  0E00               	movlw	0
  3396  002208  6E27               	movwf	___ftmul@f2,c
  3397  00220A  0EC8               	movlw	200
  3398  00220C  6E28               	movwf	___ftmul@f2+1,c
  3399  00220E  0E42               	movlw	66
  3400  002210  6E29               	movwf	___ftmul@f2+2,c
  3401  002212  C06F  F018         	movff	convert_to_degrees@degrees,___awtoft@c
  3402  002216  C070  F019         	movff	convert_to_degrees@degrees+1,___awtoft@c+1
  3403  00221A  EC39  F01A         	call	___awtoft	;wreg free
  3404  00221E  C018  F024         	movff	?___awtoft,___ftmul@f1
  3405  002222  C019  F025         	movff	?___awtoft+1,___ftmul@f1+1
  3406  002226  C01A  F026         	movff	?___awtoft+2,___ftmul@f1+2
  3407  00222A  ECCE  F014         	call	___ftmul	;wreg free
  3408  00222E  C024  F033         	movff	?___ftmul,___ftneg@f1
  3409  002232  C025  F034         	movff	?___ftmul+1,___ftneg@f1+1
  3410  002236  C026  F035         	movff	?___ftmul+2,___ftneg@f1+2
  3411  00223A  ECDC  F01A         	call	___ftneg	;wreg free
  3412  00223E  C033  F03D         	movff	?___ftneg,___ftadd@f1
  3413  002242  C034  F03E         	movff	?___ftneg+1,___ftadd@f1+1
  3414  002246  C035  F03F         	movff	?___ftneg+2,___ftadd@f1+2
  3415  00224A  C066  F040         	movff	convert_to_degrees@NMEA_lat_long,___ftadd@f2
  3416  00224E  C067  F041         	movff	convert_to_degrees@NMEA_lat_long+1,___ftadd@f2+1
  3417  002252  C068  F042         	movff	convert_to_degrees@NMEA_lat_long+2,___ftadd@f2+2
  3418  002256  ECEA  F00F         	call	___ftadd	;wreg free
  3419  00225A  C03D  F069         	movff	?___ftadd,convert_to_degrees@minutes
  3420  00225E  C03E  F06A         	movff	?___ftadd+1,convert_to_degrees@minutes+1
  3421  002262  C03F  F06B         	movff	?___ftadd+2,convert_to_degrees@minutes+2
  3422                           
  3423                           ;GPS.c: 253: dec_deg = minutes / 60.00;
  3424  002266  C069  F022         	movff	convert_to_degrees@minutes,___ftdiv@f1
  3425  00226A  C06A  F023         	movff	convert_to_degrees@minutes+1,___ftdiv@f1+1
  3426  00226E  C06B  F024         	movff	convert_to_degrees@minutes+2,___ftdiv@f1+2
  3427  002272  0E00               	movlw	0
  3428  002274  6E25               	movwf	___ftdiv@f2,c
  3429  002276  0E70               	movlw	112
  3430  002278  6E26               	movwf	___ftdiv@f2+1,c
  3431  00227A  0E42               	movlw	66
  3432  00227C  6E27               	movwf	___ftdiv@f2+2,c
  3433  00227E  EC48  F015         	call	___ftdiv	;wreg free
  3434  002282  C022  F06C         	movff	?___ftdiv,convert_to_degrees@dec_deg
  3435  002286  C023  F06D         	movff	?___ftdiv+1,convert_to_degrees@dec_deg+1
  3436  00228A  C024  F06E         	movff	?___ftdiv+2,convert_to_degrees@dec_deg+2
  3437                           
  3438                           ;GPS.c: 254: decimal = degrees + dec_deg;
  3439  00228E  C06F  F018         	movff	convert_to_degrees@degrees,___awtoft@c
  3440  002292  C070  F019         	movff	convert_to_degrees@degrees+1,___awtoft@c+1
  3441  002296  EC39  F01A         	call	___awtoft	;wreg free
  3442  00229A  C018  F03D         	movff	?___awtoft,___ftadd@f1
  3443  00229E  C019  F03E         	movff	?___awtoft+1,___ftadd@f1+1
  3444  0022A2  C01A  F03F         	movff	?___awtoft+2,___ftadd@f1+2
  3445  0022A6  C06C  F040         	movff	convert_to_degrees@dec_deg,___ftadd@f2
  3446  0022AA  C06D  F041         	movff	convert_to_degrees@dec_deg+1,___ftadd@f2+1
  3447  0022AE  C06E  F042         	movff	convert_to_degrees@dec_deg+2,___ftadd@f2+2
  3448  0022B2  ECEA  F00F         	call	___ftadd	;wreg free
  3449  0022B6  C03D  F071         	movff	?___ftadd,convert_to_degrees@decimal
  3450  0022BA  C03E  F072         	movff	?___ftadd+1,convert_to_degrees@decimal+1
  3451  0022BE  C03F  F073         	movff	?___ftadd+2,convert_to_degrees@decimal+2
  3452                           
  3453                           ;GPS.c: 255: if (N_S == 'S' || E_W == 'W') {
  3454  0022C2  0E53               	movlw	83
  3455  0022C4  184E               	xorwf	_N_S,w,c
  3456  0022C6  B4D8               	btfsc	status,2,c
  3457  0022C8  D004               	goto	l4920
  3458  0022CA  0E57               	movlw	87
  3459  0022CC  184D               	xorwf	_E_W,w,c
  3460  0022CE  A4D8               	btfss	status,2,c
  3461  0022D0  D014               	goto	l4922
  3462  0022D2                     l4920:
  3463                           
  3464                           ;GPS.c: 256: decimal *= -1;
  3465  0022D2  C071  F024         	movff	convert_to_degrees@decimal,___ftmul@f1
  3466  0022D6  C072  F025         	movff	convert_to_degrees@decimal+1,___ftmul@f1+1
  3467  0022DA  C073  F026         	movff	convert_to_degrees@decimal+2,___ftmul@f1+2
  3468  0022DE  0E00               	movlw	0
  3469  0022E0  6E27               	movwf	___ftmul@f2,c
  3470  0022E2  0E80               	movlw	128
  3471  0022E4  6E28               	movwf	___ftmul@f2+1,c
  3472  0022E6  0EBF               	movlw	191
  3473  0022E8  6E29               	movwf	___ftmul@f2+2,c
  3474  0022EA  ECCE  F014         	call	___ftmul	;wreg free
  3475  0022EE  C024  F071         	movff	?___ftmul,convert_to_degrees@decimal
  3476  0022F2  C025  F072         	movff	?___ftmul+1,convert_to_degrees@decimal+1
  3477  0022F6  C026  F073         	movff	?___ftmul+2,convert_to_degrees@decimal+2
  3478  0022FA                     l4922:
  3479                           
  3480                           ;GPS.c: 257: }
  3481                           ;GPS.c: 259: return decimal;
  3482  0022FA  C071  F066         	movff	convert_to_degrees@decimal,?_convert_to_degrees
  3483  0022FE  C072  F067         	movff	convert_to_degrees@decimal+1,?_convert_to_degrees+1
  3484  002302  C073  F068         	movff	convert_to_degrees@decimal+2,?_convert_to_degrees+2
  3485  002306  0012               	return	
  3486  002308                     __end_of_convert_to_degrees:
  3487                           	opt stack 0
  3488                           tblptru	equ	0xFF8
  3489                           tblptrh	equ	0xFF7
  3490                           tblptrl	equ	0xFF6
  3491                           tablat	equ	0xFF5
  3492                           prodh	equ	0xFF4
  3493                           prodl	equ	0xFF3
  3494                           intcon	equ	0xFF2
  3495                           postinc0	equ	0xFEE
  3496                           wreg	equ	0xFE8
  3497                           indf1	equ	0xFE7
  3498                           fsr1h	equ	0xFE2
  3499                           fsr1l	equ	0xFE1
  3500                           indf2	equ	0xFDF
  3501                           postinc2	equ	0xFDE
  3502                           postdec2	equ	0xFDD
  3503                           fsr2h	equ	0xFDA
  3504                           fsr2l	equ	0xFD9
  3505                           status	equ	0xFD8
  3506                           
  3507 ;; *************** function ___awtoft *****************
  3508 ;; Defined at:
  3509 ;;		line 32 in file "D:\mplab\sources\common\awtoft.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;  c               2   23[COMRAM] int 
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;  sign            1   26[COMRAM] unsigned char 
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  3   23[COMRAM] float 
  3516 ;; Registers used:
  3517 ;;		wreg, status,2, status,0, cstack
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3523 ;;      Params:         3       0       0       0       0       0       0       0       0
  3524 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3525 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3526 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3527 ;;Total ram usage:        4 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; Hardware stack levels required when called:    2
  3530 ;; This function calls:
  3531 ;;		___ftpack
  3532 ;; This function is called by:
  3533 ;;		_main
  3534 ;;		_convert_to_degrees
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           	psect	text14
  3539  003472                     __ptext14:
  3540                           	opt stack 0
  3541  003472                     ___awtoft:
  3542                           	opt stack 27
  3543                           
  3544                           ;incstack = 0
  3545  003472  0E00               	movlw	0
  3546  003474  6E1B               	movwf	___awtoft@sign,c
  3547  003476  AE19               	btfss	___awtoft@c+1,7,c
  3548  003478  D006               	goto	l4876
  3549  00347A  6C18               	negf	___awtoft@c,c
  3550  00347C  1E19               	comf	___awtoft@c+1,f,c
  3551  00347E  B0D8               	btfsc	status,0,c
  3552  003480  2A19               	incf	___awtoft@c+1,f,c
  3553  003482  0E01               	movlw	1
  3554  003484  6E1B               	movwf	___awtoft@sign,c
  3555  003486                     l4876:
  3556  003486  C018  F010         	movff	___awtoft@c,___ftpack@arg
  3557  00348A  C019  F011         	movff	___awtoft@c+1,___ftpack@arg+1
  3558  00348E  6A12               	clrf	___ftpack@arg+2,c
  3559  003490  0E8E               	movlw	142
  3560  003492  6E13               	movwf	___ftpack@exp,c
  3561  003494  C01B  F014         	movff	___awtoft@sign,___ftpack@sign
  3562  003498  ECBB  F015         	call	___ftpack	;wreg free
  3563  00349C  C010  F018         	movff	?___ftpack,?___awtoft
  3564  0034A0  C011  F019         	movff	?___ftpack+1,?___awtoft+1
  3565  0034A4  C012  F01A         	movff	?___ftpack+2,?___awtoft+2
  3566  0034A8  0012               	return	
  3567  0034AA                     __end_of___awtoft:
  3568                           	opt stack 0
  3569                           tblptru	equ	0xFF8
  3570                           tblptrh	equ	0xFF7
  3571                           tblptrl	equ	0xFF6
  3572                           tablat	equ	0xFF5
  3573                           prodh	equ	0xFF4
  3574                           prodl	equ	0xFF3
  3575                           intcon	equ	0xFF2
  3576                           postinc0	equ	0xFEE
  3577                           wreg	equ	0xFE8
  3578                           indf1	equ	0xFE7
  3579                           fsr1h	equ	0xFE2
  3580                           fsr1l	equ	0xFE1
  3581                           indf2	equ	0xFDF
  3582                           postinc2	equ	0xFDE
  3583                           postdec2	equ	0xFDD
  3584                           fsr2h	equ	0xFDA
  3585                           fsr2l	equ	0xFD9
  3586                           status	equ	0xFD8
  3587                           
  3588 ;; *************** function _convert_time_to_UTC *****************
  3589 ;; Defined at:
  3590 ;;		line 230 in file "GPS.c"
  3591 ;; Parameters:    Size  Location     Type
  3592 ;;  UTC_Time        4   52[BANK0 ] unsigned long 
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;  sec             2   64[BANK0 ] unsigned int 
  3595 ;;  min             2   62[BANK0 ] unsigned int 
  3596 ;;  hour            2   60[BANK0 ] unsigned int 
  3597 ;; Return value:  Size  Location     Type
  3598 ;;                  1    wreg      void 
  3599 ;; Registers used:
  3600 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3606 ;;      Params:         0       4       0       0       0       0       0       0       0
  3607 ;;      Locals:         0      10       0       0       0       0       0       0       0
  3608 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3609 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3610 ;;Total ram usage:       14 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:    5
  3613 ;; This function calls:
  3614 ;;		___lldiv
  3615 ;;		___llmod
  3616 ;;		_sprintf
  3617 ;; This function is called by:
  3618 ;;		_main
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           	psect	text15
  3623  002792                     __ptext15:
  3624                           	opt stack 0
  3625  002792                     _convert_time_to_UTC:
  3626                           	opt stack 25
  3627                           
  3628                           ;GPS.c: 232: unsigned int hour, min, sec;
  3629                           ;GPS.c: 234: hour = (UTC_Time / 10000);
  3630                           
  3631                           ;incstack = 0
  3632  002792  C094  F019         	movff	convert_time_to_UTC@UTC_Time,___lldiv@dividend
  3633  002796  C095  F01A         	movff	convert_time_to_UTC@UTC_Time+1,___lldiv@dividend+1
  3634  00279A  C096  F01B         	movff	convert_time_to_UTC@UTC_Time+2,___lldiv@dividend+2
  3635  00279E  C097  F01C         	movff	convert_time_to_UTC@UTC_Time+3,___lldiv@dividend+3
  3636  0027A2  0E10               	movlw	16
  3637  0027A4  6E1D               	movwf	___lldiv@divisor,c
  3638  0027A6  0E27               	movlw	39
  3639  0027A8  6E1E               	movwf	___lldiv@divisor+1,c
  3640  0027AA  0E00               	movlw	0
  3641  0027AC  6E1F               	movwf	___lldiv@divisor+2,c
  3642  0027AE  0E00               	movlw	0
  3643  0027B0  6E20               	movwf	___lldiv@divisor+3,c
  3644  0027B2  EC7C  F017         	call	___lldiv	;wreg free
  3645  0027B6  C019  F09C         	movff	?___lldiv,convert_time_to_UTC@hour
  3646  0027BA  C01A  F09D         	movff	?___lldiv+1,convert_time_to_UTC@hour+1
  3647                           
  3648                           ;GPS.c: 235: min = (UTC_Time % 10000) / 100;
  3649  0027BE  0E10               	movlw	16
  3650  0027C0  6E14               	movwf	___llmod@divisor,c
  3651  0027C2  0E27               	movlw	39
  3652  0027C4  6E15               	movwf	___llmod@divisor+1,c
  3653  0027C6  0E00               	movlw	0
  3654  0027C8  6E16               	movwf	___llmod@divisor+2,c
  3655  0027CA  0E00               	movlw	0
  3656  0027CC  6E17               	movwf	___llmod@divisor+3,c
  3657  0027CE  C094  F010         	movff	convert_time_to_UTC@UTC_Time,___llmod@dividend
  3658  0027D2  C095  F011         	movff	convert_time_to_UTC@UTC_Time+1,___llmod@dividend+1
  3659  0027D6  C096  F012         	movff	convert_time_to_UTC@UTC_Time+2,___llmod@dividend+2
  3660  0027DA  C097  F013         	movff	convert_time_to_UTC@UTC_Time+3,___llmod@dividend+3
  3661  0027DE  ECE4  F018         	call	___llmod	;wreg free
  3662  0027E2  C010  F019         	movff	?___llmod,___lldiv@dividend
  3663  0027E6  C011  F01A         	movff	?___llmod+1,___lldiv@dividend+1
  3664  0027EA  C012  F01B         	movff	?___llmod+2,___lldiv@dividend+2
  3665  0027EE  C013  F01C         	movff	?___llmod+3,___lldiv@dividend+3
  3666  0027F2  0E64               	movlw	100
  3667  0027F4  6E1D               	movwf	___lldiv@divisor,c
  3668  0027F6  0E00               	movlw	0
  3669  0027F8  6E1E               	movwf	___lldiv@divisor+1,c
  3670  0027FA  0E00               	movlw	0
  3671  0027FC  6E1F               	movwf	___lldiv@divisor+2,c
  3672  0027FE  0E00               	movlw	0
  3673  002800  6E20               	movwf	___lldiv@divisor+3,c
  3674  002802  EC7C  F017         	call	___lldiv	;wreg free
  3675  002806  C019  F09E         	movff	?___lldiv,convert_time_to_UTC@min
  3676  00280A  C01A  F09F         	movff	?___lldiv+1,convert_time_to_UTC@min+1
  3677                           
  3678                           ;GPS.c: 236: sec = (UTC_Time % 10000) % 100;
  3679  00280E  0E10               	movlw	16
  3680  002810  6E14               	movwf	___llmod@divisor,c
  3681  002812  0E27               	movlw	39
  3682  002814  6E15               	movwf	___llmod@divisor+1,c
  3683  002816  0E00               	movlw	0
  3684  002818  6E16               	movwf	___llmod@divisor+2,c
  3685  00281A  0E00               	movlw	0
  3686  00281C  6E17               	movwf	___llmod@divisor+3,c
  3687  00281E  C094  F010         	movff	convert_time_to_UTC@UTC_Time,___llmod@dividend
  3688  002822  C095  F011         	movff	convert_time_to_UTC@UTC_Time+1,___llmod@dividend+1
  3689  002826  C096  F012         	movff	convert_time_to_UTC@UTC_Time+2,___llmod@dividend+2
  3690  00282A  C097  F013         	movff	convert_time_to_UTC@UTC_Time+3,___llmod@dividend+3
  3691  00282E  ECE4  F018         	call	___llmod	;wreg free
  3692  002832  C010  F098         	movff	?___llmod,_convert_time_to_UTC$1182
  3693  002836  C011  F099         	movff	?___llmod+1,_convert_time_to_UTC$1182+1
  3694  00283A  C012  F09A         	movff	?___llmod+2,_convert_time_to_UTC$1182+2
  3695  00283E  C013  F09B         	movff	?___llmod+3,_convert_time_to_UTC$1182+3
  3696                           
  3697                           ;GPS.c: 236: sec = (UTC_Time % 10000) % 100;
  3698  002842  C098  F010         	movff	_convert_time_to_UTC$1182,___llmod@dividend
  3699  002846  C099  F011         	movff	_convert_time_to_UTC$1182+1,___llmod@dividend+1
  3700  00284A  C09A  F012         	movff	_convert_time_to_UTC$1182+2,___llmod@dividend+2
  3701  00284E  C09B  F013         	movff	_convert_time_to_UTC$1182+3,___llmod@dividend+3
  3702  002852  0E64               	movlw	100
  3703  002854  6E14               	movwf	___llmod@divisor,c
  3704  002856  0E00               	movlw	0
  3705  002858  6E15               	movwf	___llmod@divisor+1,c
  3706  00285A  0E00               	movlw	0
  3707  00285C  6E16               	movwf	___llmod@divisor+2,c
  3708  00285E  0E00               	movlw	0
  3709  002860  6E17               	movwf	___llmod@divisor+3,c
  3710  002862  ECE4  F018         	call	___llmod	;wreg free
  3711  002866  C010  F0A0         	movff	?___llmod,convert_time_to_UTC@sec
  3712  00286A  C011  F0A1         	movff	?___llmod+1,convert_time_to_UTC@sec+1
  3713                           
  3714                           ;GPS.c: 238: sprintf(Data_Buffer, "%d:%d:%d", hour,min,sec);
  3715  00286E  0ED7               	movlw	low _Data_Buffer
  3716  002870  0100               	movlb	0	; () banked
  3717  002872  6F69               	movwf	sprintf@sp& (0+255),b
  3718  002874  0E00               	movlw	high _Data_Buffer
  3719  002876  0100               	movlb	0	; () banked
  3720  002878  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  3721  00287A  0E82               	movlw	low STR_13
  3722  00287C  0100               	movlb	0	; () banked
  3723  00287E  6F6B               	movwf	sprintf@f& (0+255),b
  3724  002880  0E08               	movlw	high STR_13
  3725  002882  0100               	movlb	0	; () banked
  3726  002884  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  3727  002886  C09C  F06D         	movff	convert_time_to_UTC@hour,?_sprintf+4
  3728  00288A  C09D  F06E         	movff	convert_time_to_UTC@hour+1,?_sprintf+5
  3729  00288E  C09E  F06F         	movff	convert_time_to_UTC@min,?_sprintf+6
  3730  002892  C09F  F070         	movff	convert_time_to_UTC@min+1,?_sprintf+7
  3731  002896  C0A0  F071         	movff	convert_time_to_UTC@sec,?_sprintf+8
  3732  00289A  C0A1  F072         	movff	convert_time_to_UTC@sec+1,?_sprintf+9
  3733  00289E  EC5A  F004         	call	_sprintf	;wreg free
  3734  0028A2  0012               	return		;funcret
  3735  0028A4                     __end_of_convert_time_to_UTC:
  3736                           	opt stack 0
  3737                           tblptru	equ	0xFF8
  3738                           tblptrh	equ	0xFF7
  3739                           tblptrl	equ	0xFF6
  3740                           tablat	equ	0xFF5
  3741                           prodh	equ	0xFF4
  3742                           prodl	equ	0xFF3
  3743                           intcon	equ	0xFF2
  3744                           postinc0	equ	0xFEE
  3745                           wreg	equ	0xFE8
  3746                           indf1	equ	0xFE7
  3747                           fsr1h	equ	0xFE2
  3748                           fsr1l	equ	0xFE1
  3749                           indf2	equ	0xFDF
  3750                           postinc2	equ	0xFDE
  3751                           postdec2	equ	0xFDD
  3752                           fsr2h	equ	0xFDA
  3753                           fsr2l	equ	0xFD9
  3754                           status	equ	0xFD8
  3755                           
  3756 ;; *************** function _sprintf *****************
  3757 ;; Defined at:
  3758 ;;		line 492 in file "D:\mplab\sources\common\doprnt.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;  sp              2    9[BANK0 ] PTR unsigned char 
  3761 ;;		 -> Data_Buffer(15), main@GPS_Buffer(15), Temperature(10), 
  3762 ;;  f               2   11[BANK0 ] PTR const unsigned char 
  3763 ;;		 -> STR_13(9), STR_12(5), STR_9(6), STR_6(6), 
  3764 ;;		 -> STR_1(8), 
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;  val             4   42[BANK0 ] unsigned long 
  3767 ;;  tmpval          4   38[BANK0 ] struct .
  3768 ;;  fval            3   46[BANK0 ] struct .
  3769 ;;  prec            2   49[BANK0 ] int 
  3770 ;;  exp             2   36[BANK0 ] int 
  3771 ;;  flag            2   34[BANK0 ] unsigned short 
  3772 ;;  ap              2   32[BANK0 ] PTR void [1]
  3773 ;;		 -> ?_sprintf(2), 
  3774 ;;  len             2   30[BANK0 ] unsigned int 
  3775 ;;  cp              2   28[BANK0 ] PTR const unsigned char 
  3776 ;;		 -> sprintf@c(1), 
  3777 ;;  width           2    0        int 
  3778 ;;  c               1   51[BANK0 ] char 
  3779 ;;  d               1    0        unsigned char 
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  2    9[BANK0 ] int 
  3782 ;; Registers used:
  3783 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3789 ;;      Params:         0      10       0       0       0       0       0       0       0
  3790 ;;      Locals:         0      27       0       0       0       0       0       0       0
  3791 ;;      Temps:          0       6       0       0       0       0       0       0       0
  3792 ;;      Totals:         0      43       0       0       0       0       0       0       0
  3793 ;;Total ram usage:       43 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:    4
  3796 ;; This function calls:
  3797 ;;		___awdiv
  3798 ;;		___ftadd
  3799 ;;		___ftge
  3800 ;;		___ftmul
  3801 ;;		___ftneg
  3802 ;;		___ftsub
  3803 ;;		___fttol
  3804 ;;		___lldiv
  3805 ;;		___llmod
  3806 ;;		___lltoft
  3807 ;;		___wmul
  3808 ;;		__div_to_l_
  3809 ;;		__tdiv_to_l_
  3810 ;;		_fround
  3811 ;;		_isdigit
  3812 ;;		_scale
  3813 ;; This function is called by:
  3814 ;;		_main
  3815 ;;		_convert_time_to_UTC
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           	psect	text16
  3820  0008B4                     __ptext16:
  3821                           	opt stack 0
  3822  0008B4                     _sprintf:
  3823                           	opt stack 26
  3824                           
  3825                           ;doprnt.c: 494: va_list ap;
  3826                           ;doprnt.c: 499: signed char c;
  3827                           ;doprnt.c: 501: int width;
  3828                           ;doprnt.c: 504: int prec;
  3829                           ;doprnt.c: 508: unsigned short flag;
  3830                           ;doprnt.c: 515: char d;
  3831                           ;doprnt.c: 516: double fval;
  3832                           ;doprnt.c: 517: int exp;
  3833                           ;doprnt.c: 523: union {
  3834                           ;doprnt.c: 524: unsigned long vd;
  3835                           ;doprnt.c: 525: double integ;
  3836                           ;doprnt.c: 526: } tmpval;
  3837                           ;doprnt.c: 528: unsigned long val;
  3838                           ;doprnt.c: 529: unsigned len;
  3839                           ;doprnt.c: 530: const char * cp;
  3840                           ;doprnt.c: 533: *ap = __va_start();
  3841                           
  3842                           ;incstack = 0
  3843  0008B4  0E6D               	movlw	low (?_sprintf+4)
  3844  0008B6  0100               	movlb	0	; () banked
  3845  0008B8  6F80               	movwf	sprintf@ap& (0+255),b
  3846  0008BA  0E00               	movlw	high (?_sprintf+4)
  3847  0008BC  0100               	movlb	0	; () banked
  3848  0008BE  6F81               	movwf	(sprintf@ap+1)& (0+255),b
  3849                           
  3850                           ;doprnt.c: 536: while(c = *f++) {
  3851  0008C0  EF30  F009         	goto	l4858
  3852  0008C4                     l4606:
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;doprnt.c: 538: if(c != '%')
  3856  0008C4  0E25               	movlw	37
  3857  0008C6  0100               	movlb	0	; () banked
  3858  0008C8  1993               	xorwf	sprintf@c& (0+255),w,b
  3859  0008CA  B4D8               	btfsc	status,2,c
  3860  0008CC  D00B               	goto	l4612
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;doprnt.c: 540: {
  3864                           ;doprnt.c: 541: ((*sp++ = (c)));
  3865  0008CE  C069  FFD9         	movff	sprintf@sp,fsr2l
  3866  0008D2  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  3867  0008D6  C093  FFDF         	movff	sprintf@c,indf2
  3868                           
  3869                           ; BSR set to: 0
  3870  0008DA  0100               	movlb	0	; () banked
  3871  0008DC  4B69               	infsnz	sprintf@sp& (0+255),f,b
  3872  0008DE  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  3873                           
  3874                           ;doprnt.c: 542: continue;
  3875  0008E0  EF30  F009         	goto	l4858
  3876  0008E4                     l4612:
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;doprnt.c: 543: }
  3880                           ;doprnt.c: 548: flag = 0;
  3881  0008E4  0E00               	movlw	0
  3882  0008E6  0100               	movlb	0	; () banked
  3883  0008E8  6F83               	movwf	(sprintf@flag+1)& (0+255),b
  3884  0008EA  0E00               	movlw	0
  3885  0008EC  6F82               	movwf	sprintf@flag& (0+255),b
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;doprnt.c: 611: if(*f == '.') {
  3889  0008EE  C06B  FFF6         	movff	sprintf@f,tblptrl
  3890  0008F2  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3891  0008F6                     	if	0	;tblptru may be non-zero
  3892  0008F6                     	endif
  3893  0008F6                     	if	0	;tblptru may be non-zero
  3894  0008F6                     	endif
  3895  0008F6  0008               	tblrd		*
  3896  0008F8  50F5               	movf	tablat,w,c
  3897  0008FA  0A2E               	xorlw	46
  3898  0008FC  A4D8               	btfss	status,2,c
  3899  0008FE  D034               	goto	l4626
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;doprnt.c: 612: flag |= 0x4000;
  3903  000900  0100               	movlb	0	; () banked
  3904  000902  8D83               	bsf	(sprintf@flag+1)& (0+255),6,b
  3905                           
  3906                           ;doprnt.c: 613: f++;
  3907  000904  0100               	movlb	0	; () banked
  3908  000906  4B6B               	infsnz	sprintf@f& (0+255),f,b
  3909  000908  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;doprnt.c: 620: {
  3913                           ;doprnt.c: 621: prec = 0;
  3914  00090A  0E00               	movlw	0
  3915  00090C  0100               	movlb	0	; () banked
  3916  00090E  6F92               	movwf	(sprintf@prec+1)& (0+255),b
  3917  000910  0E00               	movlw	0
  3918  000912  6F91               	movwf	sprintf@prec& (0+255),b
  3919                           
  3920                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3921  000914  D01E               	goto	l4624
  3922  000916                     l4620:
  3923                           
  3924                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3925  000916  C091  F01E         	movff	sprintf@prec,___wmul@multiplier
  3926  00091A  C092  F01F         	movff	sprintf@prec+1,___wmul@multiplier+1
  3927  00091E  0E00               	movlw	0
  3928  000920  6E21               	movwf	___wmul@multiplicand+1,c
  3929  000922  0E0A               	movlw	10
  3930  000924  6E20               	movwf	___wmul@multiplicand,c
  3931  000926  ECC9  F01A         	call	___wmul	;wreg free
  3932  00092A  C06B  FFF6         	movff	sprintf@f,tblptrl
  3933  00092E  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3934  000932                     	if	0	;tblptru may be non-zero
  3935  000932                     	endif
  3936  000932                     	if	0	;tblptru may be non-zero
  3937  000932                     	endif
  3938  000932  0008               	tblrd		*
  3939  000934  50F5               	movf	tablat,w,c
  3940  000936  261E               	addwf	?___wmul,f,c
  3941  000938  0E00               	movlw	0
  3942  00093A  221F               	addwfc	?___wmul+1,f,c
  3943  00093C  0ED0               	movlw	208
  3944  00093E  241E               	addwf	?___wmul,w,c
  3945  000940  0100               	movlb	0	; () banked
  3946  000942  6F91               	movwf	sprintf@prec& (0+255),b
  3947  000944  0EFF               	movlw	255
  3948  000946  201F               	addwfc	?___wmul+1,w,c
  3949  000948  0100               	movlb	0	; () banked
  3950  00094A  6F92               	movwf	(sprintf@prec+1)& (0+255),b
  3951                           
  3952                           ; BSR set to: 0
  3953  00094C  0100               	movlb	0	; () banked
  3954  00094E  4B6B               	infsnz	sprintf@f& (0+255),f,b
  3955  000950  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  3956  000952                     l4624:
  3957                           
  3958                           ; BSR set to: 0
  3959  000952  C06B  FFF6         	movff	sprintf@f,tblptrl
  3960  000956  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3961  00095A                     	if	0	;tblptru may be non-zero
  3962  00095A                     	endif
  3963  00095A                     	if	0	;tblptru may be non-zero
  3964  00095A                     	endif
  3965  00095A  0008               	tblrd		*
  3966  00095C  50F5               	movf	tablat,w,c
  3967  00095E  EC11  F01B         	call	_isdigit
  3968  000962  A0D8               	btfss	status,0,c
  3969  000964  D056               	goto	l4656
  3970  000966  D7D7               	goto	l4620
  3971  000968                     l4626:
  3972                           
  3973                           ;doprnt.c: 626: prec = 0;
  3974  000968  0E00               	movlw	0
  3975  00096A  0100               	movlb	0	; () banked
  3976  00096C  6F92               	movwf	(sprintf@prec+1)& (0+255),b
  3977  00096E  0E00               	movlw	0
  3978  000970  6F91               	movwf	sprintf@prec& (0+255),b
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;doprnt.c: 628: flag |= 0x1000;
  3982  000972  0100               	movlb	0	; () banked
  3983  000974  8983               	bsf	(sprintf@flag+1)& (0+255),4,b
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;doprnt.c: 630: }
  3987                           ;doprnt.c: 635: switch(c = *f++) {
  3988  000976  D04D               	goto	l4656
  3989  000978                     l4630:
  3990                           
  3991                           ; BSR set to: 0
  3992                           ;doprnt.c: 663: flag |= 0x400;
  3993  000978  0100               	movlb	0	; () banked
  3994  00097A  8583               	bsf	(sprintf@flag+1)& (0+255),2,b
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;doprnt.c: 698: case 'i':
  3998                           ;doprnt.c: 699: break;
  3999                           
  4000                           ; BSR set to: 0
  4001                           
  4002                           ;doprnt.c: 697: case 'd':
  4003                           
  4004                           ;doprnt.c: 664: break;
  4005  00097C  D066               	goto	l4658
  4006  00097E                     l4632:
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;doprnt.c: 753: if(prec && prec < len)
  4010  00097E  0100               	movlb	0	; () banked
  4011  000980  5191               	movf	sprintf@prec& (0+255),w,b
  4012  000982  0100               	movlb	0	; () banked
  4013  000984  1192               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4014  000986  B4D8               	btfsc	status,2,c
  4015  000988  D01F               	goto	l4644
  4016                           
  4017                           ; BSR set to: 0
  4018  00098A  0100               	movlb	0	; () banked
  4019  00098C  517E               	movf	sprintf@len& (0+255),w,b
  4020  00098E  0100               	movlb	0	; () banked
  4021  000990  5D91               	subwf	sprintf@prec& (0+255),w,b
  4022  000992  0100               	movlb	0	; () banked
  4023  000994  517F               	movf	(sprintf@len+1)& (0+255),w,b
  4024  000996  0100               	movlb	0	; () banked
  4025  000998  5992               	subwfb	(sprintf@prec+1)& (0+255),w,b
  4026  00099A  B0D8               	btfsc	status,0,c
  4027  00099C  D015               	goto	l4644
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;doprnt.c: 754: len = prec;
  4031  00099E  C091  F07E         	movff	sprintf@prec,sprintf@len
  4032  0009A2  C092  F07F         	movff	sprintf@prec+1,sprintf@len+1
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;doprnt.c: 767: while(len--)
  4036  0009A6  D010               	goto	l4644
  4037  0009A8                     l4638:
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  4041  0009A8  C07C  FFD9         	movff	sprintf@cp,fsr2l
  4042  0009AC  C07D  FFDA         	movff	sprintf@cp+1,fsr2h
  4043  0009B0  C069  FFE1         	movff	sprintf@sp,fsr1l
  4044  0009B4  C06A  FFE2         	movff	sprintf@sp+1,fsr1h
  4045  0009B8  CFDF FFE7          	movff	indf2,indf1
  4046                           
  4047                           ; BSR set to: 0
  4048  0009BC  0100               	movlb	0	; () banked
  4049  0009BE  4B7C               	infsnz	sprintf@cp& (0+255),f,b
  4050  0009C0  2B7D               	incf	(sprintf@cp+1)& (0+255),f,b
  4051                           
  4052                           ; BSR set to: 0
  4053  0009C2  0100               	movlb	0	; () banked
  4054  0009C4  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4055  0009C6  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4056  0009C8                     l4644:
  4057                           
  4058                           ; BSR set to: 0
  4059  0009C8  0100               	movlb	0	; () banked
  4060  0009CA  077E               	decf	sprintf@len& (0+255),f,b
  4061  0009CC  A0D8               	btfss	status,0,c
  4062  0009CE  077F               	decf	(sprintf@len+1)& (0+255),f,b
  4063  0009D0  0100               	movlb	0	; () banked
  4064  0009D2  297E               	incf	sprintf@len& (0+255),w,b
  4065  0009D4  E1E9               	bnz	l4638
  4066  0009D6  0100               	movlb	0	; () banked
  4067  0009D8  297F               	incf	(sprintf@len+1)& (0+255),w,b
  4068  0009DA  B4D8               	btfsc	status,2,c
  4069  0009DC  EF30  F009         	goto	l4858
  4070  0009E0  D7E3               	goto	l4638
  4071  0009E2                     l4646:
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4075  0009E2  C080  FFD9         	movff	sprintf@ap,fsr2l
  4076  0009E6  C081  FFDA         	movff	sprintf@ap+1,fsr2h
  4077  0009EA  50DF               	movf	indf2,w,c
  4078  0009EC  0100               	movlb	0	; () banked
  4079  0009EE  6F93               	movwf	sprintf@c& (0+255),b
  4080                           
  4081                           ; BSR set to: 0
  4082  0009F0  0E02               	movlw	2
  4083  0009F2  0100               	movlb	0	; () banked
  4084  0009F4  2780               	addwf	sprintf@ap& (0+255),f,b
  4085  0009F6  0E00               	movlw	0
  4086  0009F8  2381               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4087  0009FA                     l4650:
  4088                           
  4089                           ; BSR set to: 0
  4090                           ;doprnt.c: 805: cp = (char *)&c;
  4091  0009FA  0E93               	movlw	low sprintf@c
  4092  0009FC  0100               	movlb	0	; () banked
  4093  0009FE  6F7C               	movwf	sprintf@cp& (0+255),b
  4094  000A00  0E00               	movlw	high sprintf@c
  4095  000A02  0100               	movlb	0	; () banked
  4096  000A04  6F7D               	movwf	(sprintf@cp+1)& (0+255),b
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;doprnt.c: 806: len = 1;
  4100  000A06  0E00               	movlw	0
  4101  000A08  0100               	movlb	0	; () banked
  4102  000A0A  6F7F               	movwf	(sprintf@len+1)& (0+255),b
  4103  000A0C  0E01               	movlw	1
  4104  000A0E  6F7E               	movwf	sprintf@len& (0+255),b
  4105                           
  4106                           ;doprnt.c: 807: goto dostring;
  4107  000A10  D7B6               	goto	l4632
  4108  000A12                     l4656:
  4109  000A12  C06B  FFF6         	movff	sprintf@f,tblptrl
  4110  000A16  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  4111  000A1A  0100               	movlb	0	; () banked
  4112  000A1C  4B6B               	infsnz	sprintf@f& (0+255),f,b
  4113  000A1E  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  4114  000A20                     	if	0	;tblptru may be non-zero
  4115  000A20                     	endif
  4116  000A20                     	if	0	;tblptru may be non-zero
  4117  000A20                     	endif
  4118  000A20  0008               	tblrd		*
  4119  000A22  CFF5 F093          	movff	tablat,sprintf@c
  4120  000A26  0100               	movlb	0	; () banked
  4121  000A28  5193               	movf	sprintf@c& (0+255),w,b
  4122                           
  4123                           ; Switch size 1, requested type "space"
  4124                           ; Number of cases is 5, Range of values is 0 to 105
  4125                           ; switch strategies available:
  4126                           ; Name         Instructions Cycles
  4127                           ; simple_byte           16     9 (average)
  4128                           ;	Chosen strategy is simple_byte
  4129  000A2A  0A00               	xorlw	0	; case 0
  4130  000A2C  B4D8               	btfsc	status,2,c
  4131  000A2E  EF3F  F009         	goto	l4860
  4132  000A32  0A63               	xorlw	99	; case 99
  4133  000A34  B4D8               	btfsc	status,2,c
  4134  000A36  D7D5               	goto	l4646
  4135  000A38  0A07               	xorlw	7	; case 100
  4136  000A3A  B4D8               	btfsc	status,2,c
  4137  000A3C  D006               	goto	l4658
  4138  000A3E  0A02               	xorlw	2	; case 102
  4139  000A40  B4D8               	btfsc	status,2,c
  4140  000A42  D79A               	goto	l4630
  4141  000A44  0A0F               	xorlw	15	; case 105
  4142  000A46  A4D8               	btfss	status,2,c
  4143  000A48  D7D8               	goto	l4650
  4144  000A4A                     l4658:
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;doprnt.c: 825: if(flag & (0x700)) {
  4148  000A4A  0E07               	movlw	7
  4149  000A4C  0100               	movlb	0	; () banked
  4150  000A4E  1583               	andwf	(sprintf@flag+1)& (0+255),w,b
  4151  000A50  B4D8               	btfsc	status,2,c
  4152  000A52  D315               	goto	l4806
  4153                           
  4154                           ; BSR set to: 0
  4155                           ;doprnt.c: 827: if(flag & 0x1000)
  4156  000A54  0100               	movlb	0	; () banked
  4157  000A56  A983               	btfss	(sprintf@flag+1)& (0+255),4,b
  4158  000A58  D005               	goto	l4664
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;doprnt.c: 829: prec = 6;
  4162  000A5A  0E00               	movlw	0
  4163  000A5C  0100               	movlb	0	; () banked
  4164  000A5E  6F92               	movwf	(sprintf@prec+1)& (0+255),b
  4165  000A60  0E06               	movlw	6
  4166  000A62  6F91               	movwf	sprintf@prec& (0+255),b
  4167  000A64                     l4664:
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4171  000A64  C080  FFD9         	movff	sprintf@ap,fsr2l
  4172  000A68  C081  FFDA         	movff	sprintf@ap+1,fsr2h
  4173  000A6C  CFDE F08E          	movff	postinc2,sprintf@fval
  4174  000A70  CFDE F08F          	movff	postinc2,sprintf@fval+1
  4175  000A74  CFDD F090          	movff	postdec2,sprintf@fval+2
  4176                           
  4177                           ; BSR set to: 0
  4178  000A78  0E03               	movlw	3
  4179  000A7A  0100               	movlb	0	; () banked
  4180  000A7C  2780               	addwf	sprintf@ap& (0+255),f,b
  4181  000A7E  0E00               	movlw	0
  4182  000A80  2381               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;doprnt.c: 831: if(fval < 0.0) {
  4186  000A82  0100               	movlb	0	; () banked
  4187  000A84  AF90               	btfss	(sprintf@fval+2)& (0+255),7,b
  4188  000A86  D011               	goto	l4674
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;doprnt.c: 832: fval = -fval;
  4192  000A88  C08E  F033         	movff	sprintf@fval,___ftneg@f1
  4193  000A8C  C08F  F034         	movff	sprintf@fval+1,___ftneg@f1+1
  4194  000A90  C090  F035         	movff	sprintf@fval+2,___ftneg@f1+2
  4195  000A94  ECDC  F01A         	call	___ftneg	;wreg free
  4196  000A98  C033  F08E         	movff	?___ftneg,sprintf@fval
  4197  000A9C  C034  F08F         	movff	?___ftneg+1,sprintf@fval+1
  4198  000AA0  C035  F090         	movff	?___ftneg+2,sprintf@fval+2
  4199                           
  4200                           ;doprnt.c: 833: flag |= 0x03;
  4201  000AA4  0E03               	movlw	3
  4202  000AA6  0100               	movlb	0	; () banked
  4203  000AA8  1382               	iorwf	sprintf@flag& (0+255),f,b
  4204  000AAA                     l4674:
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;doprnt.c: 834: }
  4208                           ;doprnt.c: 835: exp = 0;
  4209  000AAA  0E00               	movlw	0
  4210  000AAC  0100               	movlb	0	; () banked
  4211  000AAE  6F85               	movwf	(sprintf@exp+1)& (0+255),b
  4212  000AB0  0E00               	movlw	0
  4213  000AB2  6F84               	movwf	sprintf@exp& (0+255),b
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;doprnt.c: 836: if( fval!=0) {
  4217  000AB4  0100               	movlb	0	; () banked
  4218  000AB6  518E               	movf	sprintf@fval& (0+255),w,b
  4219  000AB8  0100               	movlb	0	; () banked
  4220  000ABA  118F               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4221  000ABC  0100               	movlb	0	; () banked
  4222  000ABE  1190               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4223  000AC0  B4D8               	btfsc	status,2,c
  4224  000AC2  D091               	goto	l4702
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4228  000AC4  0E82               	movlw	130
  4229  000AC6  0100               	movlb	0	; () banked
  4230  000AC8  6F73               	movwf	??_sprintf& (0+255),b
  4231  000ACA  0EFF               	movlw	255
  4232  000ACC  0100               	movlb	0	; () banked
  4233  000ACE  6F74               	movwf	(??_sprintf+1)& (0+255),b
  4234  000AD0  C08E  F075         	movff	sprintf@fval,??_sprintf+2
  4235  000AD4  C08F  F076         	movff	sprintf@fval+1,??_sprintf+3
  4236  000AD8  C090  F077         	movff	sprintf@fval+2,??_sprintf+4
  4237  000ADC  C091  F078         	movff	sprintf@fval+3,??_sprintf+5
  4238  000AE0  0E10               	movlw	16
  4239  000AE2  D006               	goto	u5510
  4240  000AE4                     u5515:
  4241  000AE4  0100               	movlb	0	; () banked
  4242  000AE6  90D8               	bcf	status,0,c
  4243  000AE8  3378               	rrcf	(??_sprintf+5)& (0+255),f,b
  4244  000AEA  3377               	rrcf	(??_sprintf+4)& (0+255),f,b
  4245  000AEC  3376               	rrcf	(??_sprintf+3)& (0+255),f,b
  4246  000AEE  3375               	rrcf	(??_sprintf+2)& (0+255),f,b
  4247  000AF0                     u5510:
  4248  000AF0  2EE8               	decfsz	wreg,f,c
  4249  000AF2  D7F8               	goto	u5515
  4250  000AF4  0100               	movlb	0	; () banked
  4251  000AF6  5175               	movf	(??_sprintf+2)& (0+255),w,b
  4252  000AF8  0100               	movlb	0	; () banked
  4253  000AFA  2573               	addwf	??_sprintf& (0+255),w,b
  4254  000AFC  0100               	movlb	0	; () banked
  4255  000AFE  6F84               	movwf	sprintf@exp& (0+255),b
  4256  000B00  0E00               	movlw	0
  4257  000B02  0100               	movlb	0	; () banked
  4258  000B04  2174               	addwfc	(??_sprintf+1)& (0+255),w,b
  4259  000B06  0100               	movlb	0	; () banked
  4260  000B08  6F85               	movwf	(sprintf@exp+1)& (0+255),b
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;doprnt.c: 838: exp--;
  4264  000B0A  0100               	movlb	0	; () banked
  4265  000B0C  0784               	decf	sprintf@exp& (0+255),f,b
  4266  000B0E  A0D8               	btfss	status,0,c
  4267  000B10  0785               	decf	(sprintf@exp+1)& (0+255),f,b
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;doprnt.c: 839: exp *= 3;
  4271  000B12  C084  F01E         	movff	sprintf@exp,___wmul@multiplier
  4272  000B16  C085  F01F         	movff	sprintf@exp+1,___wmul@multiplier+1
  4273  000B1A  0E00               	movlw	0
  4274  000B1C  6E21               	movwf	___wmul@multiplicand+1,c
  4275  000B1E  0E03               	movlw	3
  4276  000B20  6E20               	movwf	___wmul@multiplicand,c
  4277  000B22  ECC9  F01A         	call	___wmul	;wreg free
  4278  000B26  C01E  F084         	movff	?___wmul,sprintf@exp
  4279  000B2A  C01F  F085         	movff	?___wmul+1,sprintf@exp+1
  4280                           
  4281                           ;doprnt.c: 840: exp /= 10;
  4282  000B2E  C084  F016         	movff	sprintf@exp,___awdiv@dividend
  4283  000B32  C085  F017         	movff	sprintf@exp+1,___awdiv@dividend+1
  4284  000B36  0E00               	movlw	0
  4285  000B38  6E19               	movwf	___awdiv@divisor+1,c
  4286  000B3A  0E0A               	movlw	10
  4287  000B3C  6E18               	movwf	___awdiv@divisor,c
  4288  000B3E  EC3A  F017         	call	___awdiv	;wreg free
  4289  000B42  C016  F084         	movff	?___awdiv,sprintf@exp
  4290  000B46  C017  F085         	movff	?___awdiv+1,sprintf@exp+1
  4291                           
  4292                           ;doprnt.c: 841: if(exp < 0)
  4293  000B4A  0100               	movlb	0	; () banked
  4294  000B4C  AF85               	btfss	(sprintf@exp+1)& (0+255),7,b
  4295  000B4E  D004               	goto	l4690
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;doprnt.c: 842: exp--;
  4299  000B50  0100               	movlb	0	; () banked
  4300  000B52  0784               	decf	sprintf@exp& (0+255),f,b
  4301  000B54  A0D8               	btfss	status,0,c
  4302  000B56  0785               	decf	(sprintf@exp+1)& (0+255),f,b
  4303  000B58                     l4690:
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4307  000B58  0100               	movlb	0	; () banked
  4308  000B5A  5184               	movf	sprintf@exp& (0+255),w,b
  4309  000B5C  0800               	sublw	0
  4310  000B5E  EC46  F009         	call	_scale
  4311  000B62  C033  F086         	movff	?_scale,sprintf@tmpval
  4312  000B66  C034  F087         	movff	?_scale+1,sprintf@tmpval+1
  4313  000B6A  C035  F088         	movff	?_scale+2,sprintf@tmpval+2
  4314                           
  4315                           ;doprnt.c: 847: tmpval.integ *= fval;
  4316  000B6E  C086  F024         	movff	sprintf@tmpval,___ftmul@f1
  4317  000B72  C087  F025         	movff	sprintf@tmpval+1,___ftmul@f1+1
  4318  000B76  C088  F026         	movff	sprintf@tmpval+2,___ftmul@f1+2
  4319  000B7A  C08E  F027         	movff	sprintf@fval,___ftmul@f2
  4320  000B7E  C08F  F028         	movff	sprintf@fval+1,___ftmul@f2+1
  4321  000B82  C090  F029         	movff	sprintf@fval+2,___ftmul@f2+2
  4322  000B86  ECCE  F014         	call	___ftmul	;wreg free
  4323  000B8A  C024  F086         	movff	?___ftmul,sprintf@tmpval
  4324  000B8E  C025  F087         	movff	?___ftmul+1,sprintf@tmpval+1
  4325  000B92  C026  F088         	movff	?___ftmul+2,sprintf@tmpval+2
  4326                           
  4327                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4328  000B96  C086  F010         	movff	sprintf@tmpval,___ftge@ff1
  4329  000B9A  C087  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4330  000B9E  C088  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4331  000BA2  0E00               	movlw	0
  4332  000BA4  6E13               	movwf	___ftge@ff2,c
  4333  000BA6  0E80               	movlw	128
  4334  000BA8  6E14               	movwf	___ftge@ff2+1,c
  4335  000BAA  0E3F               	movlw	63
  4336  000BAC  6E15               	movwf	___ftge@ff2+2,c
  4337  000BAE  ECB0  F016         	call	___ftge	;wreg free
  4338  000BB2  B0D8               	btfsc	status,0,c
  4339  000BB4  D005               	goto	l4698
  4340                           
  4341                           ;doprnt.c: 849: exp--;
  4342  000BB6  0100               	movlb	0	; () banked
  4343  000BB8  0784               	decf	sprintf@exp& (0+255),f,b
  4344  000BBA  A0D8               	btfss	status,0,c
  4345  000BBC  0785               	decf	(sprintf@exp+1)& (0+255),f,b
  4346  000BBE  D013               	goto	l4702
  4347  000BC0                     l4698:
  4348                           
  4349                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4350  000BC0  C086  F010         	movff	sprintf@tmpval,___ftge@ff1
  4351  000BC4  C087  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4352  000BC8  C088  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4353  000BCC  0E00               	movlw	0
  4354  000BCE  6E13               	movwf	___ftge@ff2,c
  4355  000BD0  0E20               	movlw	32
  4356  000BD2  6E14               	movwf	___ftge@ff2+1,c
  4357  000BD4  0E41               	movlw	65
  4358  000BD6  6E15               	movwf	___ftge@ff2+2,c
  4359  000BD8  ECB0  F016         	call	___ftge	;wreg free
  4360  000BDC  A0D8               	btfss	status,0,c
  4361  000BDE  D003               	goto	l4702
  4362                           
  4363                           ;doprnt.c: 851: exp++;
  4364  000BE0  0100               	movlb	0	; () banked
  4365  000BE2  4B84               	infsnz	sprintf@exp& (0+255),f,b
  4366  000BE4  2B85               	incf	(sprintf@exp+1)& (0+255),f,b
  4367  000BE6                     l4702:
  4368                           
  4369                           ;doprnt.c: 852: }
  4370                           ;doprnt.c: 1112: if(prec <= 12)
  4371  000BE6  0100               	movlb	0	; () banked
  4372  000BE8  BF92               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4373  000BEA  D008               	goto	l4704
  4374  000BEC  0100               	movlb	0	; () banked
  4375  000BEE  5192               	movf	(sprintf@prec+1)& (0+255),w,b
  4376  000BF0  E11D               	bnz	l4706
  4377  000BF2  0E0D               	movlw	13
  4378  000BF4  0100               	movlb	0	; () banked
  4379  000BF6  5D91               	subwf	sprintf@prec& (0+255),w,b
  4380  000BF8  B0D8               	btfsc	status,0,c
  4381  000BFA  D018               	goto	l4706
  4382  000BFC                     l4704:
  4383                           
  4384                           ; BSR set to: 0
  4385                           ;doprnt.c: 1113: fval += fround(prec);
  4386  000BFC  C08E  F03D         	movff	sprintf@fval,___ftadd@f1
  4387  000C00  C08F  F03E         	movff	sprintf@fval+1,___ftadd@f1+1
  4388  000C04  C090  F03F         	movff	sprintf@fval+2,___ftadd@f1+2
  4389  000C08  0100               	movlb	0	; () banked
  4390  000C0A  5191               	movf	sprintf@prec& (0+255),w,b
  4391  000C0C  ECC7  F00E         	call	_fround
  4392  000C10  C033  F040         	movff	?_fround,___ftadd@f2
  4393  000C14  C034  F041         	movff	?_fround+1,___ftadd@f2+1
  4394  000C18  C035  F042         	movff	?_fround+2,___ftadd@f2+2
  4395  000C1C  ECEA  F00F         	call	___ftadd	;wreg free
  4396  000C20  C03D  F08E         	movff	?___ftadd,sprintf@fval
  4397  000C24  C03E  F08F         	movff	?___ftadd+1,sprintf@fval+1
  4398  000C28  C03F  F090         	movff	?___ftadd+2,sprintf@fval+2
  4399  000C2C                     l4706:
  4400                           
  4401                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4402  000C2C  0100               	movlb	0	; () banked
  4403  000C2E  BF85               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4404  000C30  D008               	goto	l4708
  4405  000C32  0100               	movlb	0	; () banked
  4406  000C34  5185               	movf	(sprintf@exp+1)& (0+255),w,b
  4407  000C36  E126               	bnz	l4714
  4408  000C38  0E0A               	movlw	10
  4409  000C3A  0100               	movlb	0	; () banked
  4410  000C3C  5D84               	subwf	sprintf@exp& (0+255),w,b
  4411  000C3E  B0D8               	btfsc	status,0,c
  4412  000C40  D021               	goto	l4714
  4413  000C42                     l4708:
  4414                           
  4415                           ; BSR set to: 0
  4416  000C42  0100               	movlb	0	; () banked
  4417  000C44  518E               	movf	sprintf@fval& (0+255),w,b
  4418  000C46  0100               	movlb	0	; () banked
  4419  000C48  118F               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4420  000C4A  0100               	movlb	0	; () banked
  4421  000C4C  1190               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4422  000C4E  B4D8               	btfsc	status,2,c
  4423  000C50  D05B               	goto	l4728
  4424                           
  4425                           ; BSR set to: 0
  4426  000C52  C08E  F03A         	movff	sprintf@fval,___fttol@f1
  4427  000C56  C08F  F03B         	movff	sprintf@fval+1,___fttol@f1+1
  4428  000C5A  C090  F03C         	movff	sprintf@fval+2,___fttol@f1+2
  4429  000C5E  ECB1  F012         	call	___fttol	;wreg free
  4430  000C62  503A               	movf	?___fttol,w,c
  4431  000C64  103B               	iorwf	?___fttol+1,w,c
  4432  000C66  103C               	iorwf	?___fttol+2,w,c
  4433  000C68  103D               	iorwf	?___fttol+3,w,c
  4434  000C6A  A4D8               	btfss	status,2,c
  4435  000C6C  D04D               	goto	l4728
  4436  000C6E  0100               	movlb	0	; () banked
  4437  000C70  BF85               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4438  000C72  D04A               	goto	l4728
  4439  000C74  0100               	movlb	0	; () banked
  4440  000C76  5185               	movf	(sprintf@exp+1)& (0+255),w,b
  4441  000C78  E105               	bnz	l4714
  4442  000C7A  0E02               	movlw	2
  4443  000C7C  0100               	movlb	0	; () banked
  4444  000C7E  5D84               	subwf	sprintf@exp& (0+255),w,b
  4445  000C80  A0D8               	btfss	status,0,c
  4446  000C82  D042               	goto	l4728
  4447  000C84                     l4714:
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4451  000C84  C086  F010         	movff	sprintf@tmpval,___ftge@ff1
  4452  000C88  C087  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4453  000C8C  C088  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4454  000C90  0E70               	movlw	112
  4455  000C92  6E13               	movwf	___ftge@ff2,c
  4456  000C94  0E89               	movlw	137
  4457  000C96  6E14               	movwf	___ftge@ff2+1,c
  4458  000C98  0E40               	movlw	64
  4459  000C9A  6E15               	movwf	___ftge@ff2+2,c
  4460  000C9C  ECB0  F016         	call	___ftge	;wreg free
  4461  000CA0  B0D8               	btfsc	status,0,c
  4462  000CA2  D003               	goto	l4718
  4463                           
  4464                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4465  000CA4  0100               	movlb	0	; () banked
  4466  000CA6  0EF7               	movlw	247
  4467  000CA8  D002               	goto	L1
  4468  000CAA                     l4718:
  4469                           
  4470                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4471  000CAA  0100               	movlb	0	; () banked
  4472  000CAC  0EF8               	movlw	248
  4473  000CAE                     L1:
  4474  000CAE  2784               	addwf	sprintf@exp& (0+255),f,b
  4475  000CB0  0EFF               	movlw	255
  4476  000CB2  2385               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;doprnt.c: 1124: }
  4480                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  4481                           
  4482                           ; BSR set to: 0
  4483  000CB4  0100               	movlb	0	; () banked
  4484  000CB6  5184               	movf	sprintf@exp& (0+255),w,b
  4485  000CB8  EC46  F009         	call	_scale
  4486  000CBC  C033  F086         	movff	?_scale,sprintf@tmpval
  4487  000CC0  C034  F087         	movff	?_scale+1,sprintf@tmpval+1
  4488  000CC4  C035  F088         	movff	?_scale+2,sprintf@tmpval+2
  4489                           
  4490                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4491  000CC8  C08E  F010         	movff	sprintf@fval,__tdiv_to_l_@f1
  4492  000CCC  C08F  F011         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4493  000CD0  C090  F012         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4494  000CD4  C086  F013         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  4495  000CD8  C087  F014         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  4496  000CDC  C088  F015         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  4497  000CE0  EC84  F011         	call	__tdiv_to_l_	;wreg free
  4498  000CE4  C010  F08A         	movff	?__tdiv_to_l_,sprintf@val
  4499  000CE8  C011  F08B         	movff	?__tdiv_to_l_+1,sprintf@val+1
  4500  000CEC  C012  F08C         	movff	?__tdiv_to_l_+2,sprintf@val+2
  4501  000CF0  C013  F08D         	movff	?__tdiv_to_l_+3,sprintf@val+3
  4502                           
  4503                           ;doprnt.c: 1129: fval = 0.0;
  4504  000CF4  0E00               	movlw	0
  4505  000CF6  0100               	movlb	0	; () banked
  4506  000CF8  6F8E               	movwf	sprintf@fval& (0+255),b
  4507  000CFA  0E00               	movlw	0
  4508  000CFC  0100               	movlb	0	; () banked
  4509  000CFE  6F8F               	movwf	(sprintf@fval+1)& (0+255),b
  4510  000D00  0E00               	movlw	0
  4511  000D02  0100               	movlb	0	; () banked
  4512  000D04  6F90               	movwf	(sprintf@fval+2)& (0+255),b
  4513                           
  4514                           ;doprnt.c: 1130: } else {
  4515  000D06  D033               	goto	l4732
  4516  000D08                     l4728:
  4517                           
  4518                           ;doprnt.c: 1131: val = (unsigned long)fval;
  4519  000D08  C08E  F03A         	movff	sprintf@fval,___fttol@f1
  4520  000D0C  C08F  F03B         	movff	sprintf@fval+1,___fttol@f1+1
  4521  000D10  C090  F03C         	movff	sprintf@fval+2,___fttol@f1+2
  4522  000D14  ECB1  F012         	call	___fttol	;wreg free
  4523  000D18  C03A  F08A         	movff	?___fttol,sprintf@val
  4524  000D1C  C03B  F08B         	movff	?___fttol+1,sprintf@val+1
  4525  000D20  C03C  F08C         	movff	?___fttol+2,sprintf@val+2
  4526  000D24  C03D  F08D         	movff	?___fttol+3,sprintf@val+3
  4527                           
  4528                           ;doprnt.c: 1132: fval -= (double)val;
  4529  000D28  C08E  F063         	movff	sprintf@fval,___ftsub@f1
  4530  000D2C  C08F  F064         	movff	sprintf@fval+1,___ftsub@f1+1
  4531  000D30  C090  F065         	movff	sprintf@fval+2,___ftsub@f1+2
  4532  000D34  C08A  F018         	movff	sprintf@val,___lltoft@c
  4533  000D38  C08B  F019         	movff	sprintf@val+1,___lltoft@c+1
  4534  000D3C  C08C  F01A         	movff	sprintf@val+2,___lltoft@c+2
  4535  000D40  C08D  F01B         	movff	sprintf@val+3,___lltoft@c+3
  4536  000D44  EC17  F019         	call	___lltoft	;wreg free
  4537  000D48  C018  F066         	movff	?___lltoft,___ftsub@f2
  4538  000D4C  C019  F067         	movff	?___lltoft+1,___ftsub@f2+1
  4539  000D50  C01A  F068         	movff	?___lltoft+2,___ftsub@f2+2
  4540  000D54  ECF3  F019         	call	___ftsub	;wreg free
  4541  000D58  C063  F08E         	movff	?___ftsub,sprintf@fval
  4542  000D5C  C064  F08F         	movff	?___ftsub+1,sprintf@fval+1
  4543  000D60  C065  F090         	movff	?___ftsub+2,sprintf@fval+2
  4544                           
  4545                           ;doprnt.c: 1133: exp = 0;
  4546  000D64  0E00               	movlw	0
  4547  000D66  0100               	movlb	0	; () banked
  4548  000D68  6F85               	movwf	(sprintf@exp+1)& (0+255),b
  4549  000D6A  0E00               	movlw	0
  4550  000D6C  6F84               	movwf	sprintf@exp& (0+255),b
  4551  000D6E                     l4732:
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;doprnt.c: 1134: }
  4555                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4556  000D6E  0E01               	movlw	1
  4557  000D70  0100               	movlb	0	; () banked
  4558  000D72  6F93               	movwf	sprintf@c& (0+255),b
  4559  000D74                     l4734:
  4560                           
  4561                           ; BSR set to: 0
  4562  000D74  0E0A               	movlw	10
  4563  000D76  0100               	movlb	0	; () banked
  4564  000D78  1993               	xorwf	sprintf@c& (0+255),w,b
  4565  000D7A  B4D8               	btfsc	status,2,c
  4566  000D7C  D01E               	goto	l4746
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;doprnt.c: 1137: if(val < dpowers[c])
  4570                           
  4571                           ; BSR set to: 0
  4572                           
  4573                           ; BSR set to: 0
  4574  000D7E  0100               	movlb	0	; () banked
  4575  000D80  5193               	movf	sprintf@c& (0+255),w,b
  4576  000D82  0D04               	mullw	4
  4577  000D84  0E01               	movlw	low _dpowers
  4578  000D86  24F3               	addwf	prodl,w,c
  4579  000D88  6EF6               	movwf	tblptrl,c
  4580  000D8A  0E08               	movlw	high _dpowers
  4581  000D8C  20F4               	addwfc	prodh,w,c
  4582  000D8E  6EF7               	movwf	tblptrh,c
  4583  000D90                     	if	0	;There are less than 3 active tblptr bytes
  4584  000D90                     	endif
  4585  000D90  0009               	tblrd		*+
  4586  000D92  50F5               	movf	tablat,w,c
  4587  000D94  0100               	movlb	0	; () banked
  4588  000D96  5D8A               	subwf	sprintf@val& (0+255),w,b
  4589  000D98  0009               	tblrd		*+
  4590  000D9A  50F5               	movf	tablat,w,c
  4591  000D9C  0100               	movlb	0	; () banked
  4592  000D9E  598B               	subwfb	(sprintf@val+1)& (0+255),w,b
  4593  000DA0  0009               	tblrd		*+
  4594  000DA2  50F5               	movf	tablat,w,c
  4595  000DA4  0100               	movlb	0	; () banked
  4596  000DA6  598C               	subwfb	(sprintf@val+2)& (0+255),w,b
  4597  000DA8  0009               	tblrd		*+
  4598  000DAA  50F5               	movf	tablat,w,c
  4599  000DAC  0100               	movlb	0	; () banked
  4600  000DAE  598D               	subwfb	(sprintf@val+3)& (0+255),w,b
  4601  000DB0  A0D8               	btfss	status,0,c
  4602  000DB2  D003               	goto	l4746
  4603                           
  4604                           ; BSR set to: 0
  4605                           
  4606                           ; BSR set to: 0
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;doprnt.c: 1138: break;
  4610  000DB4  0100               	movlb	0	; () banked
  4611  000DB6  2B93               	incf	sprintf@c& (0+255),f,b
  4612  000DB8  D7DD               	goto	l4734
  4613  000DBA                     l4746:
  4614                           
  4615                           ; BSR set to: 0
  4616                           ;doprnt.c: 1175: {
  4617                           ;doprnt.c: 1188: if(flag & 0x03)
  4618  000DBA  0E03               	movlw	3
  4619  000DBC  0100               	movlb	0	; () banked
  4620  000DBE  1582               	andwf	sprintf@flag& (0+255),w,b
  4621  000DC0  0100               	movlb	0	; () banked
  4622  000DC2  6F73               	movwf	??_sprintf& (0+255),b
  4623  000DC4  0E00               	movlw	0
  4624  000DC6  0100               	movlb	0	; () banked
  4625  000DC8  1583               	andwf	(sprintf@flag+1)& (0+255),w,b
  4626  000DCA  0100               	movlb	0	; () banked
  4627  000DCC  6F74               	movwf	(??_sprintf+1)& (0+255),b
  4628  000DCE  0100               	movlb	0	; () banked
  4629  000DD0  5173               	movf	??_sprintf& (0+255),w,b
  4630  000DD2  0100               	movlb	0	; () banked
  4631  000DD4  1174               	iorwf	(??_sprintf+1)& (0+255),w,b
  4632  000DD6  B4D8               	btfsc	status,2,c
  4633  000DD8  D054               	goto	l4760
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4637  000DDA  C069  FFD9         	movff	sprintf@sp,fsr2l
  4638  000DDE  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4639  000DE2  0E2D               	movlw	45
  4640  000DE4  D04C               	goto	L2
  4641  000DE6                     l4750:
  4642                           
  4643                           ; BSR set to: 0
  4644  000DE6  0100               	movlb	0	; () banked
  4645  000DE8  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4646  000DEA  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;doprnt.c: 1195: }
  4650                           ;doprnt.c: 1196: while(c--) {
  4651  000DEC  D04A               	goto	l4760
  4652  000DEE                     l4752:
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;doprnt.c: 1200: {
  4656                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4657  000DEE  C08A  F019         	movff	sprintf@val,___lldiv@dividend
  4658  000DF2  C08B  F01A         	movff	sprintf@val+1,___lldiv@dividend+1
  4659  000DF6  C08C  F01B         	movff	sprintf@val+2,___lldiv@dividend+2
  4660  000DFA  C08D  F01C         	movff	sprintf@val+3,___lldiv@dividend+3
  4661  000DFE  0100               	movlb	0	; () banked
  4662  000E00  5193               	movf	sprintf@c& (0+255),w,b
  4663  000E02  0D04               	mullw	4
  4664  000E04  0E01               	movlw	low _dpowers
  4665  000E06  24F3               	addwf	prodl,w,c
  4666  000E08  6EF6               	movwf	tblptrl,c
  4667  000E0A  0E08               	movlw	high _dpowers
  4668  000E0C  20F4               	addwfc	prodh,w,c
  4669  000E0E  6EF7               	movwf	tblptrh,c
  4670  000E10                     	if	0	;There are less than 3 active tblptr bytes
  4671  000E10                     	endif
  4672  000E10  0009               	tblrd		*+
  4673  000E12  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4674  000E16  0009               	tblrd		*+
  4675  000E18  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4676  000E1C  0009               	tblrd		*+
  4677  000E1E  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4678  000E22  000A               	tblrd		*-
  4679  000E24  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4680  000E28  EC7C  F017         	call	___lldiv	;wreg free
  4681  000E2C  C019  F086         	movff	?___lldiv,sprintf@tmpval
  4682  000E30  C01A  F087         	movff	?___lldiv+1,sprintf@tmpval+1
  4683  000E34  C01B  F088         	movff	?___lldiv+2,sprintf@tmpval+2
  4684  000E38  C01C  F089         	movff	?___lldiv+3,sprintf@tmpval+3
  4685                           
  4686                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4687  000E3C  C086  F010         	movff	sprintf@tmpval,___llmod@dividend
  4688  000E40  C087  F011         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4689  000E44  C088  F012         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4690  000E48  C089  F013         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4691  000E4C  0E0A               	movlw	10
  4692  000E4E  6E14               	movwf	___llmod@divisor,c
  4693  000E50  0E00               	movlw	0
  4694  000E52  6E15               	movwf	___llmod@divisor+1,c
  4695  000E54  0E00               	movlw	0
  4696  000E56  6E16               	movwf	___llmod@divisor+2,c
  4697  000E58  0E00               	movlw	0
  4698  000E5A  6E17               	movwf	___llmod@divisor+3,c
  4699  000E5C  ECE4  F018         	call	___llmod	;wreg free
  4700  000E60  C010  F086         	movff	?___llmod,sprintf@tmpval
  4701  000E64  C011  F087         	movff	?___llmod+1,sprintf@tmpval+1
  4702  000E68  C012  F088         	movff	?___llmod+2,sprintf@tmpval+2
  4703  000E6C  C013  F089         	movff	?___llmod+3,sprintf@tmpval+3
  4704                           
  4705                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4706  000E70  0100               	movlb	0	; () banked
  4707  000E72  5186               	movf	sprintf@tmpval& (0+255),w,b
  4708  000E74  0F30               	addlw	48
  4709  000E76  C069  FFD9         	movff	sprintf@sp,fsr2l
  4710  000E7A  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4711  000E7E                     L2:
  4712  000E7E  6EDF               	movwf	indf2,c
  4713  000E80  D7B2               	goto	l4750
  4714  000E82                     l4760:
  4715                           
  4716                           ; BSR set to: 0
  4717  000E82  0100               	movlb	0	; () banked
  4718  000E84  0793               	decf	sprintf@c& (0+255),f,b
  4719  000E86  0100               	movlb	0	; () banked
  4720  000E88  2993               	incf	sprintf@c& (0+255),w,b
  4721  000E8A  B4D8               	btfsc	status,2,c
  4722  000E8C  D00E               	goto	l4768
  4723  000E8E  D7AF               	goto	l4752
  4724  000E90                     l4762:
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4728  000E90  C069  FFD9         	movff	sprintf@sp,fsr2l
  4729  000E94  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4730  000E98  0E30               	movlw	48
  4731  000E9A  6EDF               	movwf	indf2,c
  4732                           
  4733                           ; BSR set to: 0
  4734  000E9C  0100               	movlb	0	; () banked
  4735  000E9E  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4736  000EA0  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;doprnt.c: 1209: exp--;
  4740  000EA2  0100               	movlb	0	; () banked
  4741  000EA4  0784               	decf	sprintf@exp& (0+255),f,b
  4742  000EA6  A0D8               	btfss	status,0,c
  4743  000EA8  0785               	decf	(sprintf@exp+1)& (0+255),f,b
  4744  000EAA                     l4768:
  4745                           
  4746                           ; BSR set to: 0
  4747  000EAA  0100               	movlb	0	; () banked
  4748  000EAC  BF85               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4749  000EAE  D007               	goto	l4770
  4750  000EB0  0100               	movlb	0	; () banked
  4751  000EB2  5185               	movf	(sprintf@exp+1)& (0+255),w,b
  4752  000EB4  E1ED               	bnz	l4762
  4753  000EB6  0100               	movlb	0	; () banked
  4754  000EB8  0584               	decf	sprintf@exp& (0+255),w,b
  4755  000EBA  B0D8               	btfsc	status,0,c
  4756  000EBC  D7E9               	goto	l4762
  4757  000EBE                     l4770:
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;doprnt.c: 1210: }
  4761                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4762  000EBE  0100               	movlb	0	; () banked
  4763  000EC0  BF92               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4764  000EC2  D00C               	goto	l342
  4765  000EC4  0100               	movlb	0	; () banked
  4766  000EC6  5192               	movf	(sprintf@prec+1)& (0+255),w,b
  4767  000EC8  E105               	bnz	u5670
  4768  000ECA  0E09               	movlw	9
  4769  000ECC  0100               	movlb	0	; () banked
  4770  000ECE  5D91               	subwf	sprintf@prec& (0+255),w,b
  4771  000ED0  A0D8               	btfss	status,0,c
  4772  000ED2  D004               	goto	l342
  4773  000ED4                     u5670:
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4777  000ED4  0E08               	movlw	8
  4778  000ED6  0100               	movlb	0	; () banked
  4779  000ED8  6F93               	movwf	sprintf@c& (0+255),b
  4780  000EDA  D002               	goto	l4774
  4781  000EDC                     l342:
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;doprnt.c: 1213: else
  4785                           ;doprnt.c: 1214: c = prec;
  4786  000EDC  C091  F093         	movff	sprintf@prec,sprintf@c
  4787  000EE0                     l4774:
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;doprnt.c: 1215: prec -= c;
  4791  000EE0  0100               	movlb	0	; () banked
  4792  000EE2  5193               	movf	sprintf@c& (0+255),w,b
  4793  000EE4  0100               	movlb	0	; () banked
  4794  000EE6  5F91               	subwf	sprintf@prec& (0+255),f,b
  4795  000EE8  0E00               	movlw	0
  4796  000EEA  0100               	movlb	0	; () banked
  4797  000EEC  BF93               	btfsc	sprintf@c& (0+255),7,b
  4798  000EEE  0EFF               	movlw	255
  4799  000EF0  0100               	movlb	0	; () banked
  4800  000EF2  5B92               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;doprnt.c: 1219: if(c)
  4804  000EF4  0100               	movlb	0	; () banked
  4805  000EF6  5193               	movf	sprintf@c& (0+255),w,b
  4806  000EF8  0100               	movlb	0	; () banked
  4807  000EFA  B4D8               	btfsc	status,2,c
  4808  000EFC  D009               	goto	l4782
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4812  000EFE  C069  FFD9         	movff	sprintf@sp,fsr2l
  4813  000F02  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4814  000F06  0E2E               	movlw	46
  4815  000F08  6EDF               	movwf	indf2,c
  4816                           
  4817                           ; BSR set to: 0
  4818  000F0A  0100               	movlb	0	; () banked
  4819  000F0C  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4820  000F0E  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4821  000F10                     l4782:
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4825  000F10  0100               	movlb	0	; () banked
  4826  000F12  5193               	movf	sprintf@c& (0+255),w,b
  4827  000F14  EC46  F009         	call	_scale
  4828  000F18  C033  F079         	movff	?_scale,_sprintf$1186
  4829  000F1C  C034  F07A         	movff	?_scale+1,_sprintf$1186+1
  4830  000F20  C035  F07B         	movff	?_scale+2,_sprintf$1186+2
  4831                           
  4832                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4833  000F24  C08E  F027         	movff	sprintf@fval,___ftmul@f2
  4834  000F28  C08F  F028         	movff	sprintf@fval+1,___ftmul@f2+1
  4835  000F2C  C090  F029         	movff	sprintf@fval+2,___ftmul@f2+2
  4836  000F30  C079  F024         	movff	_sprintf$1186,___ftmul@f1
  4837  000F34  C07A  F025         	movff	_sprintf$1186+1,___ftmul@f1+1
  4838  000F38  C07B  F026         	movff	_sprintf$1186+2,___ftmul@f1+2
  4839  000F3C  ECCE  F014         	call	___ftmul	;wreg free
  4840  000F40  C024  F03A         	movff	?___ftmul,___fttol@f1
  4841  000F44  C025  F03B         	movff	?___ftmul+1,___fttol@f1+1
  4842  000F48  C026  F03C         	movff	?___ftmul+2,___fttol@f1+2
  4843  000F4C  ECB1  F012         	call	___fttol	;wreg free
  4844  000F50  C03A  F08A         	movff	?___fttol,sprintf@val
  4845  000F54  C03B  F08B         	movff	?___fttol+1,sprintf@val+1
  4846  000F58  C03C  F08C         	movff	?___fttol+2,sprintf@val+2
  4847  000F5C  C03D  F08D         	movff	?___fttol+3,sprintf@val+3
  4848                           
  4849                           ;doprnt.c: 1228: while(c--) {
  4850  000F60  D073               	goto	l4796
  4851  000F62                     l4786:
  4852                           
  4853                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4854  000F62  C08A  F019         	movff	sprintf@val,___lldiv@dividend
  4855  000F66  C08B  F01A         	movff	sprintf@val+1,___lldiv@dividend+1
  4856  000F6A  C08C  F01B         	movff	sprintf@val+2,___lldiv@dividend+2
  4857  000F6E  C08D  F01C         	movff	sprintf@val+3,___lldiv@dividend+3
  4858  000F72  0100               	movlb	0	; () banked
  4859  000F74  5193               	movf	sprintf@c& (0+255),w,b
  4860  000F76  0D04               	mullw	4
  4861  000F78  0E01               	movlw	low _dpowers
  4862  000F7A  24F3               	addwf	prodl,w,c
  4863  000F7C  6EF6               	movwf	tblptrl,c
  4864  000F7E  0E08               	movlw	high _dpowers
  4865  000F80  20F4               	addwfc	prodh,w,c
  4866  000F82  6EF7               	movwf	tblptrh,c
  4867  000F84                     	if	0	;There are less than 3 active tblptr bytes
  4868  000F84                     	endif
  4869  000F84  0009               	tblrd		*+
  4870  000F86  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4871  000F8A  0009               	tblrd		*+
  4872  000F8C  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4873  000F90  0009               	tblrd		*+
  4874  000F92  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4875  000F96  000A               	tblrd		*-
  4876  000F98  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4877  000F9C  EC7C  F017         	call	___lldiv	;wreg free
  4878  000FA0  C019  F086         	movff	?___lldiv,sprintf@tmpval
  4879  000FA4  C01A  F087         	movff	?___lldiv+1,sprintf@tmpval+1
  4880  000FA8  C01B  F088         	movff	?___lldiv+2,sprintf@tmpval+2
  4881  000FAC  C01C  F089         	movff	?___lldiv+3,sprintf@tmpval+3
  4882                           
  4883                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4884  000FB0  C086  F010         	movff	sprintf@tmpval,___llmod@dividend
  4885  000FB4  C087  F011         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4886  000FB8  C088  F012         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4887  000FBC  C089  F013         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4888  000FC0  0E0A               	movlw	10
  4889  000FC2  6E14               	movwf	___llmod@divisor,c
  4890  000FC4  0E00               	movlw	0
  4891  000FC6  6E15               	movwf	___llmod@divisor+1,c
  4892  000FC8  0E00               	movlw	0
  4893  000FCA  6E16               	movwf	___llmod@divisor+2,c
  4894  000FCC  0E00               	movlw	0
  4895  000FCE  6E17               	movwf	___llmod@divisor+3,c
  4896  000FD0  ECE4  F018         	call	___llmod	;wreg free
  4897  000FD4  C010  F086         	movff	?___llmod,sprintf@tmpval
  4898  000FD8  C011  F087         	movff	?___llmod+1,sprintf@tmpval+1
  4899  000FDC  C012  F088         	movff	?___llmod+2,sprintf@tmpval+2
  4900  000FE0  C013  F089         	movff	?___llmod+3,sprintf@tmpval+3
  4901                           
  4902                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4903  000FE4  0100               	movlb	0	; () banked
  4904  000FE6  5186               	movf	sprintf@tmpval& (0+255),w,b
  4905  000FE8  0F30               	addlw	48
  4906  000FEA  C069  FFD9         	movff	sprintf@sp,fsr2l
  4907  000FEE  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4908  000FF2  6EDF               	movwf	indf2,c
  4909                           
  4910                           ; BSR set to: 0
  4911  000FF4  0100               	movlb	0	; () banked
  4912  000FF6  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4913  000FF8  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;doprnt.c: 1232: val %= dpowers[c];
  4917  000FFA  C08A  F010         	movff	sprintf@val,___llmod@dividend
  4918  000FFE  C08B  F011         	movff	sprintf@val+1,___llmod@dividend+1
  4919  001002  C08C  F012         	movff	sprintf@val+2,___llmod@dividend+2
  4920  001006  C08D  F013         	movff	sprintf@val+3,___llmod@dividend+3
  4921  00100A  0100               	movlb	0	; () banked
  4922  00100C  5193               	movf	sprintf@c& (0+255),w,b
  4923  00100E  0D04               	mullw	4
  4924  001010  0E01               	movlw	low _dpowers
  4925  001012  24F3               	addwf	prodl,w,c
  4926  001014  6EF6               	movwf	tblptrl,c
  4927  001016  0E08               	movlw	high _dpowers
  4928  001018  20F4               	addwfc	prodh,w,c
  4929  00101A  6EF7               	movwf	tblptrh,c
  4930  00101C                     	if	0	;There are less than 3 active tblptr bytes
  4931  00101C                     	endif
  4932  00101C  0009               	tblrd		*+
  4933  00101E  CFF5 F014          	movff	tablat,___llmod@divisor
  4934  001022  0009               	tblrd		*+
  4935  001024  CFF5 F015          	movff	tablat,___llmod@divisor+1
  4936  001028  0009               	tblrd		*+
  4937  00102A  CFF5 F016          	movff	tablat,___llmod@divisor+2
  4938  00102E  000A               	tblrd		*-
  4939  001030  CFF5 F017          	movff	tablat,___llmod@divisor+3
  4940  001034  ECE4  F018         	call	___llmod	;wreg free
  4941  001038  C010  F08A         	movff	?___llmod,sprintf@val
  4942  00103C  C011  F08B         	movff	?___llmod+1,sprintf@val+1
  4943  001040  C012  F08C         	movff	?___llmod+2,sprintf@val+2
  4944  001044  C013  F08D         	movff	?___llmod+3,sprintf@val+3
  4945  001048                     l4796:
  4946  001048  0100               	movlb	0	; () banked
  4947  00104A  0793               	decf	sprintf@c& (0+255),f,b
  4948  00104C  0100               	movlb	0	; () banked
  4949  00104E  2993               	incf	sprintf@c& (0+255),w,b
  4950  001050  B4D8               	btfsc	status,2,c
  4951  001052  D00E               	goto	l4804
  4952  001054  D786               	goto	l4786
  4953  001056                     l4798:
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4957  001056  C069  FFD9         	movff	sprintf@sp,fsr2l
  4958  00105A  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4959  00105E  0E30               	movlw	48
  4960  001060  6EDF               	movwf	indf2,c
  4961                           
  4962                           ; BSR set to: 0
  4963  001062  0100               	movlb	0	; () banked
  4964  001064  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4965  001066  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;doprnt.c: 1237: prec--;
  4969  001068  0100               	movlb	0	; () banked
  4970  00106A  0791               	decf	sprintf@prec& (0+255),f,b
  4971  00106C  A0D8               	btfss	status,0,c
  4972  00106E  0792               	decf	(sprintf@prec+1)& (0+255),f,b
  4973  001070                     l4804:
  4974                           
  4975                           ; BSR set to: 0
  4976  001070  0100               	movlb	0	; () banked
  4977  001072  5191               	movf	sprintf@prec& (0+255),w,b
  4978  001074  0100               	movlb	0	; () banked
  4979  001076  1192               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4980  001078  B4D8               	btfsc	status,2,c
  4981  00107A  D0F2               	goto	l4858
  4982  00107C  D7EC               	goto	l4798
  4983  00107E                     l4806:
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;doprnt.c: 1246: }
  4987                           ;doprnt.c: 1253: {
  4988                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4989  00107E  C080  FFD9         	movff	sprintf@ap,fsr2l
  4990  001082  C081  FFDA         	movff	sprintf@ap+1,fsr2h
  4991  001086  CFDE F08A          	movff	postinc2,sprintf@val
  4992  00108A  CFDD F08B          	movff	postdec2,sprintf@val+1
  4993  00108E  0100               	movlb	0	; () banked
  4994  001090  0E00               	movlw	0
  4995  001092  BF8B               	btfsc	(sprintf@val+1)& (0+255),7,b
  4996  001094  0EFF               	movlw	-1
  4997  001096  6F8C               	movwf	(sprintf@val+2)& (0+255),b
  4998  001098  6F8D               	movwf	(sprintf@val+3)& (0+255),b
  4999                           
  5000                           ; BSR set to: 0
  5001  00109A  0E02               	movlw	2
  5002  00109C  0100               	movlb	0	; () banked
  5003  00109E  2780               	addwf	sprintf@ap& (0+255),f,b
  5004  0010A0  0E00               	movlw	0
  5005  0010A2  2381               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;doprnt.c: 1261: if((long)val < 0) {
  5009  0010A4  0100               	movlb	0	; () banked
  5010  0010A6  AF8D               	btfss	(sprintf@val+3)& (0+255),7,b
  5011  0010A8  D00C               	goto	l4816
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;doprnt.c: 1262: flag |= 0x03;
  5015  0010AA  0E03               	movlw	3
  5016  0010AC  0100               	movlb	0	; () banked
  5017  0010AE  1382               	iorwf	sprintf@flag& (0+255),f,b
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;doprnt.c: 1263: val = -val;
  5021  0010B0  0100               	movlb	0	; () banked
  5022  0010B2  1F8D               	comf	(sprintf@val+3)& (0+255),f,b
  5023  0010B4  1F8C               	comf	(sprintf@val+2)& (0+255),f,b
  5024  0010B6  1F8B               	comf	(sprintf@val+1)& (0+255),f,b
  5025  0010B8  6D8A               	negf	sprintf@val& (0+255),b
  5026  0010BA  0E00               	movlw	0
  5027  0010BC  238B               	addwfc	(sprintf@val+1)& (0+255),f,b
  5028  0010BE  238C               	addwfc	(sprintf@val+2)& (0+255),f,b
  5029  0010C0  238D               	addwfc	(sprintf@val+3)& (0+255),f,b
  5030  0010C2                     l4816:
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;doprnt.c: 1264: }
  5034                           ;doprnt.c: 1266: }
  5035                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5036  0010C2  0100               	movlb	0	; () banked
  5037  0010C4  5191               	movf	sprintf@prec& (0+255),w,b
  5038  0010C6  0100               	movlb	0	; () banked
  5039  0010C8  1192               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5040  0010CA  A4D8               	btfss	status,2,c
  5041  0010CC  D00D               	goto	l4822
  5042                           
  5043                           ; BSR set to: 0
  5044  0010CE  0100               	movlb	0	; () banked
  5045  0010D0  518A               	movf	sprintf@val& (0+255),w,b
  5046  0010D2  0100               	movlb	0	; () banked
  5047  0010D4  118B               	iorwf	(sprintf@val+1)& (0+255),w,b
  5048  0010D6  0100               	movlb	0	; () banked
  5049  0010D8  118C               	iorwf	(sprintf@val+2)& (0+255),w,b
  5050  0010DA  0100               	movlb	0	; () banked
  5051  0010DC  118D               	iorwf	(sprintf@val+3)& (0+255),w,b
  5052  0010DE  A4D8               	btfss	status,2,c
  5053  0010E0  D003               	goto	l4822
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;doprnt.c: 1291: prec++;
  5057  0010E2  0100               	movlb	0	; () banked
  5058  0010E4  4B91               	infsnz	sprintf@prec& (0+255),f,b
  5059  0010E6  2B92               	incf	(sprintf@prec+1)& (0+255),f,b
  5060  0010E8                     l4822:
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5064  0010E8  0E01               	movlw	1
  5065  0010EA  0100               	movlb	0	; () banked
  5066  0010EC  6F93               	movwf	sprintf@c& (0+255),b
  5067  0010EE                     l4824:
  5068                           
  5069                           ; BSR set to: 0
  5070  0010EE  0E0A               	movlw	10
  5071  0010F0  0100               	movlb	0	; () banked
  5072  0010F2  1993               	xorwf	sprintf@c& (0+255),w,b
  5073  0010F4  B4D8               	btfsc	status,2,c
  5074  0010F6  D01E               	goto	l4836
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;doprnt.c: 1306: if(val < dpowers[c])
  5078                           
  5079                           ; BSR set to: 0
  5080                           
  5081                           ; BSR set to: 0
  5082  0010F8  0100               	movlb	0	; () banked
  5083  0010FA  5193               	movf	sprintf@c& (0+255),w,b
  5084  0010FC  0D04               	mullw	4
  5085  0010FE  0E01               	movlw	low _dpowers
  5086  001100  24F3               	addwf	prodl,w,c
  5087  001102  6EF6               	movwf	tblptrl,c
  5088  001104  0E08               	movlw	high _dpowers
  5089  001106  20F4               	addwfc	prodh,w,c
  5090  001108  6EF7               	movwf	tblptrh,c
  5091  00110A                     	if	0	;There are less than 3 active tblptr bytes
  5092  00110A                     	endif
  5093  00110A  0009               	tblrd		*+
  5094  00110C  50F5               	movf	tablat,w,c
  5095  00110E  0100               	movlb	0	; () banked
  5096  001110  5D8A               	subwf	sprintf@val& (0+255),w,b
  5097  001112  0009               	tblrd		*+
  5098  001114  50F5               	movf	tablat,w,c
  5099  001116  0100               	movlb	0	; () banked
  5100  001118  598B               	subwfb	(sprintf@val+1)& (0+255),w,b
  5101  00111A  0009               	tblrd		*+
  5102  00111C  50F5               	movf	tablat,w,c
  5103  00111E  0100               	movlb	0	; () banked
  5104  001120  598C               	subwfb	(sprintf@val+2)& (0+255),w,b
  5105  001122  0009               	tblrd		*+
  5106  001124  50F5               	movf	tablat,w,c
  5107  001126  0100               	movlb	0	; () banked
  5108  001128  598D               	subwfb	(sprintf@val+3)& (0+255),w,b
  5109  00112A  A0D8               	btfss	status,0,c
  5110  00112C  D003               	goto	l4836
  5111                           
  5112                           ; BSR set to: 0
  5113                           
  5114                           ; BSR set to: 0
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;doprnt.c: 1307: break;
  5118  00112E  0100               	movlb	0	; () banked
  5119  001130  2B93               	incf	sprintf@c& (0+255),f,b
  5120  001132  D7DD               	goto	l4824
  5121  001134                     l4836:
  5122                           
  5123                           ; BSR set to: 0
  5124                           ;doprnt.c: 1339: if(c < prec)
  5125  001134  0E80               	movlw	128
  5126  001136  0100               	movlb	0	; () banked
  5127  001138  BF93               	btfsc	sprintf@c& (0+255),7,b
  5128  00113A  0E7F               	movlw	127
  5129  00113C  0100               	movlb	0	; () banked
  5130  00113E  6F73               	movwf	??_sprintf& (0+255),b
  5131  001140  0100               	movlb	0	; () banked
  5132  001142  5191               	movf	sprintf@prec& (0+255),w,b
  5133  001144  0100               	movlb	0	; () banked
  5134  001146  5D93               	subwf	sprintf@c& (0+255),w,b
  5135  001148  0100               	movlb	0	; () banked
  5136  00114A  5192               	movf	(sprintf@prec+1)& (0+255),w,b
  5137  00114C  0A80               	xorlw	128
  5138  00114E  0100               	movlb	0	; () banked
  5139  001150  5973               	subwfb	??_sprintf& (0+255),w,b
  5140  001152  B0D8               	btfsc	status,0,c
  5141  001154  D003               	goto	l4840
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;doprnt.c: 1340: c = prec;
  5145  001156  C091  F093         	movff	sprintf@prec,sprintf@c
  5146  00115A  D018               	goto	l4844
  5147  00115C                     l4840:
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;doprnt.c: 1341: else if(prec < c)
  5151  00115C  0100               	movlb	0	; () banked
  5152  00115E  5192               	movf	(sprintf@prec+1)& (0+255),w,b
  5153  001160  0A80               	xorlw	128
  5154  001162  0100               	movlb	0	; () banked
  5155  001164  6F73               	movwf	??_sprintf& (0+255),b
  5156  001166  0100               	movlb	0	; () banked
  5157  001168  5193               	movf	sprintf@c& (0+255),w,b
  5158  00116A  0100               	movlb	0	; () banked
  5159  00116C  5D91               	subwf	sprintf@prec& (0+255),w,b
  5160  00116E  0E80               	movlw	128
  5161  001170  0100               	movlb	0	; () banked
  5162  001172  BF93               	btfsc	sprintf@c& (0+255),7,b
  5163  001174  0E7F               	movlw	127
  5164  001176  0100               	movlb	0	; () banked
  5165  001178  5973               	subwfb	??_sprintf& (0+255),w,b
  5166  00117A  B0D8               	btfsc	status,0,c
  5167  00117C  D007               	goto	l4844
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;doprnt.c: 1342: prec = c;
  5171  00117E  0100               	movlb	0	; () banked
  5172  001180  5193               	movf	sprintf@c& (0+255),w,b
  5173  001182  0100               	movlb	0	; () banked
  5174  001184  6F91               	movwf	sprintf@prec& (0+255),b
  5175  001186  6B92               	clrf	(sprintf@prec+1)& (0+255),b
  5176  001188  BF91               	btfsc	sprintf@prec& (0+255),7,b
  5177  00118A  0792               	decf	(sprintf@prec+1)& (0+255),f,b
  5178  00118C                     l4844:
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;doprnt.c: 1422: {
  5182                           ;doprnt.c: 1438: if(flag & 0x03)
  5183  00118C  0E03               	movlw	3
  5184  00118E  0100               	movlb	0	; () banked
  5185  001190  1582               	andwf	sprintf@flag& (0+255),w,b
  5186  001192  0100               	movlb	0	; () banked
  5187  001194  6F73               	movwf	??_sprintf& (0+255),b
  5188  001196  0E00               	movlw	0
  5189  001198  0100               	movlb	0	; () banked
  5190  00119A  1583               	andwf	(sprintf@flag+1)& (0+255),w,b
  5191  00119C  0100               	movlb	0	; () banked
  5192  00119E  6F74               	movwf	(??_sprintf+1)& (0+255),b
  5193  0011A0  0100               	movlb	0	; () banked
  5194  0011A2  5173               	movf	??_sprintf& (0+255),w,b
  5195  0011A4  0100               	movlb	0	; () banked
  5196  0011A6  1174               	iorwf	(??_sprintf+1)& (0+255),w,b
  5197  0011A8  B4D8               	btfsc	status,2,c
  5198  0011AA  D04F               	goto	l4856
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5202  0011AC  C069  FFD9         	movff	sprintf@sp,fsr2l
  5203  0011B0  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  5204  0011B4  0E2D               	movlw	45
  5205  0011B6  6EDF               	movwf	indf2,c
  5206  0011B8  D045               	goto	l4854
  5207  0011BA                     l4850:
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;doprnt.c: 1478: {
  5211                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5212  0011BA  C091  F073         	movff	sprintf@prec,??_sprintf
  5213  0011BE  C092  F074         	movff	sprintf@prec+1,??_sprintf+1
  5214  0011C2  0100               	movlb	0	; () banked
  5215  0011C4  90D8               	bcf	status,0,c
  5216  0011C6  3773               	rlcf	??_sprintf& (0+255),f,b
  5217  0011C8  3774               	rlcf	(??_sprintf+1)& (0+255),f,b
  5218  0011CA  0100               	movlb	0	; () banked
  5219  0011CC  90D8               	bcf	status,0,c
  5220  0011CE  3773               	rlcf	??_sprintf& (0+255),f,b
  5221  0011D0  3774               	rlcf	(??_sprintf+1)& (0+255),f,b
  5222  0011D2  0E01               	movlw	low _dpowers
  5223  0011D4  0100               	movlb	0	; () banked
  5224  0011D6  2573               	addwf	??_sprintf& (0+255),w,b
  5225  0011D8  6EF6               	movwf	tblptrl,c
  5226  0011DA  0E08               	movlw	high _dpowers
  5227  0011DC  2174               	addwfc	(??_sprintf+1)& (0+255),w,b
  5228  0011DE  6EF7               	movwf	tblptrh,c
  5229  0011E0                     	if	0	;There are less than 3 active tblptr bytes
  5230  0011E0                     	endif
  5231  0011E0  0009               	tblrd		*+
  5232  0011E2  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5233  0011E6  0009               	tblrd		*+
  5234  0011E8  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5235  0011EC  0009               	tblrd		*+
  5236  0011EE  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5237  0011F2  000A               	tblrd		*-
  5238  0011F4  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5239  0011F8  C08A  F019         	movff	sprintf@val,___lldiv@dividend
  5240  0011FC  C08B  F01A         	movff	sprintf@val+1,___lldiv@dividend+1
  5241  001200  C08C  F01B         	movff	sprintf@val+2,___lldiv@dividend+2
  5242  001204  C08D  F01C         	movff	sprintf@val+3,___lldiv@dividend+3
  5243  001208  EC7C  F017         	call	___lldiv	;wreg free
  5244  00120C  C019  F010         	movff	?___lldiv,___llmod@dividend
  5245  001210  C01A  F011         	movff	?___lldiv+1,___llmod@dividend+1
  5246  001214  C01B  F012         	movff	?___lldiv+2,___llmod@dividend+2
  5247  001218  C01C  F013         	movff	?___lldiv+3,___llmod@dividend+3
  5248  00121C  0E0A               	movlw	10
  5249  00121E  6E14               	movwf	___llmod@divisor,c
  5250  001220  0E00               	movlw	0
  5251  001222  6E15               	movwf	___llmod@divisor+1,c
  5252  001224  0E00               	movlw	0
  5253  001226  6E16               	movwf	___llmod@divisor+2,c
  5254  001228  0E00               	movlw	0
  5255  00122A  6E17               	movwf	___llmod@divisor+3,c
  5256  00122C  ECE4  F018         	call	___llmod	;wreg free
  5257  001230  5010               	movf	?___llmod,w,c
  5258  001232  0F30               	addlw	48
  5259  001234  0100               	movlb	0	; () banked
  5260  001236  6F93               	movwf	sprintf@c& (0+255),b
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;doprnt.c: 1523: }
  5264                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5265  001238  C069  FFD9         	movff	sprintf@sp,fsr2l
  5266  00123C  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  5267  001240  C093  FFDF         	movff	sprintf@c,indf2
  5268  001244                     l4854:
  5269                           
  5270                           ; BSR set to: 0
  5271  001244  0100               	movlb	0	; () banked
  5272  001246  4B69               	infsnz	sprintf@sp& (0+255),f,b
  5273  001248  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  5274  00124A                     l4856:
  5275                           
  5276                           ; BSR set to: 0
  5277  00124A  0100               	movlb	0	; () banked
  5278  00124C  0791               	decf	sprintf@prec& (0+255),f,b
  5279  00124E  A0D8               	btfss	status,0,c
  5280  001250  0792               	decf	(sprintf@prec+1)& (0+255),f,b
  5281  001252  0100               	movlb	0	; () banked
  5282  001254  2991               	incf	sprintf@prec& (0+255),w,b
  5283  001256  E1B1               	bnz	l4850
  5284  001258  0100               	movlb	0	; () banked
  5285  00125A  2992               	incf	(sprintf@prec+1)& (0+255),w,b
  5286  00125C  A4D8               	btfss	status,2,c
  5287  00125E  D7AD               	goto	l4850
  5288  001260                     l4858:
  5289                           
  5290                           ; BSR set to: 0
  5291  001260  C06B  FFF6         	movff	sprintf@f,tblptrl
  5292  001264  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  5293  001268  0100               	movlb	0	; () banked
  5294  00126A  4B6B               	infsnz	sprintf@f& (0+255),f,b
  5295  00126C  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  5296  00126E                     	if	0	;tblptru may be non-zero
  5297  00126E                     	endif
  5298  00126E                     	if	0	;tblptru may be non-zero
  5299  00126E                     	endif
  5300  00126E  0008               	tblrd		*
  5301  001270  CFF5 F093          	movff	tablat,sprintf@c
  5302  001274  0100               	movlb	0	; () banked
  5303  001276  5193               	movf	sprintf@c& (0+255),w,b
  5304  001278  A4D8               	btfss	status,2,c
  5305  00127A  EF62  F004         	goto	l4606
  5306  00127E                     l4860:
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;doprnt.c: 1538: *sp = 0;
  5310  00127E  C069  FFD9         	movff	sprintf@sp,fsr2l
  5311  001282  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  5312  001286  0E00               	movlw	0
  5313  001288  6EDF               	movwf	indf2,c
  5314  00128A  0012               	return	
  5315  00128C                     __end_of_sprintf:
  5316                           	opt stack 0
  5317                           tblptru	equ	0xFF8
  5318                           tblptrh	equ	0xFF7
  5319                           tblptrl	equ	0xFF6
  5320                           tablat	equ	0xFF5
  5321                           prodh	equ	0xFF4
  5322                           prodl	equ	0xFF3
  5323                           intcon	equ	0xFF2
  5324                           postinc0	equ	0xFEE
  5325                           wreg	equ	0xFE8
  5326                           indf1	equ	0xFE7
  5327                           fsr1h	equ	0xFE2
  5328                           fsr1l	equ	0xFE1
  5329                           indf2	equ	0xFDF
  5330                           postinc2	equ	0xFDE
  5331                           postdec2	equ	0xFDD
  5332                           fsr2h	equ	0xFDA
  5333                           fsr2l	equ	0xFD9
  5334                           status	equ	0xFD8
  5335                           
  5336 ;; *************** function _scale *****************
  5337 ;; Defined at:
  5338 ;;		line 425 in file "D:\mplab\sources\common\doprnt.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;  scl             1    wreg     char 
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;  scl             1   56[COMRAM] char 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  3   50[COMRAM] char 
  5345 ;; Registers used:
  5346 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5352 ;;      Params:         3       0       0       0       0       0       0       0       0
  5353 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5354 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5355 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5356 ;;Total ram usage:        7 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    3
  5359 ;; This function calls:
  5360 ;;		___awdiv
  5361 ;;		___awmod
  5362 ;;		___ftmul
  5363 ;;		___wmul
  5364 ;; This function is called by:
  5365 ;;		_sprintf
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           	psect	text17
  5370  00128C                     __ptext17:
  5371                           	opt stack 0
  5372  00128C                     _scale:
  5373                           	opt stack 26
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;incstack = 0
  5377                           ;scale@scl stored from wreg
  5378  00128C  6E39               	movwf	scale@scl,c
  5379                           
  5380                           ;doprnt.c: 428: if(scl < 0) {
  5381  00128E  AE39               	btfss	scale@scl,7,c
  5382  001290  D0FB               	goto	l4356
  5383                           
  5384                           ;doprnt.c: 429: scl = -scl;
  5385  001292  6C39               	negf	scale@scl,c
  5386                           
  5387                           ;doprnt.c: 430: if(scl>=110)
  5388  001294  5039               	movf	scale@scl,w,c
  5389  001296  0A80               	xorlw	128
  5390  001298  0F12               	addlw	-238
  5391  00129A  A0D8               	btfss	status,0,c
  5392  00129C  D091               	goto	l4346
  5393                           
  5394                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5395  00129E  0E00               	movlw	0
  5396  0012A0  6E21               	movwf	___wmul@multiplicand+1,c
  5397  0012A2  0E03               	movlw	3
  5398  0012A4  6E20               	movwf	___wmul@multiplicand,c
  5399  0012A6  0E00               	movlw	0
  5400  0012A8  6E19               	movwf	___awdiv@divisor+1,c
  5401  0012AA  0E0A               	movlw	10
  5402  0012AC  6E18               	movwf	___awdiv@divisor,c
  5403  0012AE  0E00               	movlw	0
  5404  0012B0  6E13               	movwf	___awmod@divisor+1,c
  5405  0012B2  0E64               	movlw	100
  5406  0012B4  6E12               	movwf	___awmod@divisor,c
  5407  0012B6  5039               	movf	scale@scl,w,c
  5408  0012B8  6E10               	movwf	___awmod@dividend,c
  5409  0012BA  6A11               	clrf	___awmod@dividend+1,c
  5410  0012BC  BE10               	btfsc	___awmod@dividend,7,c
  5411  0012BE  0611               	decf	___awmod@dividend+1,f,c
  5412  0012C0  ECAC  F018         	call	___awmod	;wreg free
  5413  0012C4  C010  F016         	movff	?___awmod,___awdiv@dividend
  5414  0012C8  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  5415  0012CC  EC3A  F017         	call	___awdiv	;wreg free
  5416  0012D0  0E09               	movlw	9
  5417  0012D2  2416               	addwf	?___awdiv,w,c
  5418  0012D4  6E1E               	movwf	___wmul@multiplier,c
  5419  0012D6  0E00               	movlw	0
  5420  0012D8  2017               	addwfc	?___awdiv+1,w,c
  5421  0012DA  6E1F               	movwf	___wmul@multiplier+1,c
  5422  0012DC  ECC9  F01A         	call	___wmul	;wreg free
  5423  0012E0  0E50               	movlw	low __npowers_
  5424  0012E2  241E               	addwf	?___wmul,w,c
  5425  0012E4  6EF6               	movwf	tblptrl,c
  5426  0012E6  0E08               	movlw	high __npowers_
  5427  0012E8  201F               	addwfc	?___wmul+1,w,c
  5428  0012EA  6EF7               	movwf	tblptrh,c
  5429  0012EC                     	if	0	;There are less than 3 active tblptr bytes
  5430  0012EC                     	endif
  5431  0012EC  0009               	tblrd		*+
  5432  0012EE  CFF5 F027          	movff	tablat,___ftmul@f2
  5433  0012F2  0009               	tblrd		*+
  5434  0012F4  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5435  0012F8  000A               	tblrd		*-
  5436  0012FA  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5437  0012FE  0E00               	movlw	0
  5438  001300  6E19               	movwf	___awdiv@divisor+1,c
  5439  001302  0E64               	movlw	100
  5440  001304  6E18               	movwf	___awdiv@divisor,c
  5441  001306  5039               	movf	scale@scl,w,c
  5442  001308  6E16               	movwf	___awdiv@dividend,c
  5443  00130A  6A17               	clrf	___awdiv@dividend+1,c
  5444  00130C  BE16               	btfsc	___awdiv@dividend,7,c
  5445  00130E  0617               	decf	___awdiv@dividend+1,f,c
  5446  001310  EC3A  F017         	call	___awdiv	;wreg free
  5447  001314  0E12               	movlw	18
  5448  001316  2416               	addwf	?___awdiv,w,c
  5449  001318  6E1E               	movwf	___wmul@multiplier,c
  5450  00131A  0E00               	movlw	0
  5451  00131C  2017               	addwfc	?___awdiv+1,w,c
  5452  00131E  6E1F               	movwf	___wmul@multiplier+1,c
  5453  001320  0E00               	movlw	0
  5454  001322  6E21               	movwf	___wmul@multiplicand+1,c
  5455  001324  0E03               	movlw	3
  5456  001326  6E20               	movwf	___wmul@multiplicand,c
  5457  001328  ECC9  F01A         	call	___wmul	;wreg free
  5458  00132C  0E50               	movlw	low __npowers_
  5459  00132E  241E               	addwf	?___wmul,w,c
  5460  001330  6EF6               	movwf	tblptrl,c
  5461  001332  0E08               	movlw	high __npowers_
  5462  001334  201F               	addwfc	?___wmul+1,w,c
  5463  001336  6EF7               	movwf	tblptrh,c
  5464  001338                     	if	0	;There are less than 3 active tblptr bytes
  5465  001338                     	endif
  5466  001338  0009               	tblrd		*+
  5467  00133A  CFF5 F024          	movff	tablat,___ftmul@f1
  5468  00133E  0009               	tblrd		*+
  5469  001340  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5470  001344  000A               	tblrd		*-
  5471  001346  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5472  00134A  ECCE  F014         	call	___ftmul	;wreg free
  5473  00134E  C024  F036         	movff	?___ftmul,_scale$1185
  5474  001352  C025  F037         	movff	?___ftmul+1,_scale$1185+1
  5475  001356  C026  F038         	movff	?___ftmul+2,_scale$1185+2
  5476                           
  5477                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5478  00135A  C036  F024         	movff	_scale$1185,___ftmul@f1
  5479  00135E  C037  F025         	movff	_scale$1185+1,___ftmul@f1+1
  5480  001362  C038  F026         	movff	_scale$1185+2,___ftmul@f1+2
  5481  001366  0E00               	movlw	0
  5482  001368  6E21               	movwf	___wmul@multiplicand+1,c
  5483  00136A  0E03               	movlw	3
  5484  00136C  6E20               	movwf	___wmul@multiplicand,c
  5485  00136E  0E00               	movlw	0
  5486  001370  6E13               	movwf	___awmod@divisor+1,c
  5487  001372  0E0A               	movlw	10
  5488  001374  6E12               	movwf	___awmod@divisor,c
  5489  001376  5039               	movf	scale@scl,w,c
  5490  001378  6E10               	movwf	___awmod@dividend,c
  5491  00137A  6A11               	clrf	___awmod@dividend+1,c
  5492  00137C  BE10               	btfsc	___awmod@dividend,7,c
  5493  00137E  0611               	decf	___awmod@dividend+1,f,c
  5494  001380  ECAC  F018         	call	___awmod	;wreg free
  5495  001384  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5496  001388  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5497  00138C  ECC9  F01A         	call	___wmul	;wreg free
  5498  001390  0E50               	movlw	low __npowers_
  5499  001392  241E               	addwf	?___wmul,w,c
  5500  001394  6EF6               	movwf	tblptrl,c
  5501  001396  0E08               	movlw	high __npowers_
  5502  001398  201F               	addwfc	?___wmul+1,w,c
  5503  00139A  6EF7               	movwf	tblptrh,c
  5504  00139C                     	if	0	;There are less than 3 active tblptr bytes
  5505  00139C                     	endif
  5506  00139C  0009               	tblrd		*+
  5507  00139E  CFF5 F027          	movff	tablat,___ftmul@f2
  5508  0013A2  0009               	tblrd		*+
  5509  0013A4  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5510  0013A8  000A               	tblrd		*-
  5511  0013AA  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5512  0013AE  ECCE  F014         	call	___ftmul	;wreg free
  5513  0013B2  C024  F033         	movff	?___ftmul,?_scale
  5514  0013B6  C025  F034         	movff	?___ftmul+1,?_scale+1
  5515  0013BA  C026  F035         	movff	?___ftmul+2,?_scale+2
  5516  0013BE  0012               	return	
  5517  0013C0                     l4346:
  5518                           
  5519                           ;doprnt.c: 432: else if(scl > 10)
  5520  0013C0  5039               	movf	scale@scl,w,c
  5521  0013C2  0A80               	xorlw	128
  5522  0013C4  0F75               	addlw	-139
  5523  0013C6  A0D8               	btfss	status,0,c
  5524  0013C8  D04D               	goto	l4352
  5525                           
  5526                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5527  0013CA  0E00               	movlw	0
  5528  0013CC  6E19               	movwf	___awdiv@divisor+1,c
  5529  0013CE  0E0A               	movlw	10
  5530  0013D0  6E18               	movwf	___awdiv@divisor,c
  5531  0013D2  5039               	movf	scale@scl,w,c
  5532  0013D4  6E16               	movwf	___awdiv@dividend,c
  5533  0013D6  6A17               	clrf	___awdiv@dividend+1,c
  5534  0013D8  BE16               	btfsc	___awdiv@dividend,7,c
  5535  0013DA  0617               	decf	___awdiv@dividend+1,f,c
  5536  0013DC  EC3A  F017         	call	___awdiv	;wreg free
  5537  0013E0  0E09               	movlw	9
  5538  0013E2  2416               	addwf	?___awdiv,w,c
  5539  0013E4  6E1E               	movwf	___wmul@multiplier,c
  5540  0013E6  0E00               	movlw	0
  5541  0013E8  2017               	addwfc	?___awdiv+1,w,c
  5542  0013EA  6E1F               	movwf	___wmul@multiplier+1,c
  5543  0013EC  0E00               	movlw	0
  5544  0013EE  6E21               	movwf	___wmul@multiplicand+1,c
  5545  0013F0  0E03               	movlw	3
  5546  0013F2  6E20               	movwf	___wmul@multiplicand,c
  5547  0013F4  ECC9  F01A         	call	___wmul	;wreg free
  5548  0013F8  0E50               	movlw	low __npowers_
  5549  0013FA  241E               	addwf	?___wmul,w,c
  5550  0013FC  6EF6               	movwf	tblptrl,c
  5551  0013FE  0E08               	movlw	high __npowers_
  5552  001400  201F               	addwfc	?___wmul+1,w,c
  5553  001402  6EF7               	movwf	tblptrh,c
  5554  001404                     	if	0	;There are less than 3 active tblptr bytes
  5555  001404                     	endif
  5556  001404  0009               	tblrd		*+
  5557  001406  CFF5 F024          	movff	tablat,___ftmul@f1
  5558  00140A  0009               	tblrd		*+
  5559  00140C  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5560  001410  000A               	tblrd		*-
  5561  001412  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5562  001416  0E00               	movlw	0
  5563  001418  6E21               	movwf	___wmul@multiplicand+1,c
  5564  00141A  0E03               	movlw	3
  5565  00141C  6E20               	movwf	___wmul@multiplicand,c
  5566  00141E  0E00               	movlw	0
  5567  001420  6E13               	movwf	___awmod@divisor+1,c
  5568  001422  0E0A               	movlw	10
  5569  001424  6E12               	movwf	___awmod@divisor,c
  5570  001426  5039               	movf	scale@scl,w,c
  5571  001428  6E10               	movwf	___awmod@dividend,c
  5572  00142A  6A11               	clrf	___awmod@dividend+1,c
  5573  00142C  BE10               	btfsc	___awmod@dividend,7,c
  5574  00142E  0611               	decf	___awmod@dividend+1,f,c
  5575  001430  ECAC  F018         	call	___awmod	;wreg free
  5576  001434  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5577  001438  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5578  00143C  ECC9  F01A         	call	___wmul	;wreg free
  5579  001440  0E50               	movlw	low __npowers_
  5580  001442  241E               	addwf	?___wmul,w,c
  5581  001444  6EF6               	movwf	tblptrl,c
  5582  001446  0E08               	movlw	high __npowers_
  5583  001448  201F               	addwfc	?___wmul+1,w,c
  5584  00144A  6EF7               	movwf	tblptrh,c
  5585  00144C                     	if	0	;There are less than 3 active tblptr bytes
  5586  00144C                     	endif
  5587  00144C  0009               	tblrd		*+
  5588  00144E  CFF5 F027          	movff	tablat,___ftmul@f2
  5589  001452  0009               	tblrd		*+
  5590  001454  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5591  001458  000A               	tblrd		*-
  5592  00145A  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5593  00145E  ECCE  F014         	call	___ftmul	;wreg free
  5594  001462  D7A7               	goto	L3
  5595  001464                     l4352:
  5596                           
  5597                           ;doprnt.c: 434: return _npowers_[scl];
  5598  001464  5039               	movf	scale@scl,w,c
  5599  001466  0D03               	mullw	3
  5600  001468  0E50               	movlw	low __npowers_
  5601  00146A  24F3               	addwf	prodl,w,c
  5602  00146C  6EF6               	movwf	tblptrl,c
  5603  00146E  0E08               	movlw	high __npowers_
  5604  001470  20F4               	addwfc	prodh,w,c
  5605  001472  6EF7               	movwf	tblptrh,c
  5606  001474                     	if	0	;There are less than 3 active tblptr bytes
  5607  001474                     	endif
  5608  001474  0009               	tblrd		*+
  5609  001476  CFF5 F033          	movff	tablat,?_scale
  5610  00147A  0009               	tblrd		*+
  5611  00147C  CFF5 F034          	movff	tablat,?_scale+1
  5612  001480  000A               	tblrd		*-
  5613  001482  CFF5 F035          	movff	tablat,?_scale+2
  5614  001486  0012               	return	
  5615  001488                     l4356:
  5616                           
  5617                           ;doprnt.c: 435: }
  5618                           ;doprnt.c: 436: if(scl>=110)
  5619  001488  5039               	movf	scale@scl,w,c
  5620  00148A  0A80               	xorlw	128
  5621  00148C  0F12               	addlw	-238
  5622  00148E  A0D8               	btfss	status,0,c
  5623  001490  D091               	goto	l4364
  5624                           
  5625                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5626  001492  0E00               	movlw	0
  5627  001494  6E21               	movwf	___wmul@multiplicand+1,c
  5628  001496  0E03               	movlw	3
  5629  001498  6E20               	movwf	___wmul@multiplicand,c
  5630  00149A  0E00               	movlw	0
  5631  00149C  6E19               	movwf	___awdiv@divisor+1,c
  5632  00149E  0E0A               	movlw	10
  5633  0014A0  6E18               	movwf	___awdiv@divisor,c
  5634  0014A2  0E00               	movlw	0
  5635  0014A4  6E13               	movwf	___awmod@divisor+1,c
  5636  0014A6  0E64               	movlw	100
  5637  0014A8  6E12               	movwf	___awmod@divisor,c
  5638  0014AA  5039               	movf	scale@scl,w,c
  5639  0014AC  6E10               	movwf	___awmod@dividend,c
  5640  0014AE  6A11               	clrf	___awmod@dividend+1,c
  5641  0014B0  BE10               	btfsc	___awmod@dividend,7,c
  5642  0014B2  0611               	decf	___awmod@dividend+1,f,c
  5643  0014B4  ECAC  F018         	call	___awmod	;wreg free
  5644  0014B8  C010  F016         	movff	?___awmod,___awdiv@dividend
  5645  0014BC  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  5646  0014C0  EC3A  F017         	call	___awdiv	;wreg free
  5647  0014C4  0E09               	movlw	9
  5648  0014C6  2416               	addwf	?___awdiv,w,c
  5649  0014C8  6E1E               	movwf	___wmul@multiplier,c
  5650  0014CA  0E00               	movlw	0
  5651  0014CC  2017               	addwfc	?___awdiv+1,w,c
  5652  0014CE  6E1F               	movwf	___wmul@multiplier+1,c
  5653  0014D0  ECC9  F01A         	call	___wmul	;wreg free
  5654  0014D4  0E29               	movlw	low __powers_
  5655  0014D6  241E               	addwf	?___wmul,w,c
  5656  0014D8  6EF6               	movwf	tblptrl,c
  5657  0014DA  0E08               	movlw	high __powers_
  5658  0014DC  201F               	addwfc	?___wmul+1,w,c
  5659  0014DE  6EF7               	movwf	tblptrh,c
  5660  0014E0                     	if	0	;There are less than 3 active tblptr bytes
  5661  0014E0                     	endif
  5662  0014E0  0009               	tblrd		*+
  5663  0014E2  CFF5 F027          	movff	tablat,___ftmul@f2
  5664  0014E6  0009               	tblrd		*+
  5665  0014E8  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5666  0014EC  000A               	tblrd		*-
  5667  0014EE  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5668  0014F2  0E00               	movlw	0
  5669  0014F4  6E19               	movwf	___awdiv@divisor+1,c
  5670  0014F6  0E64               	movlw	100
  5671  0014F8  6E18               	movwf	___awdiv@divisor,c
  5672  0014FA  5039               	movf	scale@scl,w,c
  5673  0014FC  6E16               	movwf	___awdiv@dividend,c
  5674  0014FE  6A17               	clrf	___awdiv@dividend+1,c
  5675  001500  BE16               	btfsc	___awdiv@dividend,7,c
  5676  001502  0617               	decf	___awdiv@dividend+1,f,c
  5677  001504  EC3A  F017         	call	___awdiv	;wreg free
  5678  001508  0E12               	movlw	18
  5679  00150A  2416               	addwf	?___awdiv,w,c
  5680  00150C  6E1E               	movwf	___wmul@multiplier,c
  5681  00150E  0E00               	movlw	0
  5682  001510  2017               	addwfc	?___awdiv+1,w,c
  5683  001512  6E1F               	movwf	___wmul@multiplier+1,c
  5684  001514  0E00               	movlw	0
  5685  001516  6E21               	movwf	___wmul@multiplicand+1,c
  5686  001518  0E03               	movlw	3
  5687  00151A  6E20               	movwf	___wmul@multiplicand,c
  5688  00151C  ECC9  F01A         	call	___wmul	;wreg free
  5689  001520  0E29               	movlw	low __powers_
  5690  001522  241E               	addwf	?___wmul,w,c
  5691  001524  6EF6               	movwf	tblptrl,c
  5692  001526  0E08               	movlw	high __powers_
  5693  001528  201F               	addwfc	?___wmul+1,w,c
  5694  00152A  6EF7               	movwf	tblptrh,c
  5695  00152C                     	if	0	;There are less than 3 active tblptr bytes
  5696  00152C                     	endif
  5697  00152C  0009               	tblrd		*+
  5698  00152E  CFF5 F024          	movff	tablat,___ftmul@f1
  5699  001532  0009               	tblrd		*+
  5700  001534  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5701  001538  000A               	tblrd		*-
  5702  00153A  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5703  00153E  ECCE  F014         	call	___ftmul	;wreg free
  5704  001542  C024  F036         	movff	?___ftmul,_scale$1185
  5705  001546  C025  F037         	movff	?___ftmul+1,_scale$1185+1
  5706  00154A  C026  F038         	movff	?___ftmul+2,_scale$1185+2
  5707                           
  5708                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5709  00154E  C036  F024         	movff	_scale$1185,___ftmul@f1
  5710  001552  C037  F025         	movff	_scale$1185+1,___ftmul@f1+1
  5711  001556  C038  F026         	movff	_scale$1185+2,___ftmul@f1+2
  5712  00155A  0E00               	movlw	0
  5713  00155C  6E21               	movwf	___wmul@multiplicand+1,c
  5714  00155E  0E03               	movlw	3
  5715  001560  6E20               	movwf	___wmul@multiplicand,c
  5716  001562  0E00               	movlw	0
  5717  001564  6E13               	movwf	___awmod@divisor+1,c
  5718  001566  0E0A               	movlw	10
  5719  001568  6E12               	movwf	___awmod@divisor,c
  5720  00156A  5039               	movf	scale@scl,w,c
  5721  00156C  6E10               	movwf	___awmod@dividend,c
  5722  00156E  6A11               	clrf	___awmod@dividend+1,c
  5723  001570  BE10               	btfsc	___awmod@dividend,7,c
  5724  001572  0611               	decf	___awmod@dividend+1,f,c
  5725  001574  ECAC  F018         	call	___awmod	;wreg free
  5726  001578  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5727  00157C  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5728  001580  ECC9  F01A         	call	___wmul	;wreg free
  5729  001584  0E29               	movlw	low __powers_
  5730  001586  241E               	addwf	?___wmul,w,c
  5731  001588  6EF6               	movwf	tblptrl,c
  5732  00158A  0E08               	movlw	high __powers_
  5733  00158C  201F               	addwfc	?___wmul+1,w,c
  5734  00158E  6EF7               	movwf	tblptrh,c
  5735  001590                     	if	0	;There are less than 3 active tblptr bytes
  5736  001590                     	endif
  5737  001590  0009               	tblrd		*+
  5738  001592  CFF5 F027          	movff	tablat,___ftmul@f2
  5739  001596  0009               	tblrd		*+
  5740  001598  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5741  00159C  000A               	tblrd		*-
  5742  00159E  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5743  0015A2  ECCE  F014         	call	___ftmul	;wreg free
  5744  0015A6  C024  F033         	movff	?___ftmul,?_scale
  5745  0015AA  C025  F034         	movff	?___ftmul+1,?_scale+1
  5746  0015AE  C026  F035         	movff	?___ftmul+2,?_scale+2
  5747  0015B2  0012               	return	
  5748  0015B4                     l4364:
  5749                           
  5750                           ;doprnt.c: 438: else if(scl > 10)
  5751  0015B4  5039               	movf	scale@scl,w,c
  5752  0015B6  0A80               	xorlw	128
  5753  0015B8  0F75               	addlw	-139
  5754  0015BA  A0D8               	btfss	status,0,c
  5755  0015BC  D04D               	goto	l4370
  5756                           
  5757                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5758  0015BE  0E00               	movlw	0
  5759  0015C0  6E19               	movwf	___awdiv@divisor+1,c
  5760  0015C2  0E0A               	movlw	10
  5761  0015C4  6E18               	movwf	___awdiv@divisor,c
  5762  0015C6  5039               	movf	scale@scl,w,c
  5763  0015C8  6E16               	movwf	___awdiv@dividend,c
  5764  0015CA  6A17               	clrf	___awdiv@dividend+1,c
  5765  0015CC  BE16               	btfsc	___awdiv@dividend,7,c
  5766  0015CE  0617               	decf	___awdiv@dividend+1,f,c
  5767  0015D0  EC3A  F017         	call	___awdiv	;wreg free
  5768  0015D4  0E09               	movlw	9
  5769  0015D6  2416               	addwf	?___awdiv,w,c
  5770  0015D8  6E1E               	movwf	___wmul@multiplier,c
  5771  0015DA  0E00               	movlw	0
  5772  0015DC  2017               	addwfc	?___awdiv+1,w,c
  5773  0015DE  6E1F               	movwf	___wmul@multiplier+1,c
  5774  0015E0  0E00               	movlw	0
  5775  0015E2  6E21               	movwf	___wmul@multiplicand+1,c
  5776  0015E4  0E03               	movlw	3
  5777  0015E6  6E20               	movwf	___wmul@multiplicand,c
  5778  0015E8  ECC9  F01A         	call	___wmul	;wreg free
  5779  0015EC  0E29               	movlw	low __powers_
  5780  0015EE  241E               	addwf	?___wmul,w,c
  5781  0015F0  6EF6               	movwf	tblptrl,c
  5782  0015F2  0E08               	movlw	high __powers_
  5783  0015F4  201F               	addwfc	?___wmul+1,w,c
  5784  0015F6  6EF7               	movwf	tblptrh,c
  5785  0015F8                     	if	0	;There are less than 3 active tblptr bytes
  5786  0015F8                     	endif
  5787  0015F8  0009               	tblrd		*+
  5788  0015FA  CFF5 F024          	movff	tablat,___ftmul@f1
  5789  0015FE  0009               	tblrd		*+
  5790  001600  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5791  001604  000A               	tblrd		*-
  5792  001606  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5793  00160A  0E00               	movlw	0
  5794  00160C  6E21               	movwf	___wmul@multiplicand+1,c
  5795  00160E  0E03               	movlw	3
  5796  001610  6E20               	movwf	___wmul@multiplicand,c
  5797  001612  0E00               	movlw	0
  5798  001614  6E13               	movwf	___awmod@divisor+1,c
  5799  001616  0E0A               	movlw	10
  5800  001618  6E12               	movwf	___awmod@divisor,c
  5801  00161A  5039               	movf	scale@scl,w,c
  5802  00161C  6E10               	movwf	___awmod@dividend,c
  5803  00161E  6A11               	clrf	___awmod@dividend+1,c
  5804  001620  BE10               	btfsc	___awmod@dividend,7,c
  5805  001622  0611               	decf	___awmod@dividend+1,f,c
  5806  001624  ECAC  F018         	call	___awmod	;wreg free
  5807  001628  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5808  00162C  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5809  001630  ECC9  F01A         	call	___wmul	;wreg free
  5810  001634  0E29               	movlw	low __powers_
  5811  001636  241E               	addwf	?___wmul,w,c
  5812  001638  6EF6               	movwf	tblptrl,c
  5813  00163A  0E08               	movlw	high __powers_
  5814  00163C  201F               	addwfc	?___wmul+1,w,c
  5815  00163E  6EF7               	movwf	tblptrh,c
  5816  001640                     	if	0	;There are less than 3 active tblptr bytes
  5817  001640                     	endif
  5818  001640  0009               	tblrd		*+
  5819  001642  CFF5 F027          	movff	tablat,___ftmul@f2
  5820  001646  0009               	tblrd		*+
  5821  001648  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5822  00164C  000A               	tblrd		*-
  5823  00164E  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5824  001652  ECCE  F014         	call	___ftmul	;wreg free
  5825  001656  D7A7               	goto	L4
  5826  001658                     l4370:
  5827                           
  5828                           ;doprnt.c: 440: return _powers_[scl];
  5829  001658  5039               	movf	scale@scl,w,c
  5830  00165A  0D03               	mullw	3
  5831  00165C  0E29               	movlw	low __powers_
  5832  00165E  24F3               	addwf	prodl,w,c
  5833  001660  6EF6               	movwf	tblptrl,c
  5834  001662  0E08               	movlw	high __powers_
  5835  001664  20F4               	addwfc	prodh,w,c
  5836  001666  6EF7               	movwf	tblptrh,c
  5837  001668                     	if	0	;There are less than 3 active tblptr bytes
  5838  001668                     	endif
  5839  001668  0009               	tblrd		*+
  5840  00166A  CFF5 F033          	movff	tablat,?_scale
  5841  00166E  0009               	tblrd		*+
  5842  001670  CFF5 F034          	movff	tablat,?_scale+1
  5843  001674  000A               	tblrd		*-
  5844  001676  CFF5 F035          	movff	tablat,?_scale+2
  5845  00167A  0012               	return	
  5846  00167C                     __end_of_scale:
  5847                           	opt stack 0
  5848                           tblptru	equ	0xFF8
  5849                           tblptrh	equ	0xFF7
  5850                           tblptrl	equ	0xFF6
  5851                           tablat	equ	0xFF5
  5852                           prodh	equ	0xFF4
  5853                           prodl	equ	0xFF3
  5854                           intcon	equ	0xFF2
  5855                           postinc0	equ	0xFEE
  5856                           wreg	equ	0xFE8
  5857                           indf1	equ	0xFE7
  5858                           fsr1h	equ	0xFE2
  5859                           fsr1l	equ	0xFE1
  5860                           indf2	equ	0xFDF
  5861                           postinc2	equ	0xFDE
  5862                           postdec2	equ	0xFDD
  5863                           fsr2h	equ	0xFDA
  5864                           fsr2l	equ	0xFD9
  5865                           status	equ	0xFD8
  5866                           
  5867 ;; *************** function _isdigit *****************
  5868 ;; Defined at:
  5869 ;;		line 8 in file "D:\mplab\sources\common\isdigit.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;  c               1    wreg     unsigned char 
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;  c               1   17[COMRAM] unsigned char 
  5874 ;; Return value:  Size  Location     Type
  5875 ;;		None               void
  5876 ;; Registers used:
  5877 ;;		wreg, status,2, status,0
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5883 ;;      Params:         0       0       0       0       0       0       0       0       0
  5884 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5885 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5886 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5887 ;;Total ram usage:        3 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; Hardware stack levels required when called:    1
  5890 ;; This function calls:
  5891 ;;		Nothing
  5892 ;; This function is called by:
  5893 ;;		_sprintf
  5894 ;;		_strtod
  5895 ;;		_atol
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           	psect	text18
  5900  003622                     __ptext18:
  5901                           	opt stack 0
  5902  003622                     _isdigit:
  5903                           	opt stack 28
  5904                           
  5905                           ;incstack = 0
  5906                           ;isdigit@c stored from wreg
  5907  003622  6E12               	movwf	isdigit@c,c
  5908  003624  0E00               	movlw	0
  5909  003626  6E11               	movwf	_isdigit$831,c
  5910  003628  0E3A               	movlw	58
  5911  00362A  6012               	cpfslt	isdigit@c,c
  5912  00362C  D005               	goto	l2692
  5913  00362E  0E2F               	movlw	47
  5914  003630  6412               	cpfsgt	isdigit@c,c
  5915  003632  D002               	goto	l2692
  5916  003634  0E01               	movlw	1
  5917  003636  6E11               	movwf	_isdigit$831,c
  5918  003638                     l2692:
  5919  003638  C011  F010         	movff	_isdigit$831,??_isdigit
  5920  00363C  3010               	rrcf	??_isdigit,w,c
  5921  00363E  0012               	return	
  5922  003640                     __end_of_isdigit:
  5923                           	opt stack 0
  5924                           tblptru	equ	0xFF8
  5925                           tblptrh	equ	0xFF7
  5926                           tblptrl	equ	0xFF6
  5927                           tablat	equ	0xFF5
  5928                           prodh	equ	0xFF4
  5929                           prodl	equ	0xFF3
  5930                           intcon	equ	0xFF2
  5931                           postinc0	equ	0xFEE
  5932                           wreg	equ	0xFE8
  5933                           indf1	equ	0xFE7
  5934                           fsr1h	equ	0xFE2
  5935                           fsr1l	equ	0xFE1
  5936                           indf2	equ	0xFDF
  5937                           postinc2	equ	0xFDE
  5938                           postdec2	equ	0xFDD
  5939                           fsr2h	equ	0xFDA
  5940                           fsr2l	equ	0xFD9
  5941                           status	equ	0xFD8
  5942                           
  5943 ;; *************** function _fround *****************
  5944 ;; Defined at:
  5945 ;;		line 409 in file "D:\mplab\sources\common\doprnt.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;  prec            1    wreg     unsigned char 
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;  prec            1   59[COMRAM] unsigned char 
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  3   50[COMRAM] unsigned char 
  5952 ;; Registers used:
  5953 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5954 ;; Tracked objects:
  5955 ;;		On entry : 0/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5959 ;;      Params:         3       0       0       0       0       0       0       0       0
  5960 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5961 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5962 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5963 ;;Total ram usage:       10 bytes
  5964 ;; Hardware stack levels used:    1
  5965 ;; Hardware stack levels required when called:    3
  5966 ;; This function calls:
  5967 ;;		___awdiv
  5968 ;;		___awmod
  5969 ;;		___ftmul
  5970 ;;		___wmul
  5971 ;; This function is called by:
  5972 ;;		_sprintf
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976                           	psect	text19
  5977  001D8E                     __ptext19:
  5978                           	opt stack 0
  5979  001D8E                     _fround:
  5980                           	opt stack 26
  5981                           
  5982                           ;incstack = 0
  5983                           ;fround@prec stored from wreg
  5984  001D8E  6E3C               	movwf	fround@prec,c
  5985                           
  5986                           ;doprnt.c: 413: if(prec>=110)
  5987  001D90  0E6D               	movlw	109
  5988  001D92  643C               	cpfsgt	fround@prec,c
  5989  001D94  D09F               	goto	l4324
  5990                           
  5991                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5992  001D96  0E00               	movlw	0
  5993  001D98  6E21               	movwf	___wmul@multiplicand+1,c
  5994  001D9A  0E03               	movlw	3
  5995  001D9C  6E20               	movwf	___wmul@multiplicand,c
  5996  001D9E  0E00               	movlw	0
  5997  001DA0  6E19               	movwf	___awdiv@divisor+1,c
  5998  001DA2  0E0A               	movlw	10
  5999  001DA4  6E18               	movwf	___awdiv@divisor,c
  6000  001DA6  0E00               	movlw	0
  6001  001DA8  6E13               	movwf	___awmod@divisor+1,c
  6002  001DAA  0E64               	movlw	100
  6003  001DAC  6E12               	movwf	___awmod@divisor,c
  6004  001DAE  C03C  F010         	movff	fround@prec,___awmod@dividend
  6005  001DB2  6A11               	clrf	___awmod@dividend+1,c
  6006  001DB4  ECAC  F018         	call	___awmod	;wreg free
  6007  001DB8  C010  F016         	movff	?___awmod,___awdiv@dividend
  6008  001DBC  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  6009  001DC0  EC3A  F017         	call	___awdiv	;wreg free
  6010  001DC4  0E09               	movlw	9
  6011  001DC6  2416               	addwf	?___awdiv,w,c
  6012  001DC8  6E1E               	movwf	___wmul@multiplier,c
  6013  001DCA  0E00               	movlw	0
  6014  001DCC  2017               	addwfc	?___awdiv+1,w,c
  6015  001DCE  6E1F               	movwf	___wmul@multiplier+1,c
  6016  001DD0  ECC9  F01A         	call	___wmul	;wreg free
  6017  001DD4  0E50               	movlw	low __npowers_
  6018  001DD6  241E               	addwf	?___wmul,w,c
  6019  001DD8  6EF6               	movwf	tblptrl,c
  6020  001DDA  0E08               	movlw	high __npowers_
  6021  001DDC  201F               	addwfc	?___wmul+1,w,c
  6022  001DDE  6EF7               	movwf	tblptrh,c
  6023  001DE0                     	if	0	;There are less than 3 active tblptr bytes
  6024  001DE0                     	endif
  6025  001DE0  0009               	tblrd		*+
  6026  001DE2  CFF5 F027          	movff	tablat,___ftmul@f2
  6027  001DE6  0009               	tblrd		*+
  6028  001DE8  CFF5 F028          	movff	tablat,___ftmul@f2+1
  6029  001DEC  000A               	tblrd		*-
  6030  001DEE  CFF5 F029          	movff	tablat,___ftmul@f2+2
  6031  001DF2  0E00               	movlw	0
  6032  001DF4  6E19               	movwf	___awdiv@divisor+1,c
  6033  001DF6  0E64               	movlw	100
  6034  001DF8  6E18               	movwf	___awdiv@divisor,c
  6035  001DFA  C03C  F016         	movff	fround@prec,___awdiv@dividend
  6036  001DFE  6A17               	clrf	___awdiv@dividend+1,c
  6037  001E00  EC3A  F017         	call	___awdiv	;wreg free
  6038  001E04  0E12               	movlw	18
  6039  001E06  2416               	addwf	?___awdiv,w,c
  6040  001E08  6E1E               	movwf	___wmul@multiplier,c
  6041  001E0A  0E00               	movlw	0
  6042  001E0C  2017               	addwfc	?___awdiv+1,w,c
  6043  001E0E  6E1F               	movwf	___wmul@multiplier+1,c
  6044  001E10  0E00               	movlw	0
  6045  001E12  6E21               	movwf	___wmul@multiplicand+1,c
  6046  001E14  0E03               	movlw	3
  6047  001E16  6E20               	movwf	___wmul@multiplicand,c
  6048  001E18  ECC9  F01A         	call	___wmul	;wreg free
  6049  001E1C  0E50               	movlw	low __npowers_
  6050  001E1E  241E               	addwf	?___wmul,w,c
  6051  001E20  6EF6               	movwf	tblptrl,c
  6052  001E22  0E08               	movlw	high __npowers_
  6053  001E24  201F               	addwfc	?___wmul+1,w,c
  6054  001E26  6EF7               	movwf	tblptrh,c
  6055  001E28                     	if	0	;There are less than 3 active tblptr bytes
  6056  001E28                     	endif
  6057  001E28  0009               	tblrd		*+
  6058  001E2A  CFF5 F024          	movff	tablat,___ftmul@f1
  6059  001E2E  0009               	tblrd		*+
  6060  001E30  CFF5 F025          	movff	tablat,___ftmul@f1+1
  6061  001E34  000A               	tblrd		*-
  6062  001E36  CFF5 F026          	movff	tablat,___ftmul@f1+2
  6063  001E3A  ECCE  F014         	call	___ftmul	;wreg free
  6064  001E3E  C024  F039         	movff	?___ftmul,_fround$1183
  6065  001E42  C025  F03A         	movff	?___ftmul+1,_fround$1183+1
  6066  001E46  C026  F03B         	movff	?___ftmul+2,_fround$1183+2
  6067                           
  6068                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6069  001E4A  0E00               	movlw	0
  6070  001E4C  6E21               	movwf	___wmul@multiplicand+1,c
  6071  001E4E  0E03               	movlw	3
  6072  001E50  6E20               	movwf	___wmul@multiplicand,c
  6073  001E52  0E00               	movlw	0
  6074  001E54  6E13               	movwf	___awmod@divisor+1,c
  6075  001E56  0E0A               	movlw	10
  6076  001E58  6E12               	movwf	___awmod@divisor,c
  6077  001E5A  C03C  F010         	movff	fround@prec,___awmod@dividend
  6078  001E5E  6A11               	clrf	___awmod@dividend+1,c
  6079  001E60  ECAC  F018         	call	___awmod	;wreg free
  6080  001E64  C010  F01E         	movff	?___awmod,___wmul@multiplier
  6081  001E68  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  6082  001E6C  ECC9  F01A         	call	___wmul	;wreg free
  6083  001E70  0E50               	movlw	low __npowers_
  6084  001E72  241E               	addwf	?___wmul,w,c
  6085  001E74  6EF6               	movwf	tblptrl,c
  6086  001E76  0E08               	movlw	high __npowers_
  6087  001E78  201F               	addwfc	?___wmul+1,w,c
  6088  001E7A  6EF7               	movwf	tblptrh,c
  6089  001E7C                     	if	0	;There are less than 3 active tblptr bytes
  6090  001E7C                     	endif
  6091  001E7C  0009               	tblrd		*+
  6092  001E7E  CFF5 F027          	movff	tablat,___ftmul@f2
  6093  001E82  0009               	tblrd		*+
  6094  001E84  CFF5 F028          	movff	tablat,___ftmul@f2+1
  6095  001E88  000A               	tblrd		*-
  6096  001E8A  CFF5 F029          	movff	tablat,___ftmul@f2+2
  6097  001E8E  C039  F024         	movff	_fround$1183,___ftmul@f1
  6098  001E92  C03A  F025         	movff	_fround$1183+1,___ftmul@f1+1
  6099  001E96  C03B  F026         	movff	_fround$1183+2,___ftmul@f1+2
  6100  001E9A  ECCE  F014         	call	___ftmul	;wreg free
  6101  001E9E  C024  F036         	movff	?___ftmul,_fround$1184
  6102  001EA2  C025  F037         	movff	?___ftmul+1,_fround$1184+1
  6103  001EA6  C026  F038         	movff	?___ftmul+2,_fround$1184+2
  6104                           
  6105                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6106  001EAA  C036  F024         	movff	_fround$1184,___ftmul@f1
  6107  001EAE  C037  F025         	movff	_fround$1184+1,___ftmul@f1+1
  6108  001EB2  C038  F026         	movff	_fround$1184+2,___ftmul@f1+2
  6109  001EB6  0E00               	movlw	0
  6110  001EB8  6E27               	movwf	___ftmul@f2,c
  6111  001EBA  0E00               	movlw	0
  6112  001EBC  6E28               	movwf	___ftmul@f2+1,c
  6113  001EBE  0E3F               	movlw	63
  6114  001EC0  6E29               	movwf	___ftmul@f2+2,c
  6115  001EC2  ECCE  F014         	call	___ftmul	;wreg free
  6116  001EC6  C024  F033         	movff	?___ftmul,?_fround
  6117  001ECA  C025  F034         	movff	?___ftmul+1,?_fround+1
  6118  001ECE  C026  F035         	movff	?___ftmul+2,?_fround+2
  6119  001ED2  0012               	return	
  6120  001ED4                     l4324:
  6121                           
  6122                           ;doprnt.c: 415: else if(prec > 10)
  6123  001ED4  0E0A               	movlw	10
  6124  001ED6  643C               	cpfsgt	fround@prec,c
  6125  001ED8  D05D               	goto	l4332
  6126                           
  6127                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6128  001EDA  0E00               	movlw	0
  6129  001EDC  6E21               	movwf	___wmul@multiplicand+1,c
  6130  001EDE  0E03               	movlw	3
  6131  001EE0  6E20               	movwf	___wmul@multiplicand,c
  6132  001EE2  0E00               	movlw	0
  6133  001EE4  6E13               	movwf	___awmod@divisor+1,c
  6134  001EE6  0E0A               	movlw	10
  6135  001EE8  6E12               	movwf	___awmod@divisor,c
  6136  001EEA  C03C  F010         	movff	fround@prec,___awmod@dividend
  6137  001EEE  6A11               	clrf	___awmod@dividend+1,c
  6138  001EF0  ECAC  F018         	call	___awmod	;wreg free
  6139  001EF4  C010  F01E         	movff	?___awmod,___wmul@multiplier
  6140  001EF8  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  6141  001EFC  ECC9  F01A         	call	___wmul	;wreg free
  6142  001F00  0E50               	movlw	low __npowers_
  6143  001F02  241E               	addwf	?___wmul,w,c
  6144  001F04  6EF6               	movwf	tblptrl,c
  6145  001F06  0E08               	movlw	high __npowers_
  6146  001F08  201F               	addwfc	?___wmul+1,w,c
  6147  001F0A  6EF7               	movwf	tblptrh,c
  6148  001F0C                     	if	0	;There are less than 3 active tblptr bytes
  6149  001F0C                     	endif
  6150  001F0C  0009               	tblrd		*+
  6151  001F0E  CFF5 F027          	movff	tablat,___ftmul@f2
  6152  001F12  0009               	tblrd		*+
  6153  001F14  CFF5 F028          	movff	tablat,___ftmul@f2+1
  6154  001F18  000A               	tblrd		*-
  6155  001F1A  CFF5 F029          	movff	tablat,___ftmul@f2+2
  6156  001F1E  0E00               	movlw	0
  6157  001F20  6E19               	movwf	___awdiv@divisor+1,c
  6158  001F22  0E0A               	movlw	10
  6159  001F24  6E18               	movwf	___awdiv@divisor,c
  6160  001F26  C03C  F016         	movff	fround@prec,___awdiv@dividend
  6161  001F2A  6A17               	clrf	___awdiv@dividend+1,c
  6162  001F2C  EC3A  F017         	call	___awdiv	;wreg free
  6163  001F30  0E09               	movlw	9
  6164  001F32  2416               	addwf	?___awdiv,w,c
  6165  001F34  6E1E               	movwf	___wmul@multiplier,c
  6166  001F36  0E00               	movlw	0
  6167  001F38  2017               	addwfc	?___awdiv+1,w,c
  6168  001F3A  6E1F               	movwf	___wmul@multiplier+1,c
  6169  001F3C  0E00               	movlw	0
  6170  001F3E  6E21               	movwf	___wmul@multiplicand+1,c
  6171  001F40  0E03               	movlw	3
  6172  001F42  6E20               	movwf	___wmul@multiplicand,c
  6173  001F44  ECC9  F01A         	call	___wmul	;wreg free
  6174  001F48  0E50               	movlw	low __npowers_
  6175  001F4A  241E               	addwf	?___wmul,w,c
  6176  001F4C  6EF6               	movwf	tblptrl,c
  6177  001F4E  0E08               	movlw	high __npowers_
  6178  001F50  201F               	addwfc	?___wmul+1,w,c
  6179  001F52  6EF7               	movwf	tblptrh,c
  6180  001F54                     	if	0	;There are less than 3 active tblptr bytes
  6181  001F54                     	endif
  6182  001F54  0009               	tblrd		*+
  6183  001F56  CFF5 F024          	movff	tablat,___ftmul@f1
  6184  001F5A  0009               	tblrd		*+
  6185  001F5C  CFF5 F025          	movff	tablat,___ftmul@f1+1
  6186  001F60  000A               	tblrd		*-
  6187  001F62  CFF5 F026          	movff	tablat,___ftmul@f1+2
  6188  001F66  ECCE  F014         	call	___ftmul	;wreg free
  6189  001F6A  C024  F039         	movff	?___ftmul,_fround$1183
  6190  001F6E  C025  F03A         	movff	?___ftmul+1,_fround$1183+1
  6191  001F72  C026  F03B         	movff	?___ftmul+2,_fround$1183+2
  6192                           
  6193                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6194  001F76  C039  F024         	movff	_fround$1183,___ftmul@f1
  6195  001F7A  C03A  F025         	movff	_fround$1183+1,___ftmul@f1+1
  6196  001F7E  C03B  F026         	movff	_fround$1183+2,___ftmul@f1+2
  6197  001F82  0E00               	movlw	0
  6198  001F84  6E27               	movwf	___ftmul@f2,c
  6199  001F86  0E00               	movlw	0
  6200  001F88  6E28               	movwf	___ftmul@f2+1,c
  6201  001F8A  0E3F               	movlw	63
  6202  001F8C  6E29               	movwf	___ftmul@f2+2,c
  6203  001F8E  ECCE  F014         	call	___ftmul	;wreg free
  6204  001F92  D799               	goto	L5
  6205  001F94                     l4332:
  6206                           
  6207                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6208  001F94  503C               	movf	fround@prec,w,c
  6209  001F96  0D03               	mullw	3
  6210  001F98  0E50               	movlw	low __npowers_
  6211  001F9A  24F3               	addwf	prodl,w,c
  6212  001F9C  6EF6               	movwf	tblptrl,c
  6213  001F9E  0E08               	movlw	high __npowers_
  6214  001FA0  20F4               	addwfc	prodh,w,c
  6215  001FA2  6EF7               	movwf	tblptrh,c
  6216  001FA4                     	if	0	;There are less than 3 active tblptr bytes
  6217  001FA4                     	endif
  6218  001FA4  0009               	tblrd		*+
  6219  001FA6  CFF5 F024          	movff	tablat,___ftmul@f1
  6220  001FAA  0009               	tblrd		*+
  6221  001FAC  CFF5 F025          	movff	tablat,___ftmul@f1+1
  6222  001FB0  000A               	tblrd		*-
  6223  001FB2  CFF5 F026          	movff	tablat,___ftmul@f1+2
  6224  001FB6  0E00               	movlw	0
  6225  001FB8  6E27               	movwf	___ftmul@f2,c
  6226  001FBA  0E00               	movlw	0
  6227  001FBC  6E28               	movwf	___ftmul@f2+1,c
  6228  001FBE  0E3F               	movlw	63
  6229  001FC0  6E29               	movwf	___ftmul@f2+2,c
  6230  001FC2  ECCE  F014         	call	___ftmul	;wreg free
  6231  001FC6  C024  F033         	movff	?___ftmul,?_fround
  6232  001FCA  C025  F034         	movff	?___ftmul+1,?_fround+1
  6233  001FCE  C026  F035         	movff	?___ftmul+2,?_fround+2
  6234  001FD2  0012               	return	
  6235  001FD4                     __end_of_fround:
  6236                           	opt stack 0
  6237                           tblptru	equ	0xFF8
  6238                           tblptrh	equ	0xFF7
  6239                           tblptrl	equ	0xFF6
  6240                           tablat	equ	0xFF5
  6241                           prodh	equ	0xFF4
  6242                           prodl	equ	0xFF3
  6243                           intcon	equ	0xFF2
  6244                           postinc0	equ	0xFEE
  6245                           wreg	equ	0xFE8
  6246                           indf1	equ	0xFE7
  6247                           fsr1h	equ	0xFE2
  6248                           fsr1l	equ	0xFE1
  6249                           indf2	equ	0xFDF
  6250                           postinc2	equ	0xFDE
  6251                           postdec2	equ	0xFDD
  6252                           fsr2h	equ	0xFDA
  6253                           fsr2l	equ	0xFD9
  6254                           status	equ	0xFD8
  6255                           
  6256 ;; *************** function ___wmul *****************
  6257 ;; Defined at:
  6258 ;;		line 15 in file "D:\mplab\sources\common\Umul16.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  multiplier      2   29[COMRAM] unsigned int 
  6261 ;;  multiplicand    2   31[COMRAM] unsigned int 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  product         2   33[COMRAM] unsigned int 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  2   29[COMRAM] unsigned int 
  6266 ;; Registers used:
  6267 ;;		wreg, status,2, status,0, prodl, prodh
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6273 ;;      Params:         4       0       0       0       0       0       0       0       0
  6274 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6275 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6276 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6277 ;;Total ram usage:        6 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:    1
  6280 ;; This function calls:
  6281 ;;		Nothing
  6282 ;; This function is called by:
  6283 ;;		_fround
  6284 ;;		_scale
  6285 ;;		_sprintf
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text20
  6290  003592                     __ptext20:
  6291                           	opt stack 0
  6292  003592                     ___wmul:
  6293                           	opt stack 27
  6294                           
  6295                           ;incstack = 0
  6296  003592  501E               	movf	___wmul@multiplier,w,c
  6297  003594  0220               	mulwf	___wmul@multiplicand,c
  6298  003596  CFF3 F022          	movff	prodl,___wmul@product
  6299  00359A  CFF4 F023          	movff	prodh,___wmul@product+1
  6300  00359E  501E               	movf	___wmul@multiplier,w,c
  6301  0035A0  0221               	mulwf	___wmul@multiplicand+1,c
  6302  0035A2  50F3               	movf	prodl,w,c
  6303  0035A4  2623               	addwf	___wmul@product+1,f,c
  6304  0035A6  501F               	movf	___wmul@multiplier+1,w,c
  6305  0035A8  0220               	mulwf	___wmul@multiplicand,c
  6306  0035AA  50F3               	movf	prodl,w,c
  6307  0035AC  2623               	addwf	___wmul@product+1,f,c
  6308  0035AE  C022  F01E         	movff	___wmul@product,?___wmul
  6309  0035B2  C023  F01F         	movff	___wmul@product+1,?___wmul+1
  6310  0035B6  0012               	return	
  6311  0035B8                     __end_of___wmul:
  6312                           	opt stack 0
  6313                           tblptru	equ	0xFF8
  6314                           tblptrh	equ	0xFF7
  6315                           tblptrl	equ	0xFF6
  6316                           tablat	equ	0xFF5
  6317                           prodh	equ	0xFF4
  6318                           prodl	equ	0xFF3
  6319                           intcon	equ	0xFF2
  6320                           postinc0	equ	0xFEE
  6321                           wreg	equ	0xFE8
  6322                           indf1	equ	0xFE7
  6323                           fsr1h	equ	0xFE2
  6324                           fsr1l	equ	0xFE1
  6325                           indf2	equ	0xFDF
  6326                           postinc2	equ	0xFDE
  6327                           postdec2	equ	0xFDD
  6328                           fsr2h	equ	0xFDA
  6329                           fsr2l	equ	0xFD9
  6330                           status	equ	0xFD8
  6331                           
  6332 ;; *************** function ___ftmul *****************
  6333 ;; Defined at:
  6334 ;;		line 62 in file "D:\mplab\sources\common\ftmul.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;  f1              3   35[COMRAM] float 
  6337 ;;  f2              3   38[COMRAM] float 
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;  f3_as_produc    3   45[COMRAM] unsigned um
  6340 ;;  sign            1   49[COMRAM] unsigned char 
  6341 ;;  cntr            1   48[COMRAM] unsigned char 
  6342 ;;  exp             1   44[COMRAM] unsigned char 
  6343 ;; Return value:  Size  Location     Type
  6344 ;;                  3   35[COMRAM] float 
  6345 ;; Registers used:
  6346 ;;		wreg, status,2, status,0, cstack
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6352 ;;      Params:         6       0       0       0       0       0       0       0       0
  6353 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6354 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6355 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6356 ;;Total ram usage:       15 bytes
  6357 ;; Hardware stack levels used:    1
  6358 ;; Hardware stack levels required when called:    2
  6359 ;; This function calls:
  6360 ;;		___ftpack
  6361 ;; This function is called by:
  6362 ;;		_main
  6363 ;;		_convert_to_degrees
  6364 ;;		_fround
  6365 ;;		_scale
  6366 ;;		_sprintf
  6367 ;;		_strtod
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           	psect	text21
  6372  00299C                     __ptext21:
  6373                           	opt stack 0
  6374  00299C                     ___ftmul:
  6375                           	opt stack 26
  6376                           
  6377                           ;incstack = 0
  6378  00299C  C026  F02A         	movff	___ftmul@f1+2,??___ftmul
  6379  0029A0  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  6380  0029A2  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  6381  0029A4  3425               	rlcf	___ftmul@f1+1,w,c
  6382  0029A6  362A               	rlcf	??___ftmul& (0+255),f,c
  6383  0029A8  E301               	bnc	u4851
  6384  0029AA  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  6385  0029AC                     u4851:
  6386  0029AC  502A               	movf	??___ftmul,w,c
  6387  0029AE  6E2D               	movwf	___ftmul@exp,c
  6388  0029B0  502D               	movf	___ftmul@exp,w,c
  6389  0029B2  A4D8               	btfss	status,2,c
  6390  0029B4  D007               	goto	l4272
  6391  0029B6  0E00               	movlw	0
  6392  0029B8  6E24               	movwf	?___ftmul,c
  6393  0029BA  0E00               	movlw	0
  6394  0029BC  6E25               	movwf	?___ftmul+1,c
  6395  0029BE  0E00               	movlw	0
  6396  0029C0  6E26               	movwf	?___ftmul+2,c
  6397  0029C2  0012               	return	
  6398  0029C4                     l4272:
  6399  0029C4  C029  F02A         	movff	___ftmul@f2+2,??___ftmul
  6400  0029C8  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  6401  0029CA  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  6402  0029CC  3428               	rlcf	___ftmul@f2+1,w,c
  6403  0029CE  362A               	rlcf	??___ftmul& (0+255),f,c
  6404  0029D0  E301               	bnc	u4871
  6405  0029D2  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  6406  0029D4                     u4871:
  6407  0029D4  502A               	movf	??___ftmul,w,c
  6408  0029D6  6E32               	movwf	___ftmul@sign,c
  6409  0029D8  5032               	movf	___ftmul@sign,w,c
  6410  0029DA  A4D8               	btfss	status,2,c
  6411  0029DC  D007               	goto	l4278
  6412  0029DE  0E00               	movlw	0
  6413  0029E0  6E24               	movwf	?___ftmul,c
  6414  0029E2  0E00               	movlw	0
  6415  0029E4  6E25               	movwf	?___ftmul+1,c
  6416  0029E6  0E00               	movlw	0
  6417  0029E8  6E26               	movwf	?___ftmul+2,c
  6418  0029EA  0012               	return	
  6419  0029EC                     l4278:
  6420  0029EC  5032               	movf	___ftmul@sign,w,c
  6421  0029EE  0F7B               	addlw	123
  6422  0029F0  262D               	addwf	___ftmul@exp,f,c
  6423  0029F2  C026  F032         	movff	___ftmul@f1+2,___ftmul@sign
  6424  0029F6  5029               	movf	___ftmul@f2+2,w,c
  6425  0029F8  1A32               	xorwf	___ftmul@sign,f,c
  6426  0029FA  0E80               	movlw	128
  6427  0029FC  1632               	andwf	___ftmul@sign,f,c
  6428  0029FE  8E25               	bsf	___ftmul@f1+1,7,c
  6429  002A00  8E28               	bsf	___ftmul@f2+1,7,c
  6430  002A02  0EFF               	movlw	255
  6431  002A04  1627               	andwf	___ftmul@f2,f,c
  6432  002A06  0EFF               	movlw	255
  6433  002A08  1628               	andwf	___ftmul@f2+1,f,c
  6434  002A0A  0E00               	movlw	0
  6435  002A0C  1629               	andwf	___ftmul@f2+2,f,c
  6436  002A0E  0E00               	movlw	0
  6437  002A10  6E2E               	movwf	___ftmul@f3_as_product,c
  6438  002A12  0E00               	movlw	0
  6439  002A14  6E2F               	movwf	___ftmul@f3_as_product+1,c
  6440  002A16  0E00               	movlw	0
  6441  002A18  6E30               	movwf	___ftmul@f3_as_product+2,c
  6442  002A1A  0E07               	movlw	7
  6443  002A1C  6E31               	movwf	___ftmul@cntr,c
  6444  002A1E                     l4292:
  6445  002A1E  A024               	btfss	___ftmul@f1,0,c
  6446  002A20  D006               	goto	l4296
  6447  002A22  5027               	movf	___ftmul@f2,w,c
  6448  002A24  262E               	addwf	___ftmul@f3_as_product,f,c
  6449  002A26  5028               	movf	___ftmul@f2+1,w,c
  6450  002A28  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  6451  002A2A  5029               	movf	___ftmul@f2+2,w,c
  6452  002A2C  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  6453  002A2E                     l4296:
  6454  002A2E  90D8               	bcf	status,0,c
  6455  002A30  3226               	rrcf	___ftmul@f1+2,f,c
  6456  002A32  3225               	rrcf	___ftmul@f1+1,f,c
  6457  002A34  3224               	rrcf	___ftmul@f1,f,c
  6458  002A36  90D8               	bcf	status,0,c
  6459  002A38  3627               	rlcf	___ftmul@f2,f,c
  6460  002A3A  3628               	rlcf	___ftmul@f2+1,f,c
  6461  002A3C  3629               	rlcf	___ftmul@f2+2,f,c
  6462  002A3E  2E31               	decfsz	___ftmul@cntr,f,c
  6463  002A40  D7EE               	goto	l4292
  6464  002A42  0E09               	movlw	9
  6465  002A44  6E31               	movwf	___ftmul@cntr,c
  6466  002A46                     l4302:
  6467  002A46  A024               	btfss	___ftmul@f1,0,c
  6468  002A48  D006               	goto	l4306
  6469  002A4A  5027               	movf	___ftmul@f2,w,c
  6470  002A4C  262E               	addwf	___ftmul@f3_as_product,f,c
  6471  002A4E  5028               	movf	___ftmul@f2+1,w,c
  6472  002A50  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  6473  002A52  5029               	movf	___ftmul@f2+2,w,c
  6474  002A54  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  6475  002A56                     l4306:
  6476  002A56  90D8               	bcf	status,0,c
  6477  002A58  3226               	rrcf	___ftmul@f1+2,f,c
  6478  002A5A  3225               	rrcf	___ftmul@f1+1,f,c
  6479  002A5C  3224               	rrcf	___ftmul@f1,f,c
  6480  002A5E  90D8               	bcf	status,0,c
  6481  002A60  3230               	rrcf	___ftmul@f3_as_product+2,f,c
  6482  002A62  322F               	rrcf	___ftmul@f3_as_product+1,f,c
  6483  002A64  322E               	rrcf	___ftmul@f3_as_product,f,c
  6484  002A66  2E31               	decfsz	___ftmul@cntr,f,c
  6485  002A68  D7EE               	goto	l4302
  6486  002A6A  C02E  F010         	movff	___ftmul@f3_as_product,___ftpack@arg
  6487  002A6E  C02F  F011         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6488  002A72  C030  F012         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6489  002A76  C02D  F013         	movff	___ftmul@exp,___ftpack@exp
  6490  002A7A  C032  F014         	movff	___ftmul@sign,___ftpack@sign
  6491  002A7E  ECBB  F015         	call	___ftpack	;wreg free
  6492  002A82  C010  F024         	movff	?___ftpack,?___ftmul
  6493  002A86  C011  F025         	movff	?___ftpack+1,?___ftmul+1
  6494  002A8A  C012  F026         	movff	?___ftpack+2,?___ftmul+2
  6495  002A8E  0012               	return	
  6496  002A90                     __end_of___ftmul:
  6497                           	opt stack 0
  6498                           tblptru	equ	0xFF8
  6499                           tblptrh	equ	0xFF7
  6500                           tblptrl	equ	0xFF6
  6501                           tablat	equ	0xFF5
  6502                           prodh	equ	0xFF4
  6503                           prodl	equ	0xFF3
  6504                           intcon	equ	0xFF2
  6505                           postinc0	equ	0xFEE
  6506                           wreg	equ	0xFE8
  6507                           indf1	equ	0xFE7
  6508                           fsr1h	equ	0xFE2
  6509                           fsr1l	equ	0xFE1
  6510                           indf2	equ	0xFDF
  6511                           postinc2	equ	0xFDE
  6512                           postdec2	equ	0xFDD
  6513                           fsr2h	equ	0xFDA
  6514                           fsr2l	equ	0xFD9
  6515                           status	equ	0xFD8
  6516                           
  6517 ;; *************** function ___awmod *****************
  6518 ;; Defined at:
  6519 ;;		line 8 in file "D:\mplab\sources\common\awmod.c"
  6520 ;; Parameters:    Size  Location     Type
  6521 ;;  dividend        2   15[COMRAM] int 
  6522 ;;  divisor         2   17[COMRAM] int 
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;  sign            1   20[COMRAM] unsigned char 
  6525 ;;  counter         1   19[COMRAM] unsigned char 
  6526 ;; Return value:  Size  Location     Type
  6527 ;;                  2   15[COMRAM] int 
  6528 ;; Registers used:
  6529 ;;		wreg, status,2, status,0
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6535 ;;      Params:         4       0       0       0       0       0       0       0       0
  6536 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6537 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6538 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6539 ;;Total ram usage:        6 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:    1
  6542 ;; This function calls:
  6543 ;;		Nothing
  6544 ;; This function is called by:
  6545 ;;		_fround
  6546 ;;		_scale
  6547 ;; This function uses a non-reentrant model
  6548 ;;
  6549                           
  6550                           	psect	text22
  6551  003158                     __ptext22:
  6552                           	opt stack 0
  6553  003158                     ___awmod:
  6554                           	opt stack 27
  6555                           
  6556                           ;incstack = 0
  6557  003158  0E00               	movlw	0
  6558  00315A  6E15               	movwf	___awmod@sign,c
  6559  00315C  AE11               	btfss	___awmod@dividend+1,7,c
  6560  00315E  D006               	goto	l2958
  6561  003160  6C10               	negf	___awmod@dividend,c
  6562  003162  1E11               	comf	___awmod@dividend+1,f,c
  6563  003164  B0D8               	btfsc	status,0,c
  6564  003166  2A11               	incf	___awmod@dividend+1,f,c
  6565  003168  0E01               	movlw	1
  6566  00316A  6E15               	movwf	___awmod@sign,c
  6567  00316C                     l2958:
  6568  00316C  AE13               	btfss	___awmod@divisor+1,7,c
  6569  00316E  D004               	goto	l2962
  6570  003170  6C12               	negf	___awmod@divisor,c
  6571  003172  1E13               	comf	___awmod@divisor+1,f,c
  6572  003174  B0D8               	btfsc	status,0,c
  6573  003176  2A13               	incf	___awmod@divisor+1,f,c
  6574  003178                     l2962:
  6575  003178  5012               	movf	___awmod@divisor,w,c
  6576  00317A  1013               	iorwf	___awmod@divisor+1,w,c
  6577  00317C  B4D8               	btfsc	status,2,c
  6578  00317E  D018               	goto	l2978
  6579  003180  0E01               	movlw	1
  6580  003182  6E14               	movwf	___awmod@counter,c
  6581  003184  D004               	goto	l2968
  6582  003186                     l2966:
  6583  003186  90D8               	bcf	status,0,c
  6584  003188  3612               	rlcf	___awmod@divisor,f,c
  6585  00318A  3613               	rlcf	___awmod@divisor+1,f,c
  6586  00318C  2A14               	incf	___awmod@counter,f,c
  6587  00318E                     l2968:
  6588  00318E  AE13               	btfss	___awmod@divisor+1,7,c
  6589  003190  D7FA               	goto	l2966
  6590  003192                     l2970:
  6591  003192  5012               	movf	___awmod@divisor,w,c
  6592  003194  5C10               	subwf	___awmod@dividend,w,c
  6593  003196  5013               	movf	___awmod@divisor+1,w,c
  6594  003198  5811               	subwfb	___awmod@dividend+1,w,c
  6595  00319A  A0D8               	btfss	status,0,c
  6596  00319C  D004               	goto	l2974
  6597  00319E  5012               	movf	___awmod@divisor,w,c
  6598  0031A0  5E10               	subwf	___awmod@dividend,f,c
  6599  0031A2  5013               	movf	___awmod@divisor+1,w,c
  6600  0031A4  5A11               	subwfb	___awmod@dividend+1,f,c
  6601  0031A6                     l2974:
  6602  0031A6  90D8               	bcf	status,0,c
  6603  0031A8  3213               	rrcf	___awmod@divisor+1,f,c
  6604  0031AA  3212               	rrcf	___awmod@divisor,f,c
  6605  0031AC  2E14               	decfsz	___awmod@counter,f,c
  6606  0031AE  D7F1               	goto	l2970
  6607  0031B0                     l2978:
  6608  0031B0  5015               	movf	___awmod@sign,w,c
  6609  0031B2  B4D8               	btfsc	status,2,c
  6610  0031B4  D004               	goto	l2982
  6611  0031B6  6C10               	negf	___awmod@dividend,c
  6612  0031B8  1E11               	comf	___awmod@dividend+1,f,c
  6613  0031BA  B0D8               	btfsc	status,0,c
  6614  0031BC  2A11               	incf	___awmod@dividend+1,f,c
  6615  0031BE                     l2982:
  6616  0031BE  C010  F010         	movff	___awmod@dividend,?___awmod
  6617  0031C2  C011  F011         	movff	___awmod@dividend+1,?___awmod+1
  6618  0031C6  0012               	return	
  6619  0031C8                     __end_of___awmod:
  6620                           	opt stack 0
  6621                           tblptru	equ	0xFF8
  6622                           tblptrh	equ	0xFF7
  6623                           tblptrl	equ	0xFF6
  6624                           tablat	equ	0xFF5
  6625                           prodh	equ	0xFF4
  6626                           prodl	equ	0xFF3
  6627                           intcon	equ	0xFF2
  6628                           postinc0	equ	0xFEE
  6629                           wreg	equ	0xFE8
  6630                           indf1	equ	0xFE7
  6631                           fsr1h	equ	0xFE2
  6632                           fsr1l	equ	0xFE1
  6633                           indf2	equ	0xFDF
  6634                           postinc2	equ	0xFDE
  6635                           postdec2	equ	0xFDD
  6636                           fsr2h	equ	0xFDA
  6637                           fsr2l	equ	0xFD9
  6638                           status	equ	0xFD8
  6639                           
  6640 ;; *************** function ___awdiv *****************
  6641 ;; Defined at:
  6642 ;;		line 8 in file "D:\mplab\sources\common\awdiv.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;  dividend        2   21[COMRAM] int 
  6645 ;;  divisor         2   23[COMRAM] int 
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;  quotient        2   27[COMRAM] int 
  6648 ;;  sign            1   26[COMRAM] unsigned char 
  6649 ;;  counter         1   25[COMRAM] unsigned char 
  6650 ;; Return value:  Size  Location     Type
  6651 ;;                  2   21[COMRAM] int 
  6652 ;; Registers used:
  6653 ;;		wreg, status,2, status,0
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6659 ;;      Params:         4       0       0       0       0       0       0       0       0
  6660 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6661 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6662 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6663 ;;Total ram usage:        8 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; Hardware stack levels required when called:    1
  6666 ;; This function calls:
  6667 ;;		Nothing
  6668 ;; This function is called by:
  6669 ;;		_fround
  6670 ;;		_scale
  6671 ;;		_sprintf
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           	psect	text23
  6676  002E74                     __ptext23:
  6677                           	opt stack 0
  6678  002E74                     ___awdiv:
  6679                           	opt stack 27
  6680                           
  6681                           ;incstack = 0
  6682  002E74  0E00               	movlw	0
  6683  002E76  6E1B               	movwf	___awdiv@sign,c
  6684  002E78  AE19               	btfss	___awdiv@divisor+1,7,c
  6685  002E7A  D006               	goto	l2914
  6686  002E7C  6C18               	negf	___awdiv@divisor,c
  6687  002E7E  1E19               	comf	___awdiv@divisor+1,f,c
  6688  002E80  B0D8               	btfsc	status,0,c
  6689  002E82  2A19               	incf	___awdiv@divisor+1,f,c
  6690  002E84  0E01               	movlw	1
  6691  002E86  6E1B               	movwf	___awdiv@sign,c
  6692  002E88                     l2914:
  6693  002E88  AE17               	btfss	___awdiv@dividend+1,7,c
  6694  002E8A  D006               	goto	l2920
  6695  002E8C  6C16               	negf	___awdiv@dividend,c
  6696  002E8E  1E17               	comf	___awdiv@dividend+1,f,c
  6697  002E90  B0D8               	btfsc	status,0,c
  6698  002E92  2A17               	incf	___awdiv@dividend+1,f,c
  6699  002E94  0E01               	movlw	1
  6700  002E96  1A1B               	xorwf	___awdiv@sign,f,c
  6701  002E98                     l2920:
  6702  002E98  0E00               	movlw	0
  6703  002E9A  6E1D               	movwf	___awdiv@quotient+1,c
  6704  002E9C  0E00               	movlw	0
  6705  002E9E  6E1C               	movwf	___awdiv@quotient,c
  6706  002EA0  5018               	movf	___awdiv@divisor,w,c
  6707  002EA2  1019               	iorwf	___awdiv@divisor+1,w,c
  6708  002EA4  B4D8               	btfsc	status,2,c
  6709  002EA6  D01C               	goto	l2942
  6710  002EA8  0E01               	movlw	1
  6711  002EAA  6E1A               	movwf	___awdiv@counter,c
  6712  002EAC  D004               	goto	l2928
  6713  002EAE                     l2926:
  6714  002EAE  90D8               	bcf	status,0,c
  6715  002EB0  3618               	rlcf	___awdiv@divisor,f,c
  6716  002EB2  3619               	rlcf	___awdiv@divisor+1,f,c
  6717  002EB4  2A1A               	incf	___awdiv@counter,f,c
  6718  002EB6                     l2928:
  6719  002EB6  AE19               	btfss	___awdiv@divisor+1,7,c
  6720  002EB8  D7FA               	goto	l2926
  6721  002EBA                     l2930:
  6722  002EBA  90D8               	bcf	status,0,c
  6723  002EBC  361C               	rlcf	___awdiv@quotient,f,c
  6724  002EBE  361D               	rlcf	___awdiv@quotient+1,f,c
  6725  002EC0  5018               	movf	___awdiv@divisor,w,c
  6726  002EC2  5C16               	subwf	___awdiv@dividend,w,c
  6727  002EC4  5019               	movf	___awdiv@divisor+1,w,c
  6728  002EC6  5817               	subwfb	___awdiv@dividend+1,w,c
  6729  002EC8  A0D8               	btfss	status,0,c
  6730  002ECA  D005               	goto	l2938
  6731  002ECC  5018               	movf	___awdiv@divisor,w,c
  6732  002ECE  5E16               	subwf	___awdiv@dividend,f,c
  6733  002ED0  5019               	movf	___awdiv@divisor+1,w,c
  6734  002ED2  5A17               	subwfb	___awdiv@dividend+1,f,c
  6735  002ED4  801C               	bsf	___awdiv@quotient,0,c
  6736  002ED6                     l2938:
  6737  002ED6  90D8               	bcf	status,0,c
  6738  002ED8  3219               	rrcf	___awdiv@divisor+1,f,c
  6739  002EDA  3218               	rrcf	___awdiv@divisor,f,c
  6740  002EDC  2E1A               	decfsz	___awdiv@counter,f,c
  6741  002EDE  D7ED               	goto	l2930
  6742  002EE0                     l2942:
  6743  002EE0  501B               	movf	___awdiv@sign,w,c
  6744  002EE2  B4D8               	btfsc	status,2,c
  6745  002EE4  D004               	goto	l2946
  6746  002EE6  6C1C               	negf	___awdiv@quotient,c
  6747  002EE8  1E1D               	comf	___awdiv@quotient+1,f,c
  6748  002EEA  B0D8               	btfsc	status,0,c
  6749  002EEC  2A1D               	incf	___awdiv@quotient+1,f,c
  6750  002EEE                     l2946:
  6751  002EEE  C01C  F016         	movff	___awdiv@quotient,?___awdiv
  6752  002EF2  C01D  F017         	movff	___awdiv@quotient+1,?___awdiv+1
  6753  002EF6  0012               	return	
  6754  002EF8                     __end_of___awdiv:
  6755                           	opt stack 0
  6756                           tblptru	equ	0xFF8
  6757                           tblptrh	equ	0xFF7
  6758                           tblptrl	equ	0xFF6
  6759                           tablat	equ	0xFF5
  6760                           prodh	equ	0xFF4
  6761                           prodl	equ	0xFF3
  6762                           intcon	equ	0xFF2
  6763                           postinc0	equ	0xFEE
  6764                           wreg	equ	0xFE8
  6765                           indf1	equ	0xFE7
  6766                           fsr1h	equ	0xFE2
  6767                           fsr1l	equ	0xFE1
  6768                           indf2	equ	0xFDF
  6769                           postinc2	equ	0xFDE
  6770                           postdec2	equ	0xFDD
  6771                           fsr2h	equ	0xFDA
  6772                           fsr2l	equ	0xFD9
  6773                           status	equ	0xFD8
  6774                           
  6775 ;; *************** function __tdiv_to_l_ *****************
  6776 ;; Defined at:
  6777 ;;		line 60 in file "D:\mplab\sources\common\ftdivl.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;  f1              3   15[COMRAM] float 
  6780 ;;  f2              3   18[COMRAM] float 
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;  quot            4   24[COMRAM] unsigned long 
  6783 ;;  exp1            1   29[COMRAM] unsigned char 
  6784 ;;  cntr            1   28[COMRAM] unsigned char 
  6785 ;; Return value:  Size  Location     Type
  6786 ;;                  4   15[COMRAM] unsigned long 
  6787 ;; Registers used:
  6788 ;;		wreg, status,2, status,0
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6794 ;;      Params:         6       0       0       0       0       0       0       0       0
  6795 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6796 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6797 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6798 ;;Total ram usage:       15 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:    1
  6801 ;; This function calls:
  6802 ;;		Nothing
  6803 ;; This function is called by:
  6804 ;;		_sprintf
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           	psect	text24
  6809  002308                     __ptext24:
  6810                           	opt stack 0
  6811  002308                     __tdiv_to_l_:
  6812                           	opt stack 28
  6813                           
  6814                           ;incstack = 0
  6815  002308  C012  F016         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6816  00230C  6A17               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6817  00230E  6A18               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6818  002310  3411               	rlcf	__tdiv_to_l_@f1+1,w,c
  6819  002312  3616               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6820  002314  E301               	bnc	u3011
  6821  002316  8017               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6822  002318                     u3011:
  6823  002318  5016               	movf	??__tdiv_to_l_,w,c
  6824  00231A  6E1E               	movwf	__tdiv_to_l_@exp1,c
  6825  00231C  501E               	movf	__tdiv_to_l_@exp1,w,c
  6826  00231E  A4D8               	btfss	status,2,c
  6827  002320  D009               	goto	l3088
  6828  002322  0E00               	movlw	0
  6829  002324  6E10               	movwf	?__tdiv_to_l_,c
  6830  002326  0E00               	movlw	0
  6831  002328  6E11               	movwf	?__tdiv_to_l_+1,c
  6832  00232A  0E00               	movlw	0
  6833  00232C  6E12               	movwf	?__tdiv_to_l_+2,c
  6834  00232E  0E00               	movlw	0
  6835  002330  6E13               	movwf	?__tdiv_to_l_+3,c
  6836  002332  0012               	return	
  6837  002334                     l3088:
  6838  002334  C015  F016         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6839  002338  6A17               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6840  00233A  6A18               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6841  00233C  3414               	rlcf	__tdiv_to_l_@f2+1,w,c
  6842  00233E  3616               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6843  002340  E301               	bnc	u3031
  6844  002342  8017               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6845  002344                     u3031:
  6846  002344  5016               	movf	??__tdiv_to_l_,w,c
  6847  002346  6E1D               	movwf	__tdiv_to_l_@cntr,c
  6848  002348  501D               	movf	__tdiv_to_l_@cntr,w,c
  6849  00234A  A4D8               	btfss	status,2,c
  6850  00234C  D009               	goto	l3094
  6851  00234E  0E00               	movlw	0
  6852  002350  6E10               	movwf	?__tdiv_to_l_,c
  6853  002352  0E00               	movlw	0
  6854  002354  6E11               	movwf	?__tdiv_to_l_+1,c
  6855  002356  0E00               	movlw	0
  6856  002358  6E12               	movwf	?__tdiv_to_l_+2,c
  6857  00235A  0E00               	movlw	0
  6858  00235C  6E13               	movwf	?__tdiv_to_l_+3,c
  6859  00235E  0012               	return	
  6860  002360                     l3094:
  6861  002360  8E11               	bsf	__tdiv_to_l_@f1+1,7,c
  6862  002362  0EFF               	movlw	255
  6863  002364  1610               	andwf	__tdiv_to_l_@f1,f,c
  6864  002366  0EFF               	movlw	255
  6865  002368  1611               	andwf	__tdiv_to_l_@f1+1,f,c
  6866  00236A  0E00               	movlw	0
  6867  00236C  1612               	andwf	__tdiv_to_l_@f1+2,f,c
  6868  00236E  8E14               	bsf	__tdiv_to_l_@f2+1,7,c
  6869  002370  0EFF               	movlw	255
  6870  002372  1613               	andwf	__tdiv_to_l_@f2,f,c
  6871  002374  0EFF               	movlw	255
  6872  002376  1614               	andwf	__tdiv_to_l_@f2+1,f,c
  6873  002378  0E00               	movlw	0
  6874  00237A  1615               	andwf	__tdiv_to_l_@f2+2,f,c
  6875  00237C  0E00               	movlw	0
  6876  00237E  6E19               	movwf	__tdiv_to_l_@quot,c
  6877  002380  0E00               	movlw	0
  6878  002382  6E1A               	movwf	__tdiv_to_l_@quot+1,c
  6879  002384  0E00               	movlw	0
  6880  002386  6E1B               	movwf	__tdiv_to_l_@quot+2,c
  6881  002388  0E00               	movlw	0
  6882  00238A  6E1C               	movwf	__tdiv_to_l_@quot+3,c
  6883  00238C  0E7F               	movlw	127
  6884  00238E  5E1E               	subwf	__tdiv_to_l_@exp1,f,c
  6885  002390  501D               	movf	__tdiv_to_l_@cntr,w,c
  6886  002392  0F98               	addlw	152
  6887  002394  5E1E               	subwf	__tdiv_to_l_@exp1,f,c
  6888  002396  0E18               	movlw	24
  6889  002398  6E1D               	movwf	__tdiv_to_l_@cntr,c
  6890  00239A                     l746:
  6891  00239A  90D8               	bcf	status,0,c
  6892  00239C  3619               	rlcf	__tdiv_to_l_@quot,f,c
  6893  00239E  361A               	rlcf	__tdiv_to_l_@quot+1,f,c
  6894  0023A0  361B               	rlcf	__tdiv_to_l_@quot+2,f,c
  6895  0023A2  361C               	rlcf	__tdiv_to_l_@quot+3,f,c
  6896  0023A4  5013               	movf	__tdiv_to_l_@f2,w,c
  6897  0023A6  5C10               	subwf	__tdiv_to_l_@f1,w,c
  6898  0023A8  5014               	movf	__tdiv_to_l_@f2+1,w,c
  6899  0023AA  5811               	subwfb	__tdiv_to_l_@f1+1,w,c
  6900  0023AC  5015               	movf	__tdiv_to_l_@f2+2,w,c
  6901  0023AE  5812               	subwfb	__tdiv_to_l_@f1+2,w,c
  6902  0023B0  A0D8               	btfss	status,0,c
  6903  0023B2  D007               	goto	l747
  6904  0023B4  5013               	movf	__tdiv_to_l_@f2,w,c
  6905  0023B6  5E10               	subwf	__tdiv_to_l_@f1,f,c
  6906  0023B8  5014               	movf	__tdiv_to_l_@f2+1,w,c
  6907  0023BA  5A11               	subwfb	__tdiv_to_l_@f1+1,f,c
  6908  0023BC  5015               	movf	__tdiv_to_l_@f2+2,w,c
  6909  0023BE  5A12               	subwfb	__tdiv_to_l_@f1+2,f,c
  6910  0023C0  8019               	bsf	__tdiv_to_l_@quot,0,c
  6911  0023C2                     l747:
  6912  0023C2  90D8               	bcf	status,0,c
  6913  0023C4  3610               	rlcf	__tdiv_to_l_@f1,f,c
  6914  0023C6  3611               	rlcf	__tdiv_to_l_@f1+1,f,c
  6915  0023C8  3612               	rlcf	__tdiv_to_l_@f1+2,f,c
  6916  0023CA  2E1D               	decfsz	__tdiv_to_l_@cntr,f,c
  6917  0023CC  D7E6               	goto	l746
  6918  0023CE  AE1E               	btfss	__tdiv_to_l_@exp1,7,c
  6919  0023D0  D016               	goto	l3128
  6920  0023D2  501E               	movf	__tdiv_to_l_@exp1,w,c
  6921  0023D4  0A80               	xorlw	128
  6922  0023D6  0F97               	addlw	151
  6923  0023D8  B0D8               	btfsc	status,0,c
  6924  0023DA  D009               	goto	l3124
  6925  0023DC  0E00               	movlw	0
  6926  0023DE  6E10               	movwf	?__tdiv_to_l_,c
  6927  0023E0  0E00               	movlw	0
  6928  0023E2  6E11               	movwf	?__tdiv_to_l_+1,c
  6929  0023E4  0E00               	movlw	0
  6930  0023E6  6E12               	movwf	?__tdiv_to_l_+2,c
  6931  0023E8  0E00               	movlw	0
  6932  0023EA  6E13               	movwf	?__tdiv_to_l_+3,c
  6933  0023EC  0012               	return	
  6934  0023EE                     l3124:
  6935  0023EE  90D8               	bcf	status,0,c
  6936  0023F0  321C               	rrcf	__tdiv_to_l_@quot+3,f,c
  6937  0023F2  321B               	rrcf	__tdiv_to_l_@quot+2,f,c
  6938  0023F4  321A               	rrcf	__tdiv_to_l_@quot+1,f,c
  6939  0023F6  3219               	rrcf	__tdiv_to_l_@quot,f,c
  6940  0023F8  3E1E               	incfsz	__tdiv_to_l_@exp1,f,c
  6941  0023FA  D7F9               	goto	l3124
  6942  0023FC  D015               	goto	l753
  6943  0023FE                     l3128:
  6944  0023FE  0E17               	movlw	23
  6945  002400  641E               	cpfsgt	__tdiv_to_l_@exp1,c
  6946  002402  D00F               	goto	l3136
  6947  002404  0E00               	movlw	0
  6948  002406  6E10               	movwf	?__tdiv_to_l_,c
  6949  002408  0E00               	movlw	0
  6950  00240A  6E11               	movwf	?__tdiv_to_l_+1,c
  6951  00240C  0E00               	movlw	0
  6952  00240E  6E12               	movwf	?__tdiv_to_l_+2,c
  6953  002410  0E00               	movlw	0
  6954  002412  6E13               	movwf	?__tdiv_to_l_+3,c
  6955  002414  0012               	return	
  6956  002416                     l3134:
  6957  002416  90D8               	bcf	status,0,c
  6958  002418  3619               	rlcf	__tdiv_to_l_@quot,f,c
  6959  00241A  361A               	rlcf	__tdiv_to_l_@quot+1,f,c
  6960  00241C  361B               	rlcf	__tdiv_to_l_@quot+2,f,c
  6961  00241E  361C               	rlcf	__tdiv_to_l_@quot+3,f,c
  6962  002420  061E               	decf	__tdiv_to_l_@exp1,f,c
  6963  002422                     l3136:
  6964  002422  501E               	movf	__tdiv_to_l_@exp1,w,c
  6965  002424  A4D8               	btfss	status,2,c
  6966  002426  D7F7               	goto	l3134
  6967  002428                     l753:
  6968  002428  C019  F010         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6969  00242C  C01A  F011         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6970  002430  C01B  F012         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6971  002434  C01C  F013         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6972  002438  0012               	return		;funcret
  6973  00243A                     __end_of__tdiv_to_l_:
  6974                           	opt stack 0
  6975                           tblptru	equ	0xFF8
  6976                           tblptrh	equ	0xFF7
  6977                           tblptrl	equ	0xFF6
  6978                           tablat	equ	0xFF5
  6979                           prodh	equ	0xFF4
  6980                           prodl	equ	0xFF3
  6981                           intcon	equ	0xFF2
  6982                           postinc0	equ	0xFEE
  6983                           wreg	equ	0xFE8
  6984                           indf1	equ	0xFE7
  6985                           fsr1h	equ	0xFE2
  6986                           fsr1l	equ	0xFE1
  6987                           indf2	equ	0xFDF
  6988                           postinc2	equ	0xFDE
  6989                           postdec2	equ	0xFDD
  6990                           fsr2h	equ	0xFDA
  6991                           fsr2l	equ	0xFD9
  6992                           status	equ	0xFD8
  6993                           
  6994 ;; *************** function __div_to_l_ *****************
  6995 ;; Defined at:
  6996 ;;		line 60 in file "D:\mplab\sources\common\fldivl.c"
  6997 ;; Parameters:    Size  Location     Type
  6998 ;;  f1              3   15[COMRAM] unsigned long 
  6999 ;;  f2              3   18[COMRAM] unsigned long 
  7000 ;; Auto vars:     Size  Location     Type
  7001 ;;  quot            4   21[COMRAM] unsigned long 
  7002 ;;  exp1            1   26[COMRAM] unsigned char 
  7003 ;;  cntr            1   25[COMRAM] unsigned char 
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  4   15[COMRAM] unsigned long 
  7006 ;; Registers used:
  7007 ;;		wreg, status,2, status,0
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7013 ;;      Params:         6       0       0       0       0       0       0       0       0
  7014 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7016 ;;      Totals:        12       0       0       0       0       0       0       0       0
  7017 ;;Total ram usage:       12 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    1
  7020 ;; This function calls:
  7021 ;;		Nothing
  7022 ;; This function is called by:
  7023 ;;		_sprintf
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text25
  7028  00243A                     __ptext25:
  7029                           	opt stack 0
  7030  00243A                     __div_to_l_:
  7031                           	opt stack 28
  7032                           
  7033                           ;incstack = 0
  7034  00243A  3412               	rlcf	__div_to_l_@f1+2,w,c
  7035  00243C  3413               	rlcf	__div_to_l_@f1+3,w,c
  7036  00243E  6E1B               	movwf	__div_to_l_@exp1,c
  7037  002440  501B               	movf	__div_to_l_@exp1,w,c
  7038  002442  A4D8               	btfss	status,2,c
  7039  002444  D009               	goto	l3144
  7040  002446  0E00               	movlw	0
  7041  002448  6E10               	movwf	?__div_to_l_,c
  7042  00244A  0E00               	movlw	0
  7043  00244C  6E11               	movwf	?__div_to_l_+1,c
  7044  00244E  0E00               	movlw	0
  7045  002450  6E12               	movwf	?__div_to_l_+2,c
  7046  002452  0E00               	movlw	0
  7047  002454  6E13               	movwf	?__div_to_l_+3,c
  7048  002456  0012               	return	
  7049  002458                     l3144:
  7050  002458  3415               	rlcf	__div_to_l_@f2+2,w,c
  7051  00245A  3416               	rlcf	__div_to_l_@f2+3,w,c
  7052  00245C  6E1A               	movwf	__div_to_l_@cntr,c
  7053  00245E  501A               	movf	__div_to_l_@cntr,w,c
  7054  002460  A4D8               	btfss	status,2,c
  7055  002462  D009               	goto	l3150
  7056  002464  0E00               	movlw	0
  7057  002466  6E10               	movwf	?__div_to_l_,c
  7058  002468  0E00               	movlw	0
  7059  00246A  6E11               	movwf	?__div_to_l_+1,c
  7060  00246C  0E00               	movlw	0
  7061  00246E  6E12               	movwf	?__div_to_l_+2,c
  7062  002470  0E00               	movlw	0
  7063  002472  6E13               	movwf	?__div_to_l_+3,c
  7064  002474  0012               	return	
  7065  002476                     l3150:
  7066  002476  8E12               	bsf	__div_to_l_@f1+2,7,c
  7067  002478  0EFF               	movlw	255
  7068  00247A  1610               	andwf	__div_to_l_@f1,f,c
  7069  00247C  0EFF               	movlw	255
  7070  00247E  1611               	andwf	__div_to_l_@f1+1,f,c
  7071  002480  0EFF               	movlw	255
  7072  002482  1612               	andwf	__div_to_l_@f1+2,f,c
  7073  002484  0E00               	movlw	0
  7074  002486  1613               	andwf	__div_to_l_@f1+3,f,c
  7075  002488  8E15               	bsf	__div_to_l_@f2+2,7,c
  7076  00248A  0EFF               	movlw	255
  7077  00248C  1613               	andwf	__div_to_l_@f2,f,c
  7078  00248E  0EFF               	movlw	255
  7079  002490  1614               	andwf	__div_to_l_@f2+1,f,c
  7080  002492  0EFF               	movlw	255
  7081  002494  1615               	andwf	__div_to_l_@f2+2,f,c
  7082  002496  0E00               	movlw	0
  7083  002498  1616               	andwf	__div_to_l_@f2+3,f,c
  7084  00249A  0E00               	movlw	0
  7085  00249C  6E16               	movwf	__div_to_l_@quot,c
  7086  00249E  0E00               	movlw	0
  7087  0024A0  6E17               	movwf	__div_to_l_@quot+1,c
  7088  0024A2  0E00               	movlw	0
  7089  0024A4  6E18               	movwf	__div_to_l_@quot+2,c
  7090  0024A6  0E00               	movlw	0
  7091  0024A8  6E19               	movwf	__div_to_l_@quot+3,c
  7092  0024AA  0E7F               	movlw	127
  7093  0024AC  5E1B               	subwf	__div_to_l_@exp1,f,c
  7094  0024AE  501A               	movf	__div_to_l_@cntr,w,c
  7095  0024B0  0FA0               	addlw	160
  7096  0024B2  5E1B               	subwf	__div_to_l_@exp1,f,c
  7097  0024B4  0E20               	movlw	32
  7098  0024B6  6E1A               	movwf	__div_to_l_@cntr,c
  7099  0024B8                     l3164:
  7100  0024B8  90D8               	bcf	status,0,c
  7101  0024BA  3616               	rlcf	__div_to_l_@quot,f,c
  7102  0024BC  3617               	rlcf	__div_to_l_@quot+1,f,c
  7103  0024BE  3618               	rlcf	__div_to_l_@quot+2,f,c
  7104  0024C0  3619               	rlcf	__div_to_l_@quot+3,f,c
  7105  0024C2  5013               	movf	__div_to_l_@f2,w,c
  7106  0024C4  5C10               	subwf	__div_to_l_@f1,w,c
  7107  0024C6  5014               	movf	__div_to_l_@f2+1,w,c
  7108  0024C8  5811               	subwfb	__div_to_l_@f1+1,w,c
  7109  0024CA  5015               	movf	__div_to_l_@f2+2,w,c
  7110  0024CC  5812               	subwfb	__div_to_l_@f1+2,w,c
  7111  0024CE  5016               	movf	__div_to_l_@f2+3,w,c
  7112  0024D0  5813               	subwfb	__div_to_l_@f1+3,w,c
  7113  0024D2  A0D8               	btfss	status,0,c
  7114  0024D4  D009               	goto	l3172
  7115  0024D6  5013               	movf	__div_to_l_@f2,w,c
  7116  0024D8  5E10               	subwf	__div_to_l_@f1,f,c
  7117  0024DA  5014               	movf	__div_to_l_@f2+1,w,c
  7118  0024DC  5A11               	subwfb	__div_to_l_@f1+1,f,c
  7119  0024DE  5015               	movf	__div_to_l_@f2+2,w,c
  7120  0024E0  5A12               	subwfb	__div_to_l_@f1+2,f,c
  7121  0024E2  5016               	movf	__div_to_l_@f2+3,w,c
  7122  0024E4  5A13               	subwfb	__div_to_l_@f1+3,f,c
  7123  0024E6  8016               	bsf	__div_to_l_@quot,0,c
  7124  0024E8                     l3172:
  7125  0024E8  90D8               	bcf	status,0,c
  7126  0024EA  3610               	rlcf	__div_to_l_@f1,f,c
  7127  0024EC  3611               	rlcf	__div_to_l_@f1+1,f,c
  7128  0024EE  3612               	rlcf	__div_to_l_@f1+2,f,c
  7129  0024F0  3613               	rlcf	__div_to_l_@f1+3,f,c
  7130  0024F2  2E1A               	decfsz	__div_to_l_@cntr,f,c
  7131  0024F4  D7E1               	goto	l3164
  7132  0024F6  AE1B               	btfss	__div_to_l_@exp1,7,c
  7133  0024F8  D016               	goto	l3188
  7134  0024FA  501B               	movf	__div_to_l_@exp1,w,c
  7135  0024FC  0A80               	xorlw	128
  7136  0024FE  0F9F               	addlw	159
  7137  002500  B0D8               	btfsc	status,0,c
  7138  002502  D009               	goto	l3184
  7139  002504  0E00               	movlw	0
  7140  002506  6E10               	movwf	?__div_to_l_,c
  7141  002508  0E00               	movlw	0
  7142  00250A  6E11               	movwf	?__div_to_l_+1,c
  7143  00250C  0E00               	movlw	0
  7144  00250E  6E12               	movwf	?__div_to_l_+2,c
  7145  002510  0E00               	movlw	0
  7146  002512  6E13               	movwf	?__div_to_l_+3,c
  7147  002514  0012               	return	
  7148  002516                     l3184:
  7149  002516  90D8               	bcf	status,0,c
  7150  002518  3219               	rrcf	__div_to_l_@quot+3,f,c
  7151  00251A  3218               	rrcf	__div_to_l_@quot+2,f,c
  7152  00251C  3217               	rrcf	__div_to_l_@quot+1,f,c
  7153  00251E  3216               	rrcf	__div_to_l_@quot,f,c
  7154  002520  3E1B               	incfsz	__div_to_l_@exp1,f,c
  7155  002522  D7F9               	goto	l3184
  7156  002524  D015               	goto	l649
  7157  002526                     l3188:
  7158  002526  0E1F               	movlw	31
  7159  002528  641B               	cpfsgt	__div_to_l_@exp1,c
  7160  00252A  D00F               	goto	l3196
  7161  00252C  0E00               	movlw	0
  7162  00252E  6E10               	movwf	?__div_to_l_,c
  7163  002530  0E00               	movlw	0
  7164  002532  6E11               	movwf	?__div_to_l_+1,c
  7165  002534  0E00               	movlw	0
  7166  002536  6E12               	movwf	?__div_to_l_+2,c
  7167  002538  0E00               	movlw	0
  7168  00253A  6E13               	movwf	?__div_to_l_+3,c
  7169  00253C  0012               	return	
  7170  00253E                     l3194:
  7171  00253E  90D8               	bcf	status,0,c
  7172  002540  3616               	rlcf	__div_to_l_@quot,f,c
  7173  002542  3617               	rlcf	__div_to_l_@quot+1,f,c
  7174  002544  3618               	rlcf	__div_to_l_@quot+2,f,c
  7175  002546  3619               	rlcf	__div_to_l_@quot+3,f,c
  7176  002548  061B               	decf	__div_to_l_@exp1,f,c
  7177  00254A                     l3196:
  7178  00254A  501B               	movf	__div_to_l_@exp1,w,c
  7179  00254C  A4D8               	btfss	status,2,c
  7180  00254E  D7F7               	goto	l3194
  7181  002550                     l649:
  7182  002550  C016  F010         	movff	__div_to_l_@quot,?__div_to_l_
  7183  002554  C017  F011         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7184  002558  C018  F012         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7185  00255C  C019  F013         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7186  002560  0012               	return		;funcret
  7187  002562                     __end_of__div_to_l_:
  7188                           	opt stack 0
  7189                           tblptru	equ	0xFF8
  7190                           tblptrh	equ	0xFF7
  7191                           tblptrl	equ	0xFF6
  7192                           tablat	equ	0xFF5
  7193                           prodh	equ	0xFF4
  7194                           prodl	equ	0xFF3
  7195                           intcon	equ	0xFF2
  7196                           postinc0	equ	0xFEE
  7197                           wreg	equ	0xFE8
  7198                           indf1	equ	0xFE7
  7199                           fsr1h	equ	0xFE2
  7200                           fsr1l	equ	0xFE1
  7201                           indf2	equ	0xFDF
  7202                           postinc2	equ	0xFDE
  7203                           postdec2	equ	0xFDD
  7204                           fsr2h	equ	0xFDA
  7205                           fsr2l	equ	0xFD9
  7206                           status	equ	0xFD8
  7207                           
  7208 ;; *************** function ___lltoft *****************
  7209 ;; Defined at:
  7210 ;;		line 35 in file "D:\mplab\sources\common\lltoft.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  c               4   23[COMRAM] unsigned long 
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;  exp             1   31[COMRAM] unsigned char 
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  3   23[COMRAM] float 
  7217 ;; Registers used:
  7218 ;;		wreg, status,2, status,0, cstack
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7224 ;;      Params:         4       0       0       0       0       0       0       0       0
  7225 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7226 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7227 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7228 ;;Total ram usage:        9 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; Hardware stack levels required when called:    2
  7231 ;; This function calls:
  7232 ;;		___ftpack
  7233 ;; This function is called by:
  7234 ;;		_sprintf
  7235 ;; This function uses a non-reentrant model
  7236 ;;
  7237                           
  7238                           	psect	text26
  7239  00322E                     __ptext26:
  7240                           	opt stack 0
  7241  00322E                     ___lltoft:
  7242                           	opt stack 27
  7243                           
  7244                           ;incstack = 0
  7245  00322E  0E8E               	movlw	142
  7246  003230  6E20               	movwf	___lltoft@exp,c
  7247  003232  D006               	goto	l4598
  7248  003234                     l4596:
  7249  003234  90D8               	bcf	status,0,c
  7250  003236  321B               	rrcf	___lltoft@c+3,f,c
  7251  003238  321A               	rrcf	___lltoft@c+2,f,c
  7252  00323A  3219               	rrcf	___lltoft@c+1,f,c
  7253  00323C  3218               	rrcf	___lltoft@c,f,c
  7254  00323E  2A20               	incf	___lltoft@exp,f,c
  7255  003240                     l4598:
  7256  003240  0E00               	movlw	0
  7257  003242  1418               	andwf	___lltoft@c,w,c
  7258  003244  6E1C               	movwf	??___lltoft& (0+255),c
  7259  003246  0E00               	movlw	0
  7260  003248  1419               	andwf	___lltoft@c+1,w,c
  7261  00324A  6E1D               	movwf	(??___lltoft+1)& (0+255),c
  7262  00324C  0E00               	movlw	0
  7263  00324E  141A               	andwf	___lltoft@c+2,w,c
  7264  003250  6E1E               	movwf	(??___lltoft+2)& (0+255),c
  7265  003252  0EFF               	movlw	255
  7266  003254  141B               	andwf	___lltoft@c+3,w,c
  7267  003256  6E1F               	movwf	(??___lltoft+3)& (0+255),c
  7268  003258  501C               	movf	??___lltoft,w,c
  7269  00325A  101D               	iorwf	??___lltoft+1,w,c
  7270  00325C  101E               	iorwf	??___lltoft+2,w,c
  7271  00325E  101F               	iorwf	??___lltoft+3,w,c
  7272  003260  A4D8               	btfss	status,2,c
  7273  003262  D7E8               	goto	l4596
  7274  003264  C018  F010         	movff	___lltoft@c,___ftpack@arg
  7275  003268  C019  F011         	movff	___lltoft@c+1,___ftpack@arg+1
  7276  00326C  C01A  F012         	movff	___lltoft@c+2,___ftpack@arg+2
  7277  003270  C020  F013         	movff	___lltoft@exp,___ftpack@exp
  7278  003274  0E00               	movlw	0
  7279  003276  6E14               	movwf	___ftpack@sign,c
  7280  003278  ECBB  F015         	call	___ftpack	;wreg free
  7281  00327C  C010  F018         	movff	?___ftpack,?___lltoft
  7282  003280  C011  F019         	movff	?___ftpack+1,?___lltoft+1
  7283  003284  C012  F01A         	movff	?___ftpack+2,?___lltoft+2
  7284  003288  0012               	return	
  7285  00328A                     __end_of___lltoft:
  7286                           	opt stack 0
  7287                           tblptru	equ	0xFF8
  7288                           tblptrh	equ	0xFF7
  7289                           tblptrl	equ	0xFF6
  7290                           tablat	equ	0xFF5
  7291                           prodh	equ	0xFF4
  7292                           prodl	equ	0xFF3
  7293                           intcon	equ	0xFF2
  7294                           postinc0	equ	0xFEE
  7295                           wreg	equ	0xFE8
  7296                           indf1	equ	0xFE7
  7297                           fsr1h	equ	0xFE2
  7298                           fsr1l	equ	0xFE1
  7299                           indf2	equ	0xFDF
  7300                           postinc2	equ	0xFDE
  7301                           postdec2	equ	0xFDD
  7302                           fsr2h	equ	0xFDA
  7303                           fsr2l	equ	0xFD9
  7304                           status	equ	0xFD8
  7305                           
  7306 ;; *************** function ___llmod *****************
  7307 ;; Defined at:
  7308 ;;		line 8 in file "D:\mplab\sources\common\llmod.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;  dividend        4   15[COMRAM] unsigned long 
  7311 ;;  divisor         4   19[COMRAM] unsigned long 
  7312 ;; Auto vars:     Size  Location     Type
  7313 ;;  counter         1   23[COMRAM] unsigned char 
  7314 ;; Return value:  Size  Location     Type
  7315 ;;                  4   15[COMRAM] unsigned long 
  7316 ;; Registers used:
  7317 ;;		wreg, status,2, status,0
  7318 ;; Tracked objects:
  7319 ;;		On entry : 0/0
  7320 ;;		On exit  : 0/0
  7321 ;;		Unchanged: 0/0
  7322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7323 ;;      Params:         8       0       0       0       0       0       0       0       0
  7324 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7325 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7326 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7327 ;;Total ram usage:        9 bytes
  7328 ;; Hardware stack levels used:    1
  7329 ;; Hardware stack levels required when called:    1
  7330 ;; This function calls:
  7331 ;;		Nothing
  7332 ;; This function is called by:
  7333 ;;		_convert_time_to_UTC
  7334 ;;		_sprintf
  7335 ;; This function uses a non-reentrant model
  7336 ;;
  7337                           
  7338                           	psect	text27
  7339  0031C8                     __ptext27:
  7340                           	opt stack 0
  7341  0031C8                     ___llmod:
  7342                           	opt stack 28
  7343                           
  7344                           ;incstack = 0
  7345  0031C8  5014               	movf	___llmod@divisor,w,c
  7346  0031CA  1015               	iorwf	___llmod@divisor+1,w,c
  7347  0031CC  1016               	iorwf	___llmod@divisor+2,w,c
  7348  0031CE  1017               	iorwf	___llmod@divisor+3,w,c
  7349  0031D0  B4D8               	btfsc	status,2,c
  7350  0031D2  D024               	goto	l843
  7351  0031D4  0E01               	movlw	1
  7352  0031D6  6E18               	movwf	___llmod@counter,c
  7353  0031D8  D006               	goto	l3446
  7354  0031DA                     l3444:
  7355  0031DA  90D8               	bcf	status,0,c
  7356  0031DC  3614               	rlcf	___llmod@divisor,f,c
  7357  0031DE  3615               	rlcf	___llmod@divisor+1,f,c
  7358  0031E0  3616               	rlcf	___llmod@divisor+2,f,c
  7359  0031E2  3617               	rlcf	___llmod@divisor+3,f,c
  7360  0031E4  2A18               	incf	___llmod@counter,f,c
  7361  0031E6                     l3446:
  7362  0031E6  AE17               	btfss	___llmod@divisor+3,7,c
  7363  0031E8  D7F8               	goto	l3444
  7364  0031EA                     l3448:
  7365  0031EA  5014               	movf	___llmod@divisor,w,c
  7366  0031EC  5C10               	subwf	___llmod@dividend,w,c
  7367  0031EE  5015               	movf	___llmod@divisor+1,w,c
  7368  0031F0  5811               	subwfb	___llmod@dividend+1,w,c
  7369  0031F2  5016               	movf	___llmod@divisor+2,w,c
  7370  0031F4  5812               	subwfb	___llmod@dividend+2,w,c
  7371  0031F6  5017               	movf	___llmod@divisor+3,w,c
  7372  0031F8  5813               	subwfb	___llmod@dividend+3,w,c
  7373  0031FA  A0D8               	btfss	status,0,c
  7374  0031FC  D008               	goto	l3452
  7375  0031FE  5014               	movf	___llmod@divisor,w,c
  7376  003200  5E10               	subwf	___llmod@dividend,f,c
  7377  003202  5015               	movf	___llmod@divisor+1,w,c
  7378  003204  5A11               	subwfb	___llmod@dividend+1,f,c
  7379  003206  5016               	movf	___llmod@divisor+2,w,c
  7380  003208  5A12               	subwfb	___llmod@dividend+2,f,c
  7381  00320A  5017               	movf	___llmod@divisor+3,w,c
  7382  00320C  5A13               	subwfb	___llmod@dividend+3,f,c
  7383  00320E                     l3452:
  7384  00320E  90D8               	bcf	status,0,c
  7385  003210  3217               	rrcf	___llmod@divisor+3,f,c
  7386  003212  3216               	rrcf	___llmod@divisor+2,f,c
  7387  003214  3215               	rrcf	___llmod@divisor+1,f,c
  7388  003216  3214               	rrcf	___llmod@divisor,f,c
  7389  003218  2E18               	decfsz	___llmod@counter,f,c
  7390  00321A  D7E7               	goto	l3448
  7391  00321C                     l843:
  7392  00321C  C010  F010         	movff	___llmod@dividend,?___llmod
  7393  003220  C011  F011         	movff	___llmod@dividend+1,?___llmod+1
  7394  003224  C012  F012         	movff	___llmod@dividend+2,?___llmod+2
  7395  003228  C013  F013         	movff	___llmod@dividend+3,?___llmod+3
  7396  00322C  0012               	return		;funcret
  7397  00322E                     __end_of___llmod:
  7398                           	opt stack 0
  7399                           tblptru	equ	0xFF8
  7400                           tblptrh	equ	0xFF7
  7401                           tblptrl	equ	0xFF6
  7402                           tablat	equ	0xFF5
  7403                           prodh	equ	0xFF4
  7404                           prodl	equ	0xFF3
  7405                           intcon	equ	0xFF2
  7406                           postinc0	equ	0xFEE
  7407                           wreg	equ	0xFE8
  7408                           indf1	equ	0xFE7
  7409                           fsr1h	equ	0xFE2
  7410                           fsr1l	equ	0xFE1
  7411                           indf2	equ	0xFDF
  7412                           postinc2	equ	0xFDE
  7413                           postdec2	equ	0xFDD
  7414                           fsr2h	equ	0xFDA
  7415                           fsr2l	equ	0xFD9
  7416                           status	equ	0xFD8
  7417                           
  7418 ;; *************** function ___lldiv *****************
  7419 ;; Defined at:
  7420 ;;		line 8 in file "D:\mplab\sources\common\lldiv.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;  dividend        4   24[COMRAM] unsigned long 
  7423 ;;  divisor         4   28[COMRAM] unsigned long 
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;  quotient        4   32[COMRAM] unsigned long 
  7426 ;;  counter         1   36[COMRAM] unsigned char 
  7427 ;; Return value:  Size  Location     Type
  7428 ;;                  4   24[COMRAM] unsigned long 
  7429 ;; Registers used:
  7430 ;;		wreg, status,2, status,0
  7431 ;; Tracked objects:
  7432 ;;		On entry : 0/0
  7433 ;;		On exit  : 0/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7436 ;;      Params:         8       0       0       0       0       0       0       0       0
  7437 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7438 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7439 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7440 ;;Total ram usage:       13 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; Hardware stack levels required when called:    1
  7443 ;; This function calls:
  7444 ;;		Nothing
  7445 ;; This function is called by:
  7446 ;;		_convert_time_to_UTC
  7447 ;;		_sprintf
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451                           	psect	text28
  7452  002EF8                     __ptext28:
  7453                           	opt stack 0
  7454  002EF8                     ___lldiv:
  7455                           	opt stack 28
  7456                           
  7457                           ;incstack = 0
  7458  002EF8  0E00               	movlw	0
  7459  002EFA  6E21               	movwf	___lldiv@quotient,c
  7460  002EFC  0E00               	movlw	0
  7461  002EFE  6E22               	movwf	___lldiv@quotient+1,c
  7462  002F00  0E00               	movlw	0
  7463  002F02  6E23               	movwf	___lldiv@quotient+2,c
  7464  002F04  0E00               	movlw	0
  7465  002F06  6E24               	movwf	___lldiv@quotient+3,c
  7466  002F08  501D               	movf	___lldiv@divisor,w,c
  7467  002F0A  101E               	iorwf	___lldiv@divisor+1,w,c
  7468  002F0C  101F               	iorwf	___lldiv@divisor+2,w,c
  7469  002F0E  1020               	iorwf	___lldiv@divisor+3,w,c
  7470  002F10  B4D8               	btfsc	status,2,c
  7471  002F12  D02A               	goto	l833
  7472  002F14  0E01               	movlw	1
  7473  002F16  6E25               	movwf	___lldiv@counter,c
  7474  002F18  D006               	goto	l3426
  7475  002F1A                     l3424:
  7476  002F1A  90D8               	bcf	status,0,c
  7477  002F1C  361D               	rlcf	___lldiv@divisor,f,c
  7478  002F1E  361E               	rlcf	___lldiv@divisor+1,f,c
  7479  002F20  361F               	rlcf	___lldiv@divisor+2,f,c
  7480  002F22  3620               	rlcf	___lldiv@divisor+3,f,c
  7481  002F24  2A25               	incf	___lldiv@counter,f,c
  7482  002F26                     l3426:
  7483  002F26  AE20               	btfss	___lldiv@divisor+3,7,c
  7484  002F28  D7F8               	goto	l3424
  7485  002F2A                     l3428:
  7486  002F2A  90D8               	bcf	status,0,c
  7487  002F2C  3621               	rlcf	___lldiv@quotient,f,c
  7488  002F2E  3622               	rlcf	___lldiv@quotient+1,f,c
  7489  002F30  3623               	rlcf	___lldiv@quotient+2,f,c
  7490  002F32  3624               	rlcf	___lldiv@quotient+3,f,c
  7491  002F34  501D               	movf	___lldiv@divisor,w,c
  7492  002F36  5C19               	subwf	___lldiv@dividend,w,c
  7493  002F38  501E               	movf	___lldiv@divisor+1,w,c
  7494  002F3A  581A               	subwfb	___lldiv@dividend+1,w,c
  7495  002F3C  501F               	movf	___lldiv@divisor+2,w,c
  7496  002F3E  581B               	subwfb	___lldiv@dividend+2,w,c
  7497  002F40  5020               	movf	___lldiv@divisor+3,w,c
  7498  002F42  581C               	subwfb	___lldiv@dividend+3,w,c
  7499  002F44  A0D8               	btfss	status,0,c
  7500  002F46  D009               	goto	l3436
  7501  002F48  501D               	movf	___lldiv@divisor,w,c
  7502  002F4A  5E19               	subwf	___lldiv@dividend,f,c
  7503  002F4C  501E               	movf	___lldiv@divisor+1,w,c
  7504  002F4E  5A1A               	subwfb	___lldiv@dividend+1,f,c
  7505  002F50  501F               	movf	___lldiv@divisor+2,w,c
  7506  002F52  5A1B               	subwfb	___lldiv@dividend+2,f,c
  7507  002F54  5020               	movf	___lldiv@divisor+3,w,c
  7508  002F56  5A1C               	subwfb	___lldiv@dividend+3,f,c
  7509  002F58  8021               	bsf	___lldiv@quotient,0,c
  7510  002F5A                     l3436:
  7511  002F5A  90D8               	bcf	status,0,c
  7512  002F5C  3220               	rrcf	___lldiv@divisor+3,f,c
  7513  002F5E  321F               	rrcf	___lldiv@divisor+2,f,c
  7514  002F60  321E               	rrcf	___lldiv@divisor+1,f,c
  7515  002F62  321D               	rrcf	___lldiv@divisor,f,c
  7516  002F64  2E25               	decfsz	___lldiv@counter,f,c
  7517  002F66  D7E1               	goto	l3428
  7518  002F68                     l833:
  7519  002F68  C021  F019         	movff	___lldiv@quotient,?___lldiv
  7520  002F6C  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  7521  002F70  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  7522  002F74  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  7523  002F78  0012               	return		;funcret
  7524  002F7A                     __end_of___lldiv:
  7525                           	opt stack 0
  7526                           tblptru	equ	0xFF8
  7527                           tblptrh	equ	0xFF7
  7528                           tblptrl	equ	0xFF6
  7529                           tablat	equ	0xFF5
  7530                           prodh	equ	0xFF4
  7531                           prodl	equ	0xFF3
  7532                           intcon	equ	0xFF2
  7533                           postinc0	equ	0xFEE
  7534                           wreg	equ	0xFE8
  7535                           indf1	equ	0xFE7
  7536                           fsr1h	equ	0xFE2
  7537                           fsr1l	equ	0xFE1
  7538                           indf2	equ	0xFDF
  7539                           postinc2	equ	0xFDE
  7540                           postdec2	equ	0xFDD
  7541                           fsr2h	equ	0xFDA
  7542                           fsr2l	equ	0xFD9
  7543                           status	equ	0xFD8
  7544                           
  7545 ;; *************** function ___ftsub *****************
  7546 ;; Defined at:
  7547 ;;		line 20 in file "D:\mplab\sources\common\ftsub.c"
  7548 ;; Parameters:    Size  Location     Type
  7549 ;;  f1              3    3[BANK0 ] float 
  7550 ;;  f2              3    6[BANK0 ] float 
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;		None
  7553 ;; Return value:  Size  Location     Type
  7554 ;;                  3    3[BANK0 ] float 
  7555 ;; Registers used:
  7556 ;;		wreg, status,2, status,0, cstack
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7562 ;;      Params:         0       6       0       0       0       0       0       0       0
  7563 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7564 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7565 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7566 ;;Total ram usage:        6 bytes
  7567 ;; Hardware stack levels used:    1
  7568 ;; Hardware stack levels required when called:    3
  7569 ;; This function calls:
  7570 ;;		___ftadd
  7571 ;; This function is called by:
  7572 ;;		_sprintf
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           	psect	text29
  7577  0033E6                     __ptext29:
  7578                           	opt stack 0
  7579  0033E6                     ___ftsub:
  7580                           	opt stack 26
  7581                           
  7582                           ;incstack = 0
  7583  0033E6  0100               	movlb	0	; () banked
  7584  0033E8  5166               	movf	___ftsub@f2& (0+255),w,b
  7585  0033EA  0100               	movlb	0	; () banked
  7586  0033EC  1167               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7587  0033EE  0100               	movlb	0	; () banked
  7588  0033F0  1168               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7589  0033F2  B4D8               	btfsc	status,2,c
  7590  0033F4  D009               	goto	l4378
  7591                           
  7592                           ; BSR set to: 0
  7593  0033F6  0E00               	movlw	0
  7594  0033F8  0100               	movlb	0	; () banked
  7595  0033FA  1B66               	xorwf	___ftsub@f2& (0+255),f,b
  7596  0033FC  0E00               	movlw	0
  7597  0033FE  0100               	movlb	0	; () banked
  7598  003400  1B67               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7599  003402  0E80               	movlw	128
  7600  003404  0100               	movlb	0	; () banked
  7601  003406  1B68               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7602  003408                     l4378:
  7603                           
  7604                           ; BSR set to: 0
  7605  003408  C063  F03D         	movff	___ftsub@f1,___ftadd@f1
  7606  00340C  C064  F03E         	movff	___ftsub@f1+1,___ftadd@f1+1
  7607  003410  C065  F03F         	movff	___ftsub@f1+2,___ftadd@f1+2
  7608  003414  C066  F040         	movff	___ftsub@f2,___ftadd@f2
  7609  003418  C067  F041         	movff	___ftsub@f2+1,___ftadd@f2+1
  7610  00341C  C068  F042         	movff	___ftsub@f2+2,___ftadd@f2+2
  7611  003420  ECEA  F00F         	call	___ftadd	;wreg free
  7612  003424  C03D  F063         	movff	?___ftadd,?___ftsub
  7613  003428  C03E  F064         	movff	?___ftadd+1,?___ftsub+1
  7614  00342C  C03F  F065         	movff	?___ftadd+2,?___ftsub+2
  7615  003430  0012               	return	
  7616  003432                     __end_of___ftsub:
  7617                           	opt stack 0
  7618                           tblptru	equ	0xFF8
  7619                           tblptrh	equ	0xFF7
  7620                           tblptrl	equ	0xFF6
  7621                           tablat	equ	0xFF5
  7622                           prodh	equ	0xFF4
  7623                           prodl	equ	0xFF3
  7624                           intcon	equ	0xFF2
  7625                           postinc0	equ	0xFEE
  7626                           wreg	equ	0xFE8
  7627                           indf1	equ	0xFE7
  7628                           fsr1h	equ	0xFE2
  7629                           fsr1l	equ	0xFE1
  7630                           indf2	equ	0xFDF
  7631                           postinc2	equ	0xFDE
  7632                           postdec2	equ	0xFDD
  7633                           fsr2h	equ	0xFDA
  7634                           fsr2l	equ	0xFD9
  7635                           status	equ	0xFD8
  7636                           
  7637 ;; *************** function ___ftneg *****************
  7638 ;; Defined at:
  7639 ;;		line 15 in file "D:\mplab\sources\common\ftneg.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;  f1              3   50[COMRAM] float 
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;		None
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  3   50[COMRAM] float 
  7646 ;; Registers used:
  7647 ;;		wreg, status,2, status,0
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7653 ;;      Params:         3       0       0       0       0       0       0       0       0
  7654 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7655 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7656 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7657 ;;Total ram usage:        3 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:    1
  7660 ;; This function calls:
  7661 ;;		Nothing
  7662 ;; This function is called by:
  7663 ;;		_convert_to_degrees
  7664 ;;		_sprintf
  7665 ;;		_strtod
  7666 ;; This function uses a non-reentrant model
  7667 ;;
  7668                           
  7669                           	psect	text30
  7670  0035B8                     __ptext30:
  7671                           	opt stack 0
  7672  0035B8                     ___ftneg:
  7673                           	opt stack 28
  7674                           
  7675                           ;incstack = 0
  7676  0035B8  5033               	movf	___ftneg@f1,w,c
  7677  0035BA  1034               	iorwf	___ftneg@f1+1,w,c
  7678  0035BC  1035               	iorwf	___ftneg@f1+2,w,c
  7679  0035BE  B4D8               	btfsc	status,2,c
  7680  0035C0  D006               	goto	l778
  7681  0035C2  0E00               	movlw	0
  7682  0035C4  1A33               	xorwf	___ftneg@f1,f,c
  7683  0035C6  0E00               	movlw	0
  7684  0035C8  1A34               	xorwf	___ftneg@f1+1,f,c
  7685  0035CA  0E80               	movlw	128
  7686  0035CC  1A35               	xorwf	___ftneg@f1+2,f,c
  7687  0035CE                     l778:
  7688  0035CE  C033  F033         	movff	___ftneg@f1,?___ftneg
  7689  0035D2  C034  F034         	movff	___ftneg@f1+1,?___ftneg+1
  7690  0035D6  C035  F035         	movff	___ftneg@f1+2,?___ftneg+2
  7691  0035DA  0012               	return		;funcret
  7692  0035DC                     __end_of___ftneg:
  7693                           	opt stack 0
  7694                           tblptru	equ	0xFF8
  7695                           tblptrh	equ	0xFF7
  7696                           tblptrl	equ	0xFF6
  7697                           tablat	equ	0xFF5
  7698                           prodh	equ	0xFF4
  7699                           prodl	equ	0xFF3
  7700                           intcon	equ	0xFF2
  7701                           postinc0	equ	0xFEE
  7702                           wreg	equ	0xFE8
  7703                           indf1	equ	0xFE7
  7704                           fsr1h	equ	0xFE2
  7705                           fsr1l	equ	0xFE1
  7706                           indf2	equ	0xFDF
  7707                           postinc2	equ	0xFDE
  7708                           postdec2	equ	0xFDD
  7709                           fsr2h	equ	0xFDA
  7710                           fsr2l	equ	0xFD9
  7711                           status	equ	0xFD8
  7712                           
  7713 ;; *************** function ___ftge *****************
  7714 ;; Defined at:
  7715 ;;		line 4 in file "D:\mplab\sources\common\ftge.c"
  7716 ;; Parameters:    Size  Location     Type
  7717 ;;  ff1             3   15[COMRAM] float 
  7718 ;;  ff2             3   18[COMRAM] float 
  7719 ;; Auto vars:     Size  Location     Type
  7720 ;;		None
  7721 ;; Return value:  Size  Location     Type
  7722 ;;		None               void
  7723 ;; Registers used:
  7724 ;;		wreg, status,2, status,0
  7725 ;; Tracked objects:
  7726 ;;		On entry : 0/0
  7727 ;;		On exit  : 0/0
  7728 ;;		Unchanged: 0/0
  7729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7730 ;;      Params:         6       0       0       0       0       0       0       0       0
  7731 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7732 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7733 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7734 ;;Total ram usage:        9 bytes
  7735 ;; Hardware stack levels used:    1
  7736 ;; Hardware stack levels required when called:    1
  7737 ;; This function calls:
  7738 ;;		Nothing
  7739 ;; This function is called by:
  7740 ;;		_sprintf
  7741 ;;		_strtod
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           	psect	text31
  7746  002D60                     __ptext31:
  7747                           	opt stack 0
  7748  002D60                     ___ftge:
  7749                           	opt stack 28
  7750                           
  7751                           ;incstack = 0
  7752  002D60  AE12               	btfss	___ftge@ff1+2,7,c
  7753  002D62  D016               	goto	l2990
  7754  002D64  C010  F016         	movff	___ftge@ff1,??___ftge
  7755  002D68  C011  F017         	movff	___ftge@ff1+1,??___ftge+1
  7756  002D6C  C012  F018         	movff	___ftge@ff1+2,??___ftge+2
  7757  002D70  1E16               	comf	??___ftge,f,c
  7758  002D72  1E17               	comf	??___ftge+1,f,c
  7759  002D74  1E18               	comf	??___ftge+2,f,c
  7760  002D76  2A16               	incf	??___ftge,f,c
  7761  002D78  0E00               	movlw	0
  7762  002D7A  2217               	addwfc	??___ftge+1,f,c
  7763  002D7C  2218               	addwfc	??___ftge+2,f,c
  7764  002D7E  0E00               	movlw	0
  7765  002D80  2416               	addwf	??___ftge,w,c
  7766  002D82  6E10               	movwf	___ftge@ff1,c
  7767  002D84  0E00               	movlw	0
  7768  002D86  2017               	addwfc	??___ftge+1,w,c
  7769  002D88  6E11               	movwf	___ftge@ff1+1,c
  7770  002D8A  0E80               	movlw	128
  7771  002D8C  2018               	addwfc	??___ftge+2,w,c
  7772  002D8E  6E12               	movwf	___ftge@ff1+2,c
  7773  002D90                     l2990:
  7774  002D90  AE15               	btfss	___ftge@ff2+2,7,c
  7775  002D92  D016               	goto	l2994
  7776  002D94  C013  F016         	movff	___ftge@ff2,??___ftge
  7777  002D98  C014  F017         	movff	___ftge@ff2+1,??___ftge+1
  7778  002D9C  C015  F018         	movff	___ftge@ff2+2,??___ftge+2
  7779  002DA0  1E16               	comf	??___ftge,f,c
  7780  002DA2  1E17               	comf	??___ftge+1,f,c
  7781  002DA4  1E18               	comf	??___ftge+2,f,c
  7782  002DA6  2A16               	incf	??___ftge,f,c
  7783  002DA8  0E00               	movlw	0
  7784  002DAA  2217               	addwfc	??___ftge+1,f,c
  7785  002DAC  2218               	addwfc	??___ftge+2,f,c
  7786  002DAE  0E00               	movlw	0
  7787  002DB0  2416               	addwf	??___ftge,w,c
  7788  002DB2  6E13               	movwf	___ftge@ff2,c
  7789  002DB4  0E00               	movlw	0
  7790  002DB6  2017               	addwfc	??___ftge+1,w,c
  7791  002DB8  6E14               	movwf	___ftge@ff2+1,c
  7792  002DBA  0E80               	movlw	128
  7793  002DBC  2018               	addwfc	??___ftge+2,w,c
  7794  002DBE  6E15               	movwf	___ftge@ff2+2,c
  7795  002DC0                     l2994:
  7796  002DC0  0E00               	movlw	0
  7797  002DC2  1A10               	xorwf	___ftge@ff1,f,c
  7798  002DC4  0E00               	movlw	0
  7799  002DC6  1A11               	xorwf	___ftge@ff1+1,f,c
  7800  002DC8  0E80               	movlw	128
  7801  002DCA  1A12               	xorwf	___ftge@ff1+2,f,c
  7802  002DCC  0E00               	movlw	0
  7803  002DCE  1A13               	xorwf	___ftge@ff2,f,c
  7804  002DD0  0E00               	movlw	0
  7805  002DD2  1A14               	xorwf	___ftge@ff2+1,f,c
  7806  002DD4  0E80               	movlw	128
  7807  002DD6  1A15               	xorwf	___ftge@ff2+2,f,c
  7808  002DD8  5013               	movf	___ftge@ff2,w,c
  7809  002DDA  5C10               	subwf	___ftge@ff1,w,c
  7810  002DDC  5014               	movf	___ftge@ff2+1,w,c
  7811  002DDE  5811               	subwfb	___ftge@ff1+1,w,c
  7812  002DE0  5015               	movf	___ftge@ff2+2,w,c
  7813  002DE2  5812               	subwfb	___ftge@ff1+2,w,c
  7814  002DE4  B0D8               	btfsc	status,0,c
  7815  002DE6  D002               	goto	l3000
  7816  002DE8  90D8               	bcf	status,0,c
  7817  002DEA  0012               	return	
  7818  002DEC                     l3000:
  7819  002DEC  80D8               	bsf	status,0,c
  7820  002DEE  0012               	return	
  7821  002DF0                     __end_of___ftge:
  7822                           	opt stack 0
  7823                           tblptru	equ	0xFF8
  7824                           tblptrh	equ	0xFF7
  7825                           tblptrl	equ	0xFF6
  7826                           tablat	equ	0xFF5
  7827                           prodh	equ	0xFF4
  7828                           prodl	equ	0xFF3
  7829                           intcon	equ	0xFF2
  7830                           postinc0	equ	0xFEE
  7831                           wreg	equ	0xFE8
  7832                           indf1	equ	0xFE7
  7833                           fsr1h	equ	0xFE2
  7834                           fsr1l	equ	0xFE1
  7835                           indf2	equ	0xFDF
  7836                           postinc2	equ	0xFDE
  7837                           postdec2	equ	0xFDD
  7838                           fsr2h	equ	0xFDA
  7839                           fsr2l	equ	0xFD9
  7840                           status	equ	0xFD8
  7841                           
  7842 ;; *************** function _USART_SendString *****************
  7843 ;; Defined at:
  7844 ;;		line 40 in file "USART_Source_File.c"
  7845 ;; Parameters:    Size  Location     Type
  7846 ;;  out             2   16[COMRAM] PTR const unsigned char 
  7847 ;;		 -> stringBT(50), 
  7848 ;; Auto vars:     Size  Location     Type
  7849 ;;		None
  7850 ;; Return value:  Size  Location     Type
  7851 ;;                  1    wreg      void 
  7852 ;; Registers used:
  7853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7854 ;; Tracked objects:
  7855 ;;		On entry : 0/0
  7856 ;;		On exit  : 0/0
  7857 ;;		Unchanged: 0/0
  7858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7859 ;;      Params:         2       0       0       0       0       0       0       0       0
  7860 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7861 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7862 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7863 ;;Total ram usage:        2 bytes
  7864 ;; Hardware stack levels used:    1
  7865 ;; Hardware stack levels required when called:    2
  7866 ;; This function calls:
  7867 ;;		_USART_TxChar
  7868 ;; This function is called by:
  7869 ;;		_main
  7870 ;; This function uses a non-reentrant model
  7871 ;;
  7872                           
  7873                           	psect	text32
  7874  0035DC                     __ptext32:
  7875                           	opt stack 0
  7876  0035DC                     _USART_SendString:
  7877                           	opt stack 28
  7878                           
  7879                           ;USART_Source_File.c: 42: while(*out!='\0')
  7880                           
  7881                           ;incstack = 0
  7882  0035DC  D009               	goto	l3982
  7883  0035DE                     l3978:
  7884                           
  7885                           ;USART_Source_File.c: 43: {
  7886                           ;USART_Source_File.c: 44: USART_TxChar(*out);
  7887  0035DE  C011  FFD9         	movff	USART_SendString@out,fsr2l
  7888  0035E2  C012  FFDA         	movff	USART_SendString@out+1,fsr2h
  7889  0035E6  50DF               	movf	indf2,w,c
  7890  0035E8  EC48  F01B         	call	_USART_TxChar
  7891                           
  7892                           ;USART_Source_File.c: 45: out++;
  7893  0035EC  4A11               	infsnz	USART_SendString@out,f,c
  7894  0035EE  2A12               	incf	USART_SendString@out+1,f,c
  7895  0035F0                     l3982:
  7896  0035F0  C011  FFD9         	movff	USART_SendString@out,fsr2l
  7897  0035F4  C012  FFDA         	movff	USART_SendString@out+1,fsr2h
  7898  0035F8  50DF               	movf	indf2,w,c
  7899  0035FA  B4D8               	btfsc	status,2,c
  7900  0035FC  0012               	return	
  7901  0035FE  D7EF               	goto	l3978
  7902  003600                     __end_of_USART_SendString:
  7903                           	opt stack 0
  7904                           tblptru	equ	0xFF8
  7905                           tblptrh	equ	0xFF7
  7906                           tblptrl	equ	0xFF6
  7907                           tablat	equ	0xFF5
  7908                           prodh	equ	0xFF4
  7909                           prodl	equ	0xFF3
  7910                           intcon	equ	0xFF2
  7911                           postinc0	equ	0xFEE
  7912                           wreg	equ	0xFE8
  7913                           indf1	equ	0xFE7
  7914                           fsr1h	equ	0xFE2
  7915                           fsr1l	equ	0xFE1
  7916                           indf2	equ	0xFDF
  7917                           postinc2	equ	0xFDE
  7918                           postdec2	equ	0xFDD
  7919                           fsr2h	equ	0xFDA
  7920                           fsr2l	equ	0xFD9
  7921                           status	equ	0xFD8
  7922                           
  7923 ;; *************** function _USART_TxChar *****************
  7924 ;; Defined at:
  7925 ;;		line 19 in file "USART_Source_File.c"
  7926 ;; Parameters:    Size  Location     Type
  7927 ;;  out             1    wreg     unsigned char 
  7928 ;; Auto vars:     Size  Location     Type
  7929 ;;  out             1   15[COMRAM] unsigned char 
  7930 ;; Return value:  Size  Location     Type
  7931 ;;                  1    wreg      void 
  7932 ;; Registers used:
  7933 ;;		wreg
  7934 ;; Tracked objects:
  7935 ;;		On entry : 0/0
  7936 ;;		On exit  : 0/0
  7937 ;;		Unchanged: 0/0
  7938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7939 ;;      Params:         0       0       0       0       0       0       0       0       0
  7940 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7941 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7942 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7943 ;;Total ram usage:        1 bytes
  7944 ;; Hardware stack levels used:    1
  7945 ;; Hardware stack levels required when called:    1
  7946 ;; This function calls:
  7947 ;;		Nothing
  7948 ;; This function is called by:
  7949 ;;		_USART_SendString
  7950 ;; This function uses a non-reentrant model
  7951 ;;
  7952                           
  7953                           	psect	text33
  7954  003690                     __ptext33:
  7955                           	opt stack 0
  7956  003690                     _USART_TxChar:
  7957                           	opt stack 28
  7958                           
  7959                           ;incstack = 0
  7960                           ;USART_TxChar@out stored from wreg
  7961  003690  6E10               	movwf	USART_TxChar@out,c
  7962  003692                     l240:
  7963  003692  A89E               	btfss	3998,4,c	;volatile
  7964  003694  D7FE               	goto	l240
  7965                           
  7966                           ;USART_Source_File.c: 22: TXREG=out;
  7967  003696  C010  FFAD         	movff	USART_TxChar@out,4013	;volatile
  7968  00369A  0012               	return		;funcret
  7969  00369C                     __end_of_USART_TxChar:
  7970                           	opt stack 0
  7971                           tblptru	equ	0xFF8
  7972                           tblptrh	equ	0xFF7
  7973                           tblptrl	equ	0xFF6
  7974                           tablat	equ	0xFF5
  7975                           prodh	equ	0xFF4
  7976                           prodl	equ	0xFF3
  7977                           intcon	equ	0xFF2
  7978                           postinc0	equ	0xFEE
  7979                           wreg	equ	0xFE8
  7980                           indf1	equ	0xFE7
  7981                           fsr1h	equ	0xFE2
  7982                           fsr1l	equ	0xFE1
  7983                           indf2	equ	0xFDF
  7984                           postinc2	equ	0xFDE
  7985                           postdec2	equ	0xFDD
  7986                           fsr2h	equ	0xFDA
  7987                           fsr2l	equ	0xFD9
  7988                           status	equ	0xFD8
  7989                           
  7990 ;; *************** function _USART_Init *****************
  7991 ;; Defined at:
  7992 ;;		line 8 in file "USART_Source_File.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;  baud_rate       4    6[BANK0 ] long 
  7995 ;; Auto vars:     Size  Location     Type
  7996 ;;  temp            3   10[BANK0 ] float 
  7997 ;; Return value:  Size  Location     Type
  7998 ;;                  1    wreg      void 
  7999 ;; Registers used:
  8000 ;;		wreg, status,2, status,0, cstack
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8006 ;;      Params:         0       4       0       0       0       0       0       0       0
  8007 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8008 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8009 ;;      Totals:         0       7       0       0       0       0       0       0       0
  8010 ;;Total ram usage:        7 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; Hardware stack levels required when called:    3
  8013 ;; This function calls:
  8014 ;;		___altoft
  8015 ;;		___ftadd
  8016 ;;		___ftdiv
  8017 ;;		___fttol
  8018 ;; This function is called by:
  8019 ;;		_main
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           	psect	text34
  8024  002F7A                     __ptext34:
  8025                           	opt stack 0
  8026  002F7A                     _USART_Init:
  8027                           	opt stack 27
  8028                           
  8029                           ;USART_Source_File.c: 10: float temp;
  8030                           ;USART_Source_File.c: 11: TRISC6=0;
  8031                           
  8032                           ;incstack = 0
  8033  002F7A  9C94               	bcf	3988,6,c	;volatile
  8034                           
  8035                           ;USART_Source_File.c: 12: TRISC7=1;
  8036  002F7C  8E94               	bsf	3988,7,c	;volatile
  8037                           
  8038                           ;USART_Source_File.c: 13: temp=(((float)(8000000/64)/(float)baud_rate)-1);
  8039  002F7E  C066  F018         	movff	USART_Init@baud_rate,___altoft@c
  8040  002F82  C067  F019         	movff	USART_Init@baud_rate+1,___altoft@c+1
  8041  002F86  C068  F01A         	movff	USART_Init@baud_rate+2,___altoft@c+2
  8042  002F8A  C069  F01B         	movff	USART_Init@baud_rate+3,___altoft@c+3
  8043  002F8E  EC37  F018         	call	___altoft	;wreg free
  8044  002F92  C018  F025         	movff	?___altoft,___ftdiv@f2
  8045  002F96  C019  F026         	movff	?___altoft+1,___ftdiv@f2+1
  8046  002F9A  C01A  F027         	movff	?___altoft+2,___ftdiv@f2+2
  8047  002F9E  0E24               	movlw	36
  8048  002FA0  6E22               	movwf	___ftdiv@f1,c
  8049  002FA2  0EF4               	movlw	244
  8050  002FA4  6E23               	movwf	___ftdiv@f1+1,c
  8051  002FA6  0E47               	movlw	71
  8052  002FA8  6E24               	movwf	___ftdiv@f1+2,c
  8053  002FAA  EC48  F015         	call	___ftdiv	;wreg free
  8054  002FAE  C022  F03D         	movff	?___ftdiv,___ftadd@f1
  8055  002FB2  C023  F03E         	movff	?___ftdiv+1,___ftadd@f1+1
  8056  002FB6  C024  F03F         	movff	?___ftdiv+2,___ftadd@f1+2
  8057  002FBA  0E00               	movlw	0
  8058  002FBC  6E40               	movwf	___ftadd@f2,c
  8059  002FBE  0E80               	movlw	128
  8060  002FC0  6E41               	movwf	___ftadd@f2+1,c
  8061  002FC2  0EBF               	movlw	191
  8062  002FC4  6E42               	movwf	___ftadd@f2+2,c
  8063  002FC6  ECEA  F00F         	call	___ftadd	;wreg free
  8064  002FCA  C03D  F06A         	movff	?___ftadd,USART_Init@temp
  8065  002FCE  C03E  F06B         	movff	?___ftadd+1,USART_Init@temp+1
  8066  002FD2  C03F  F06C         	movff	?___ftadd+2,USART_Init@temp+2
  8067                           
  8068                           ;USART_Source_File.c: 14: SPBRG=(int)temp;
  8069  002FD6  C06A  F03A         	movff	USART_Init@temp,___fttol@f1
  8070  002FDA  C06B  F03B         	movff	USART_Init@temp+1,___fttol@f1+1
  8071  002FDE  C06C  F03C         	movff	USART_Init@temp+2,___fttol@f1+2
  8072  002FE2  ECB1  F012         	call	___fttol	;wreg free
  8073  002FE6  503A               	movf	?___fttol,w,c
  8074  002FE8  6EAF               	movwf	4015,c	;volatile
  8075                           
  8076                           ;USART_Source_File.c: 15: TXSTA=0x20;
  8077  002FEA  0E20               	movlw	32
  8078  002FEC  6EAC               	movwf	4012,c	;volatile
  8079                           
  8080                           ;USART_Source_File.c: 16: RCSTA=0x90;
  8081  002FEE  0E90               	movlw	144
  8082  002FF0  6EAB               	movwf	4011,c	;volatile
  8083  002FF2  0012               	return		;funcret
  8084  002FF4                     __end_of_USART_Init:
  8085                           	opt stack 0
  8086                           tblptru	equ	0xFF8
  8087                           tblptrh	equ	0xFF7
  8088                           tblptrl	equ	0xFF6
  8089                           tablat	equ	0xFF5
  8090                           prodh	equ	0xFF4
  8091                           prodl	equ	0xFF3
  8092                           intcon	equ	0xFF2
  8093                           postinc0	equ	0xFEE
  8094                           wreg	equ	0xFE8
  8095                           indf1	equ	0xFE7
  8096                           fsr1h	equ	0xFE2
  8097                           fsr1l	equ	0xFE1
  8098                           indf2	equ	0xFDF
  8099                           postinc2	equ	0xFDE
  8100                           postdec2	equ	0xFDD
  8101                           fsr2h	equ	0xFDA
  8102                           fsr2l	equ	0xFD9
  8103                           status	equ	0xFD8
  8104                           
  8105 ;; *************** function ___fttol *****************
  8106 ;; Defined at:
  8107 ;;		line 44 in file "D:\mplab\sources\common\fttol.c"
  8108 ;; Parameters:    Size  Location     Type
  8109 ;;  f1              3   57[COMRAM] float 
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;  lval            4    1[BANK0 ] unsigned long 
  8112 ;;  exp1            1    5[BANK0 ] unsigned char 
  8113 ;;  sign1           1    0[BANK0 ] unsigned char 
  8114 ;; Return value:  Size  Location     Type
  8115 ;;                  4   57[COMRAM] long 
  8116 ;; Registers used:
  8117 ;;		wreg, status,2, status,0
  8118 ;; Tracked objects:
  8119 ;;		On entry : 0/0
  8120 ;;		On exit  : 0/0
  8121 ;;		Unchanged: 0/0
  8122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8123 ;;      Params:         4       0       0       0       0       0       0       0       0
  8124 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8125 ;;      Temps:          5       0       0       0       0       0       0       0       0
  8126 ;;      Totals:         9       6       0       0       0       0       0       0       0
  8127 ;;Total ram usage:       15 bytes
  8128 ;; Hardware stack levels used:    1
  8129 ;; Hardware stack levels required when called:    1
  8130 ;; This function calls:
  8131 ;;		Nothing
  8132 ;; This function is called by:
  8133 ;;		_main
  8134 ;;		_convert_to_degrees
  8135 ;;		_USART_Init
  8136 ;;		_sprintf
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           	psect	text35
  8141  002562                     __ptext35:
  8142                           	opt stack 0
  8143  002562                     ___fttol:
  8144                           	opt stack 28
  8145                           
  8146                           ;incstack = 0
  8147  002562  C03C  F03E         	movff	___fttol@f1+2,??___fttol
  8148  002566  6A3F               	clrf	(??___fttol+1)& (0+255),c
  8149  002568  6A40               	clrf	(??___fttol+2)& (0+255),c
  8150  00256A  343B               	rlcf	___fttol@f1+1,w,c
  8151  00256C  363E               	rlcf	??___fttol& (0+255),f,c
  8152  00256E  E301               	bnc	u5321
  8153  002570  803F               	bsf	(??___fttol+1)& (0+255),0,c
  8154  002572                     u5321:
  8155  002572  503E               	movf	??___fttol,w,c
  8156  002574  0100               	movlb	0	; () banked
  8157  002576  6F65               	movwf	___fttol@exp1& (0+255),b
  8158  002578  0100               	movlb	0	; () banked
  8159  00257A  5165               	movf	___fttol@exp1& (0+255),w,b
  8160  00257C  A4D8               	btfss	status,2,c
  8161  00257E  D009               	goto	l4554
  8162                           
  8163                           ; BSR set to: 0
  8164  002580  0E00               	movlw	0
  8165  002582  6E3A               	movwf	?___fttol,c
  8166  002584  0E00               	movlw	0
  8167  002586  6E3B               	movwf	?___fttol+1,c
  8168  002588  0E00               	movlw	0
  8169  00258A  6E3C               	movwf	?___fttol+2,c
  8170  00258C  0E00               	movlw	0
  8171  00258E  6E3D               	movwf	?___fttol+3,c
  8172                           
  8173                           ; BSR set to: 0
  8174  002590  0012               	return	
  8175  002592                     l4554:
  8176                           
  8177                           ; BSR set to: 0
  8178  002592  0E17               	movlw	23
  8179  002594  6E3E               	movwf	??___fttol& (0+255),c
  8180  002596  C03A  F03F         	movff	___fttol@f1,??___fttol+1
  8181  00259A  C03B  F040         	movff	___fttol@f1+1,??___fttol+2
  8182  00259E  C03C  F041         	movff	___fttol@f1+2,??___fttol+3
  8183  0025A2  283E               	incf	??___fttol,w,c
  8184  0025A4  6E42               	movwf	(??___fttol+4)& (0+255),c
  8185  0025A6  D004               	goto	u5340
  8186  0025A8                     u5345:
  8187  0025A8  90D8               	bcf	status,0,c
  8188  0025AA  3241               	rrcf	??___fttol+3,f,c
  8189  0025AC  3240               	rrcf	??___fttol+2,f,c
  8190  0025AE  323F               	rrcf	??___fttol+1,f,c
  8191  0025B0                     u5340:
  8192  0025B0  2E42               	decfsz	(??___fttol+4)& (0+255),f,c
  8193  0025B2  D7FA               	goto	u5345
  8194  0025B4  503F               	movf	??___fttol+1,w,c
  8195  0025B6  0100               	movlb	0	; () banked
  8196  0025B8  6F60               	movwf	___fttol@sign1& (0+255),b
  8197                           
  8198                           ; BSR set to: 0
  8199  0025BA  8E3B               	bsf	___fttol@f1+1,7,c
  8200                           
  8201                           ; BSR set to: 0
  8202  0025BC  0EFF               	movlw	255
  8203  0025BE  163A               	andwf	___fttol@f1,f,c
  8204  0025C0  0EFF               	movlw	255
  8205  0025C2  163B               	andwf	___fttol@f1+1,f,c
  8206  0025C4  0E00               	movlw	0
  8207  0025C6  163C               	andwf	___fttol@f1+2,f,c
  8208                           
  8209                           ; BSR set to: 0
  8210  0025C8  503A               	movf	___fttol@f1,w,c
  8211  0025CA  0100               	movlb	0	; () banked
  8212  0025CC  6F61               	movwf	___fttol@lval& (0+255),b
  8213  0025CE  503B               	movf	___fttol@f1+1,w,c
  8214  0025D0  0100               	movlb	0	; () banked
  8215  0025D2  6F62               	movwf	(___fttol@lval+1)& (0+255),b
  8216  0025D4  503C               	movf	___fttol@f1+2,w,c
  8217  0025D6  0100               	movlb	0	; () banked
  8218  0025D8  6F63               	movwf	(___fttol@lval+2)& (0+255),b
  8219  0025DA  0100               	movlb	0	; () banked
  8220  0025DC  6B64               	clrf	(___fttol@lval+3)& (0+255),b
  8221                           
  8222                           ; BSR set to: 0
  8223  0025DE  0E8E               	movlw	142
  8224  0025E0  0100               	movlb	0	; () banked
  8225  0025E2  5F65               	subwf	___fttol@exp1& (0+255),f,b
  8226                           
  8227                           ; BSR set to: 0
  8228  0025E4  0100               	movlb	0	; () banked
  8229  0025E6  AF65               	btfss	___fttol@exp1& (0+255),7,b
  8230  0025E8  D019               	goto	l4576
  8231                           
  8232                           ; BSR set to: 0
  8233  0025EA  0100               	movlb	0	; () banked
  8234  0025EC  5165               	movf	___fttol@exp1& (0+255),w,b
  8235  0025EE  0A80               	xorlw	128
  8236  0025F0  0F8F               	addlw	143
  8237  0025F2  B0D8               	btfsc	status,0,c
  8238  0025F4  D009               	goto	l4572
  8239                           
  8240                           ; BSR set to: 0
  8241  0025F6  0E00               	movlw	0
  8242  0025F8  6E3A               	movwf	?___fttol,c
  8243  0025FA  0E00               	movlw	0
  8244  0025FC  6E3B               	movwf	?___fttol+1,c
  8245  0025FE  0E00               	movlw	0
  8246  002600  6E3C               	movwf	?___fttol+2,c
  8247  002602  0E00               	movlw	0
  8248  002604  6E3D               	movwf	?___fttol+3,c
  8249                           
  8250                           ; BSR set to: 0
  8251  002606  0012               	return	
  8252  002608                     l4572:
  8253                           
  8254                           ; BSR set to: 0
  8255  002608  0100               	movlb	0	; () banked
  8256  00260A  90D8               	bcf	status,0,c
  8257  00260C  3364               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8258  00260E  3363               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8259  002610  3362               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8260  002612  3361               	rrcf	___fttol@lval& (0+255),f,b
  8261                           
  8262                           ; BSR set to: 0
  8263  002614  0100               	movlb	0	; () banked
  8264  002616  3F65               	incfsz	___fttol@exp1& (0+255),f,b
  8265  002618  D7F7               	goto	l4572
  8266                           
  8267                           ; BSR set to: 0
  8268  00261A  D01A               	goto	l4586
  8269  00261C                     l4576:
  8270                           
  8271                           ; BSR set to: 0
  8272  00261C  0E17               	movlw	23
  8273  00261E  0100               	movlb	0	; () banked
  8274  002620  6565               	cpfsgt	___fttol@exp1& (0+255),b
  8275  002622  D011               	goto	l4584
  8276                           
  8277                           ; BSR set to: 0
  8278  002624  0E00               	movlw	0
  8279  002626  6E3A               	movwf	?___fttol,c
  8280  002628  0E00               	movlw	0
  8281  00262A  6E3B               	movwf	?___fttol+1,c
  8282  00262C  0E00               	movlw	0
  8283  00262E  6E3C               	movwf	?___fttol+2,c
  8284  002630  0E00               	movlw	0
  8285  002632  6E3D               	movwf	?___fttol+3,c
  8286                           
  8287                           ; BSR set to: 0
  8288  002634  0012               	return	
  8289  002636                     l4582:
  8290                           
  8291                           ; BSR set to: 0
  8292  002636  0100               	movlb	0	; () banked
  8293  002638  90D8               	bcf	status,0,c
  8294  00263A  3761               	rlcf	___fttol@lval& (0+255),f,b
  8295  00263C  3762               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8296  00263E  3763               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8297  002640  3764               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8298  002642  0100               	movlb	0	; () banked
  8299  002644  0765               	decf	___fttol@exp1& (0+255),f,b
  8300  002646                     l4584:
  8301                           
  8302                           ; BSR set to: 0
  8303  002646  0100               	movlb	0	; () banked
  8304  002648  5165               	movf	___fttol@exp1& (0+255),w,b
  8305  00264A  0100               	movlb	0	; () banked
  8306  00264C  A4D8               	btfss	status,2,c
  8307  00264E  D7F3               	goto	l4582
  8308  002650                     l4586:
  8309                           
  8310                           ; BSR set to: 0
  8311  002650  0100               	movlb	0	; () banked
  8312  002652  5160               	movf	___fttol@sign1& (0+255),w,b
  8313  002654  0100               	movlb	0	; () banked
  8314  002656  B4D8               	btfsc	status,2,c
  8315  002658  D009               	goto	l4590
  8316                           
  8317                           ; BSR set to: 0
  8318  00265A  0100               	movlb	0	; () banked
  8319  00265C  1F64               	comf	(___fttol@lval+3)& (0+255),f,b
  8320  00265E  1F63               	comf	(___fttol@lval+2)& (0+255),f,b
  8321  002660  1F62               	comf	(___fttol@lval+1)& (0+255),f,b
  8322  002662  6D61               	negf	___fttol@lval& (0+255),b
  8323  002664  0E00               	movlw	0
  8324  002666  2362               	addwfc	(___fttol@lval+1)& (0+255),f,b
  8325  002668  2363               	addwfc	(___fttol@lval+2)& (0+255),f,b
  8326  00266A  2364               	addwfc	(___fttol@lval+3)& (0+255),f,b
  8327  00266C                     l4590:
  8328                           
  8329                           ; BSR set to: 0
  8330  00266C  C061  F03A         	movff	___fttol@lval,?___fttol
  8331  002670  C062  F03B         	movff	___fttol@lval+1,?___fttol+1
  8332  002674  C063  F03C         	movff	___fttol@lval+2,?___fttol+2
  8333  002678  C064  F03D         	movff	___fttol@lval+3,?___fttol+3
  8334  00267C  0012               	return	
  8335  00267E                     __end_of___fttol:
  8336                           	opt stack 0
  8337                           tblptru	equ	0xFF8
  8338                           tblptrh	equ	0xFF7
  8339                           tblptrl	equ	0xFF6
  8340                           tablat	equ	0xFF5
  8341                           prodh	equ	0xFF4
  8342                           prodl	equ	0xFF3
  8343                           intcon	equ	0xFF2
  8344                           postinc0	equ	0xFEE
  8345                           wreg	equ	0xFE8
  8346                           indf1	equ	0xFE7
  8347                           fsr1h	equ	0xFE2
  8348                           fsr1l	equ	0xFE1
  8349                           indf2	equ	0xFDF
  8350                           postinc2	equ	0xFDE
  8351                           postdec2	equ	0xFDD
  8352                           fsr2h	equ	0xFDA
  8353                           fsr2l	equ	0xFD9
  8354                           status	equ	0xFD8
  8355                           
  8356 ;; *************** function ___ftdiv *****************
  8357 ;; Defined at:
  8358 ;;		line 54 in file "D:\mplab\sources\common\ftdiv.c"
  8359 ;; Parameters:    Size  Location     Type
  8360 ;;  f1              3   33[COMRAM] float 
  8361 ;;  f2              3   36[COMRAM] float 
  8362 ;; Auto vars:     Size  Location     Type
  8363 ;;  f3              3   43[COMRAM] float 
  8364 ;;  sign            1   47[COMRAM] unsigned char 
  8365 ;;  exp             1   46[COMRAM] unsigned char 
  8366 ;;  cntr            1   42[COMRAM] unsigned char 
  8367 ;; Return value:  Size  Location     Type
  8368 ;;                  3   33[COMRAM] float 
  8369 ;; Registers used:
  8370 ;;		wreg, status,2, status,0, cstack
  8371 ;; Tracked objects:
  8372 ;;		On entry : 0/0
  8373 ;;		On exit  : 0/0
  8374 ;;		Unchanged: 0/0
  8375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8376 ;;      Params:         6       0       0       0       0       0       0       0       0
  8377 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8378 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8379 ;;      Totals:        15       0       0       0       0       0       0       0       0
  8380 ;;Total ram usage:       15 bytes
  8381 ;; Hardware stack levels used:    1
  8382 ;; Hardware stack levels required when called:    2
  8383 ;; This function calls:
  8384 ;;		___ftpack
  8385 ;; This function is called by:
  8386 ;;		_main
  8387 ;;		_convert_to_degrees
  8388 ;;		_USART_Init
  8389 ;;		_strtod
  8390 ;; This function uses a non-reentrant model
  8391 ;;
  8392                           
  8393                           	psect	text36
  8394  002A90                     __ptext36:
  8395                           	opt stack 0
  8396  002A90                     ___ftdiv:
  8397                           	opt stack 25
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;incstack = 0
  8401  002A90  C024  F028         	movff	___ftdiv@f1+2,??___ftdiv
  8402  002A94  6A29               	clrf	(??___ftdiv+1)& (0+255),c
  8403  002A96  6A2A               	clrf	(??___ftdiv+2)& (0+255),c
  8404  002A98  3423               	rlcf	___ftdiv@f1+1,w,c
  8405  002A9A  3628               	rlcf	??___ftdiv& (0+255),f,c
  8406  002A9C  E301               	bnc	u4801
  8407  002A9E  8029               	bsf	(??___ftdiv+1)& (0+255),0,c
  8408  002AA0                     u4801:
  8409  002AA0  5028               	movf	??___ftdiv,w,c
  8410  002AA2  6E2F               	movwf	___ftdiv@exp,c
  8411  002AA4  502F               	movf	___ftdiv@exp,w,c
  8412  002AA6  A4D8               	btfss	status,2,c
  8413  002AA8  D007               	goto	l4226
  8414  002AAA  0E00               	movlw	0
  8415  002AAC  6E22               	movwf	?___ftdiv,c
  8416  002AAE  0E00               	movlw	0
  8417  002AB0  6E23               	movwf	?___ftdiv+1,c
  8418  002AB2  0E00               	movlw	0
  8419  002AB4  6E24               	movwf	?___ftdiv+2,c
  8420  002AB6  0012               	return	
  8421  002AB8                     l4226:
  8422  002AB8  C027  F028         	movff	___ftdiv@f2+2,??___ftdiv
  8423  002ABC  6A29               	clrf	(??___ftdiv+1)& (0+255),c
  8424  002ABE  6A2A               	clrf	(??___ftdiv+2)& (0+255),c
  8425  002AC0  3426               	rlcf	___ftdiv@f2+1,w,c
  8426  002AC2  3628               	rlcf	??___ftdiv& (0+255),f,c
  8427  002AC4  E301               	bnc	u4821
  8428  002AC6  8029               	bsf	(??___ftdiv+1)& (0+255),0,c
  8429  002AC8                     u4821:
  8430  002AC8  5028               	movf	??___ftdiv,w,c
  8431  002ACA  6E30               	movwf	___ftdiv@sign,c
  8432  002ACC  5030               	movf	___ftdiv@sign,w,c
  8433  002ACE  A4D8               	btfss	status,2,c
  8434  002AD0  D007               	goto	l4232
  8435  002AD2  0E00               	movlw	0
  8436  002AD4  6E22               	movwf	?___ftdiv,c
  8437  002AD6  0E00               	movlw	0
  8438  002AD8  6E23               	movwf	?___ftdiv+1,c
  8439  002ADA  0E00               	movlw	0
  8440  002ADC  6E24               	movwf	?___ftdiv+2,c
  8441  002ADE  0012               	return	
  8442  002AE0                     l4232:
  8443  002AE0  0E00               	movlw	0
  8444  002AE2  6E2C               	movwf	___ftdiv@f3,c
  8445  002AE4  0E00               	movlw	0
  8446  002AE6  6E2D               	movwf	___ftdiv@f3+1,c
  8447  002AE8  0E00               	movlw	0
  8448  002AEA  6E2E               	movwf	___ftdiv@f3+2,c
  8449  002AEC  5030               	movf	___ftdiv@sign,w,c
  8450  002AEE  0F89               	addlw	137
  8451  002AF0  5E2F               	subwf	___ftdiv@exp,f,c
  8452  002AF2  C024  F030         	movff	___ftdiv@f1+2,___ftdiv@sign
  8453  002AF6  5027               	movf	___ftdiv@f2+2,w,c
  8454  002AF8  1A30               	xorwf	___ftdiv@sign,f,c
  8455  002AFA  0E80               	movlw	128
  8456  002AFC  1630               	andwf	___ftdiv@sign,f,c
  8457  002AFE  8E23               	bsf	___ftdiv@f1+1,7,c
  8458  002B00  0EFF               	movlw	255
  8459  002B02  1622               	andwf	___ftdiv@f1,f,c
  8460  002B04  0EFF               	movlw	255
  8461  002B06  1623               	andwf	___ftdiv@f1+1,f,c
  8462  002B08  0E00               	movlw	0
  8463  002B0A  1624               	andwf	___ftdiv@f1+2,f,c
  8464  002B0C  8E26               	bsf	___ftdiv@f2+1,7,c
  8465  002B0E  0EFF               	movlw	255
  8466  002B10  1625               	andwf	___ftdiv@f2,f,c
  8467  002B12  0EFF               	movlw	255
  8468  002B14  1626               	andwf	___ftdiv@f2+1,f,c
  8469  002B16  0E00               	movlw	0
  8470  002B18  1627               	andwf	___ftdiv@f2+2,f,c
  8471  002B1A  0E18               	movlw	24
  8472  002B1C  6E2B               	movwf	___ftdiv@cntr,c
  8473  002B1E                     l4252:
  8474  002B1E  90D8               	bcf	status,0,c
  8475  002B20  362C               	rlcf	___ftdiv@f3,f,c
  8476  002B22  362D               	rlcf	___ftdiv@f3+1,f,c
  8477  002B24  362E               	rlcf	___ftdiv@f3+2,f,c
  8478  002B26  5025               	movf	___ftdiv@f2,w,c
  8479  002B28  5C22               	subwf	___ftdiv@f1,w,c
  8480  002B2A  5026               	movf	___ftdiv@f2+1,w,c
  8481  002B2C  5823               	subwfb	___ftdiv@f1+1,w,c
  8482  002B2E  5027               	movf	___ftdiv@f2+2,w,c
  8483  002B30  5824               	subwfb	___ftdiv@f1+2,w,c
  8484  002B32  A0D8               	btfss	status,0,c
  8485  002B34  D007               	goto	l739
  8486  002B36  5025               	movf	___ftdiv@f2,w,c
  8487  002B38  5E22               	subwf	___ftdiv@f1,f,c
  8488  002B3A  5026               	movf	___ftdiv@f2+1,w,c
  8489  002B3C  5A23               	subwfb	___ftdiv@f1+1,f,c
  8490  002B3E  5027               	movf	___ftdiv@f2+2,w,c
  8491  002B40  5A24               	subwfb	___ftdiv@f1+2,f,c
  8492  002B42  802C               	bsf	___ftdiv@f3,0,c
  8493  002B44                     l739:
  8494  002B44  90D8               	bcf	status,0,c
  8495  002B46  3622               	rlcf	___ftdiv@f1,f,c
  8496  002B48  3623               	rlcf	___ftdiv@f1+1,f,c
  8497  002B4A  3624               	rlcf	___ftdiv@f1+2,f,c
  8498  002B4C  2E2B               	decfsz	___ftdiv@cntr,f,c
  8499  002B4E  D7E7               	goto	l4252
  8500  002B50  C02C  F010         	movff	___ftdiv@f3,___ftpack@arg
  8501  002B54  C02D  F011         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8502  002B58  C02E  F012         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8503  002B5C  C02F  F013         	movff	___ftdiv@exp,___ftpack@exp
  8504  002B60  C030  F014         	movff	___ftdiv@sign,___ftpack@sign
  8505  002B64  ECBB  F015         	call	___ftpack	;wreg free
  8506  002B68  C010  F022         	movff	?___ftpack,?___ftdiv
  8507  002B6C  C011  F023         	movff	?___ftpack+1,?___ftdiv+1
  8508  002B70  C012  F024         	movff	?___ftpack+2,?___ftdiv+2
  8509  002B74  0012               	return	
  8510  002B76                     __end_of___ftdiv:
  8511                           	opt stack 0
  8512                           tblptru	equ	0xFF8
  8513                           tblptrh	equ	0xFF7
  8514                           tblptrl	equ	0xFF6
  8515                           tablat	equ	0xFF5
  8516                           prodh	equ	0xFF4
  8517                           prodl	equ	0xFF3
  8518                           intcon	equ	0xFF2
  8519                           postinc0	equ	0xFEE
  8520                           wreg	equ	0xFE8
  8521                           indf1	equ	0xFE7
  8522                           fsr1h	equ	0xFE2
  8523                           fsr1l	equ	0xFE1
  8524                           indf2	equ	0xFDF
  8525                           postinc2	equ	0xFDE
  8526                           postdec2	equ	0xFDD
  8527                           fsr2h	equ	0xFDA
  8528                           fsr2l	equ	0xFD9
  8529                           status	equ	0xFD8
  8530                           
  8531 ;; *************** function ___ftadd *****************
  8532 ;; Defined at:
  8533 ;;		line 86 in file "D:\mplab\sources\common\ftadd.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;  f1              3   60[COMRAM] float 
  8536 ;;  f2              3   63[COMRAM] float 
  8537 ;; Auto vars:     Size  Location     Type
  8538 ;;  exp1            1    2[BANK0 ] unsigned char 
  8539 ;;  exp2            1    1[BANK0 ] unsigned char 
  8540 ;;  sign            1    0[BANK0 ] unsigned char 
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  3   60[COMRAM] float 
  8543 ;; Registers used:
  8544 ;;		wreg, status,2, status,0, cstack
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8550 ;;      Params:         6       0       0       0       0       0       0       0       0
  8551 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8552 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8553 ;;      Totals:         9       3       0       0       0       0       0       0       0
  8554 ;;Total ram usage:       12 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    2
  8557 ;; This function calls:
  8558 ;;		___ftpack
  8559 ;; This function is called by:
  8560 ;;		_convert_to_degrees
  8561 ;;		_USART_Init
  8562 ;;		_sprintf
  8563 ;;		___ftsub
  8564 ;; This function uses a non-reentrant model
  8565 ;;
  8566                           
  8567                           	psect	text37
  8568  001FD4                     __ptext37:
  8569                           	opt stack 0
  8570  001FD4                     ___ftadd:
  8571                           	opt stack 26
  8572                           
  8573                           ;incstack = 0
  8574  001FD4  C03F  F043         	movff	___ftadd@f1+2,??___ftadd
  8575  001FD8  6A44               	clrf	(??___ftadd+1)& (0+255),c
  8576  001FDA  6A45               	clrf	(??___ftadd+2)& (0+255),c
  8577  001FDC  343E               	rlcf	___ftadd@f1+1,w,c
  8578  001FDE  3643               	rlcf	??___ftadd& (0+255),f,c
  8579  001FE0  E301               	bnc	u4591
  8580  001FE2  8044               	bsf	(??___ftadd+1)& (0+255),0,c
  8581  001FE4                     u4591:
  8582  001FE4  5043               	movf	??___ftadd,w,c
  8583  001FE6  0100               	movlb	0	; () banked
  8584  001FE8  6F62               	movwf	___ftadd@exp1& (0+255),b
  8585  001FEA  C042  F043         	movff	___ftadd@f2+2,??___ftadd
  8586  001FEE  6A44               	clrf	(??___ftadd+1)& (0+255),c
  8587  001FF0  6A45               	clrf	(??___ftadd+2)& (0+255),c
  8588  001FF2  3441               	rlcf	___ftadd@f2+1,w,c
  8589  001FF4  3643               	rlcf	??___ftadd& (0+255),f,c
  8590  001FF6  E301               	bnc	u4601
  8591  001FF8  8044               	bsf	(??___ftadd+1)& (0+255),0,c
  8592  001FFA                     u4601:
  8593  001FFA  5043               	movf	??___ftadd,w,c
  8594  001FFC  0100               	movlb	0	; () banked
  8595  001FFE  6F61               	movwf	___ftadd@exp2& (0+255),b
  8596                           
  8597                           ; BSR set to: 0
  8598  002000  0100               	movlb	0	; () banked
  8599  002002  5162               	movf	___ftadd@exp1& (0+255),w,b
  8600  002004  0100               	movlb	0	; () banked
  8601  002006  B4D8               	btfsc	status,2,c
  8602  002008  D00F               	goto	l704
  8603                           
  8604                           ; BSR set to: 0
  8605  00200A  0100               	movlb	0	; () banked
  8606  00200C  5161               	movf	___ftadd@exp2& (0+255),w,b
  8607  00200E  0100               	movlb	0	; () banked
  8608  002010  5D62               	subwf	___ftadd@exp1& (0+255),w,b
  8609  002012  B0D8               	btfsc	status,0,c
  8610  002014  D010               	goto	l4158
  8611                           
  8612                           ; BSR set to: 0
  8613  002016  0100               	movlb	0	; () banked
  8614  002018  5162               	movf	___ftadd@exp1& (0+255),w,b
  8615  00201A  0800               	sublw	0
  8616  00201C  0100               	movlb	0	; () banked
  8617  00201E  2561               	addwf	___ftadd@exp2& (0+255),w,b
  8618  002020  6E43               	movwf	??___ftadd& (0+255),c
  8619  002022  0E18               	movlw	24
  8620  002024  6443               	cpfsgt	??___ftadd,c
  8621  002026  D007               	goto	l4158
  8622  002028                     l704:
  8623                           
  8624                           ; BSR set to: 0
  8625  002028  C040  F03D         	movff	___ftadd@f2,?___ftadd
  8626  00202C  C041  F03E         	movff	___ftadd@f2+1,?___ftadd+1
  8627  002030  C042  F03F         	movff	___ftadd@f2+2,?___ftadd+2
  8628  002034  0012               	return	
  8629  002036                     l4158:
  8630                           
  8631                           ; BSR set to: 0
  8632  002036  0100               	movlb	0	; () banked
  8633  002038  5161               	movf	___ftadd@exp2& (0+255),w,b
  8634  00203A  0100               	movlb	0	; () banked
  8635  00203C  B4D8               	btfsc	status,2,c
  8636  00203E  D00F               	goto	l708
  8637                           
  8638                           ; BSR set to: 0
  8639  002040  0100               	movlb	0	; () banked
  8640  002042  5162               	movf	___ftadd@exp1& (0+255),w,b
  8641  002044  0100               	movlb	0	; () banked
  8642  002046  5D61               	subwf	___ftadd@exp2& (0+255),w,b
  8643  002048  B0D8               	btfsc	status,0,c
  8644  00204A  D010               	goto	l4164
  8645                           
  8646                           ; BSR set to: 0
  8647  00204C  0100               	movlb	0	; () banked
  8648  00204E  5161               	movf	___ftadd@exp2& (0+255),w,b
  8649  002050  0800               	sublw	0
  8650  002052  0100               	movlb	0	; () banked
  8651  002054  2562               	addwf	___ftadd@exp1& (0+255),w,b
  8652  002056  6E43               	movwf	??___ftadd& (0+255),c
  8653  002058  0E18               	movlw	24
  8654  00205A  6443               	cpfsgt	??___ftadd,c
  8655  00205C  D007               	goto	l4164
  8656  00205E                     l708:
  8657                           
  8658                           ; BSR set to: 0
  8659  00205E  C03D  F03D         	movff	___ftadd@f1,?___ftadd
  8660  002062  C03E  F03E         	movff	___ftadd@f1+1,?___ftadd+1
  8661  002066  C03F  F03F         	movff	___ftadd@f1+2,?___ftadd+2
  8662  00206A  0012               	return	
  8663  00206C                     l4164:
  8664                           
  8665                           ; BSR set to: 0
  8666  00206C  0E06               	movlw	6
  8667  00206E  0100               	movlb	0	; () banked
  8668  002070  6F60               	movwf	___ftadd@sign& (0+255),b
  8669                           
  8670                           ; BSR set to: 0
  8671  002072  AE3F               	btfss	___ftadd@f1+2,7,c
  8672  002074  D002               	goto	l4170
  8673                           
  8674                           ; BSR set to: 0
  8675  002076  0100               	movlb	0	; () banked
  8676  002078  8F60               	bsf	___ftadd@sign& (0+255),7,b
  8677  00207A                     l4170:
  8678                           
  8679                           ; BSR set to: 0
  8680  00207A  AE42               	btfss	___ftadd@f2+2,7,c
  8681  00207C  D002               	goto	l710
  8682                           
  8683                           ; BSR set to: 0
  8684  00207E  0100               	movlb	0	; () banked
  8685  002080  8D60               	bsf	___ftadd@sign& (0+255),6,b
  8686  002082                     l710:
  8687                           
  8688                           ; BSR set to: 0
  8689  002082  8E3E               	bsf	___ftadd@f1+1,7,c
  8690                           
  8691                           ; BSR set to: 0
  8692  002084  0EFF               	movlw	255
  8693  002086  163D               	andwf	___ftadd@f1,f,c
  8694  002088  0EFF               	movlw	255
  8695  00208A  163E               	andwf	___ftadd@f1+1,f,c
  8696  00208C  0E00               	movlw	0
  8697  00208E  163F               	andwf	___ftadd@f1+2,f,c
  8698  002090  8E41               	bsf	___ftadd@f2+1,7,c
  8699                           
  8700                           ; BSR set to: 0
  8701  002092  0EFF               	movlw	255
  8702  002094  1640               	andwf	___ftadd@f2,f,c
  8703  002096  0EFF               	movlw	255
  8704  002098  1641               	andwf	___ftadd@f2+1,f,c
  8705  00209A  0E00               	movlw	0
  8706  00209C  1642               	andwf	___ftadd@f2+2,f,c
  8707                           
  8708                           ; BSR set to: 0
  8709  00209E  0100               	movlb	0	; () banked
  8710  0020A0  5161               	movf	___ftadd@exp2& (0+255),w,b
  8711  0020A2  0100               	movlb	0	; () banked
  8712  0020A4  5D62               	subwf	___ftadd@exp1& (0+255),w,b
  8713  0020A6  B0D8               	btfsc	status,0,c
  8714  0020A8  D022               	goto	l4190
  8715  0020AA                     l4180:
  8716                           
  8717                           ; BSR set to: 0
  8718  0020AA  90D8               	bcf	status,0,c
  8719  0020AC  3640               	rlcf	___ftadd@f2,f,c
  8720  0020AE  3641               	rlcf	___ftadd@f2+1,f,c
  8721  0020B0  3642               	rlcf	___ftadd@f2+2,f,c
  8722  0020B2  0100               	movlb	0	; () banked
  8723  0020B4  0761               	decf	___ftadd@exp2& (0+255),f,b
  8724                           
  8725                           ; BSR set to: 0
  8726  0020B6  0100               	movlb	0	; () banked
  8727  0020B8  5162               	movf	___ftadd@exp1& (0+255),w,b
  8728  0020BA  0100               	movlb	0	; () banked
  8729  0020BC  1961               	xorwf	___ftadd@exp2& (0+255),w,b
  8730  0020BE  B4D8               	btfsc	status,2,c
  8731  0020C0  D00F               	goto	l4188
  8732                           
  8733                           ; BSR set to: 0
  8734  0020C2  0100               	movlb	0	; () banked
  8735  0020C4  0760               	decf	___ftadd@sign& (0+255),f,b
  8736  0020C6  C060  F043         	movff	___ftadd@sign,??___ftadd
  8737  0020CA  0E07               	movlw	7
  8738  0020CC  1643               	andwf	??___ftadd,f,c
  8739  0020CE  B4D8               	btfsc	status,2,c
  8740  0020D0  D007               	goto	l4188
  8741  0020D2  D7EB               	goto	l4180
  8742  0020D4                     l4186:
  8743                           
  8744                           ; BSR set to: 0
  8745  0020D4  90D8               	bcf	status,0,c
  8746  0020D6  323F               	rrcf	___ftadd@f1+2,f,c
  8747  0020D8  323E               	rrcf	___ftadd@f1+1,f,c
  8748  0020DA  323D               	rrcf	___ftadd@f1,f,c
  8749  0020DC  0100               	movlb	0	; () banked
  8750  0020DE  2B62               	incf	___ftadd@exp1& (0+255),f,b
  8751  0020E0                     l4188:
  8752                           
  8753                           ; BSR set to: 0
  8754  0020E0  0100               	movlb	0	; () banked
  8755  0020E2  5161               	movf	___ftadd@exp2& (0+255),w,b
  8756  0020E4  0100               	movlb	0	; () banked
  8757  0020E6  1962               	xorwf	___ftadd@exp1& (0+255),w,b
  8758  0020E8  B4D8               	btfsc	status,2,c
  8759  0020EA  D028               	goto	l719
  8760  0020EC  D7F3               	goto	l4186
  8761  0020EE                     l4190:
  8762                           
  8763                           ; BSR set to: 0
  8764  0020EE  0100               	movlb	0	; () banked
  8765  0020F0  5162               	movf	___ftadd@exp1& (0+255),w,b
  8766  0020F2  0100               	movlb	0	; () banked
  8767  0020F4  5D61               	subwf	___ftadd@exp2& (0+255),w,b
  8768  0020F6  B0D8               	btfsc	status,0,c
  8769  0020F8  D021               	goto	l719
  8770  0020FA                     l4192:
  8771                           
  8772                           ; BSR set to: 0
  8773  0020FA  90D8               	bcf	status,0,c
  8774  0020FC  363D               	rlcf	___ftadd@f1,f,c
  8775  0020FE  363E               	rlcf	___ftadd@f1+1,f,c
  8776  002100  363F               	rlcf	___ftadd@f1+2,f,c
  8777  002102  0100               	movlb	0	; () banked
  8778  002104  0762               	decf	___ftadd@exp1& (0+255),f,b
  8779                           
  8780                           ; BSR set to: 0
  8781  002106  0100               	movlb	0	; () banked
  8782  002108  5162               	movf	___ftadd@exp1& (0+255),w,b
  8783  00210A  0100               	movlb	0	; () banked
  8784  00210C  1961               	xorwf	___ftadd@exp2& (0+255),w,b
  8785  00210E  B4D8               	btfsc	status,2,c
  8786  002110  D00F               	goto	l4200
  8787                           
  8788                           ; BSR set to: 0
  8789  002112  0100               	movlb	0	; () banked
  8790  002114  0760               	decf	___ftadd@sign& (0+255),f,b
  8791  002116  C060  F043         	movff	___ftadd@sign,??___ftadd
  8792  00211A  0E07               	movlw	7
  8793  00211C  1643               	andwf	??___ftadd,f,c
  8794  00211E  B4D8               	btfsc	status,2,c
  8795  002120  D007               	goto	l4200
  8796  002122  D7EB               	goto	l4192
  8797  002124                     l4198:
  8798                           
  8799                           ; BSR set to: 0
  8800  002124  90D8               	bcf	status,0,c
  8801  002126  3242               	rrcf	___ftadd@f2+2,f,c
  8802  002128  3241               	rrcf	___ftadd@f2+1,f,c
  8803  00212A  3240               	rrcf	___ftadd@f2,f,c
  8804  00212C  0100               	movlb	0	; () banked
  8805  00212E  2B61               	incf	___ftadd@exp2& (0+255),f,b
  8806  002130                     l4200:
  8807                           
  8808                           ; BSR set to: 0
  8809  002130  0100               	movlb	0	; () banked
  8810  002132  5161               	movf	___ftadd@exp2& (0+255),w,b
  8811  002134  0100               	movlb	0	; () banked
  8812  002136  1962               	xorwf	___ftadd@exp1& (0+255),w,b
  8813  002138  A4D8               	btfss	status,2,c
  8814  00213A  D7F4               	goto	l4198
  8815  00213C                     l719:
  8816                           
  8817                           ; BSR set to: 0
  8818  00213C  0100               	movlb	0	; () banked
  8819  00213E  AF60               	btfss	___ftadd@sign& (0+255),7,b
  8820  002140  D00C               	goto	l728
  8821                           
  8822                           ; BSR set to: 0
  8823  002142  0EFF               	movlw	255
  8824  002144  1A3D               	xorwf	___ftadd@f1,f,c
  8825  002146  0EFF               	movlw	255
  8826  002148  1A3E               	xorwf	___ftadd@f1+1,f,c
  8827  00214A  0EFF               	movlw	255
  8828  00214C  1A3F               	xorwf	___ftadd@f1+2,f,c
  8829  00214E  0E01               	movlw	1
  8830  002150  263D               	addwf	___ftadd@f1,f,c
  8831  002152  0E00               	movlw	0
  8832  002154  223E               	addwfc	___ftadd@f1+1,f,c
  8833  002156  0E00               	movlw	0
  8834  002158  223F               	addwfc	___ftadd@f1+2,f,c
  8835  00215A                     l728:
  8836                           
  8837                           ; BSR set to: 0
  8838  00215A  0100               	movlb	0	; () banked
  8839  00215C  AD60               	btfss	___ftadd@sign& (0+255),6,b
  8840  00215E  D00C               	goto	l4206
  8841                           
  8842                           ; BSR set to: 0
  8843  002160  0EFF               	movlw	255
  8844  002162  1A40               	xorwf	___ftadd@f2,f,c
  8845  002164  0EFF               	movlw	255
  8846  002166  1A41               	xorwf	___ftadd@f2+1,f,c
  8847  002168  0EFF               	movlw	255
  8848  00216A  1A42               	xorwf	___ftadd@f2+2,f,c
  8849  00216C  0E01               	movlw	1
  8850  00216E  2640               	addwf	___ftadd@f2,f,c
  8851  002170  0E00               	movlw	0
  8852  002172  2241               	addwfc	___ftadd@f2+1,f,c
  8853  002174  0E00               	movlw	0
  8854  002176  2242               	addwfc	___ftadd@f2+2,f,c
  8855  002178                     l4206:
  8856                           
  8857                           ; BSR set to: 0
  8858  002178  0E00               	movlw	0
  8859  00217A  0100               	movlb	0	; () banked
  8860  00217C  6F60               	movwf	___ftadd@sign& (0+255),b
  8861                           
  8862                           ; BSR set to: 0
  8863  00217E  503D               	movf	___ftadd@f1,w,c
  8864  002180  2640               	addwf	___ftadd@f2,f,c
  8865  002182  503E               	movf	___ftadd@f1+1,w,c
  8866  002184  2241               	addwfc	___ftadd@f2+1,f,c
  8867  002186  503F               	movf	___ftadd@f1+2,w,c
  8868  002188  2242               	addwfc	___ftadd@f2+2,f,c
  8869                           
  8870                           ; BSR set to: 0
  8871  00218A  AE42               	btfss	___ftadd@f2+2,7,c
  8872  00218C  D00F               	goto	l4216
  8873                           
  8874                           ; BSR set to: 0
  8875  00218E  0EFF               	movlw	255
  8876  002190  1A40               	xorwf	___ftadd@f2,f,c
  8877  002192  0EFF               	movlw	255
  8878  002194  1A41               	xorwf	___ftadd@f2+1,f,c
  8879  002196  0EFF               	movlw	255
  8880  002198  1A42               	xorwf	___ftadd@f2+2,f,c
  8881  00219A  0E01               	movlw	1
  8882  00219C  2640               	addwf	___ftadd@f2,f,c
  8883  00219E  0E00               	movlw	0
  8884  0021A0  2241               	addwfc	___ftadd@f2+1,f,c
  8885  0021A2  0E00               	movlw	0
  8886  0021A4  2242               	addwfc	___ftadd@f2+2,f,c
  8887                           
  8888                           ; BSR set to: 0
  8889  0021A6  0E01               	movlw	1
  8890  0021A8  0100               	movlb	0	; () banked
  8891  0021AA  6F60               	movwf	___ftadd@sign& (0+255),b
  8892  0021AC                     l4216:
  8893                           
  8894                           ; BSR set to: 0
  8895  0021AC  C040  F010         	movff	___ftadd@f2,___ftpack@arg
  8896  0021B0  C041  F011         	movff	___ftadd@f2+1,___ftpack@arg+1
  8897  0021B4  C042  F012         	movff	___ftadd@f2+2,___ftpack@arg+2
  8898  0021B8  C062  F013         	movff	___ftadd@exp1,___ftpack@exp
  8899  0021BC  C060  F014         	movff	___ftadd@sign,___ftpack@sign
  8900  0021C0  ECBB  F015         	call	___ftpack	;wreg free
  8901  0021C4  C010  F03D         	movff	?___ftpack,?___ftadd
  8902  0021C8  C011  F03E         	movff	?___ftpack+1,?___ftadd+1
  8903  0021CC  C012  F03F         	movff	?___ftpack+2,?___ftadd+2
  8904  0021D0  0012               	return	
  8905  0021D2                     __end_of___ftadd:
  8906                           	opt stack 0
  8907                           tblptru	equ	0xFF8
  8908                           tblptrh	equ	0xFF7
  8909                           tblptrl	equ	0xFF6
  8910                           tablat	equ	0xFF5
  8911                           prodh	equ	0xFF4
  8912                           prodl	equ	0xFF3
  8913                           intcon	equ	0xFF2
  8914                           postinc0	equ	0xFEE
  8915                           wreg	equ	0xFE8
  8916                           indf1	equ	0xFE7
  8917                           fsr1h	equ	0xFE2
  8918                           fsr1l	equ	0xFE1
  8919                           indf2	equ	0xFDF
  8920                           postinc2	equ	0xFDE
  8921                           postdec2	equ	0xFDD
  8922                           fsr2h	equ	0xFDA
  8923                           fsr2l	equ	0xFD9
  8924                           status	equ	0xFD8
  8925                           
  8926 ;; *************** function ___altoft *****************
  8927 ;; Defined at:
  8928 ;;		line 42 in file "D:\mplab\sources\common\altoft.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;  c               4   23[COMRAM] long 
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;  sign            1   32[COMRAM] unsigned char 
  8933 ;;  exp             1   31[COMRAM] unsigned char 
  8934 ;; Return value:  Size  Location     Type
  8935 ;;                  3   23[COMRAM] float 
  8936 ;; Registers used:
  8937 ;;		wreg, status,2, status,0, cstack
  8938 ;; Tracked objects:
  8939 ;;		On entry : 0/0
  8940 ;;		On exit  : 0/0
  8941 ;;		Unchanged: 0/0
  8942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8943 ;;      Params:         4       0       0       0       0       0       0       0       0
  8944 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8945 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8946 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8947 ;;Total ram usage:       10 bytes
  8948 ;; Hardware stack levels used:    1
  8949 ;; Hardware stack levels required when called:    2
  8950 ;; This function calls:
  8951 ;;		___ftpack
  8952 ;; This function is called by:
  8953 ;;		_USART_Init
  8954 ;;		_strtod
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           	psect	text38
  8959  00306E                     __ptext38:
  8960                           	opt stack 0
  8961  00306E                     ___altoft:
  8962                           	opt stack 25
  8963                           
  8964                           ;incstack = 0
  8965  00306E  0E00               	movlw	0
  8966  003070  6E21               	movwf	___altoft@sign,c
  8967  003072  0E8E               	movlw	142
  8968  003074  6E20               	movwf	___altoft@exp,c
  8969  003076  AE1B               	btfss	___altoft@c+3,7,c
  8970  003078  D011               	goto	l4144
  8971  00307A  1E1B               	comf	___altoft@c+3,f,c
  8972  00307C  1E1A               	comf	___altoft@c+2,f,c
  8973  00307E  1E19               	comf	___altoft@c+1,f,c
  8974  003080  6C18               	negf	___altoft@c,c
  8975  003082  0E00               	movlw	0
  8976  003084  2219               	addwfc	___altoft@c+1,f,c
  8977  003086  221A               	addwfc	___altoft@c+2,f,c
  8978  003088  221B               	addwfc	___altoft@c+3,f,c
  8979  00308A  0E01               	movlw	1
  8980  00308C  6E21               	movwf	___altoft@sign,c
  8981  00308E  D006               	goto	l4144
  8982  003090                     l4142:
  8983  003090  90D8               	bcf	status,0,c
  8984  003092  321B               	rrcf	___altoft@c+3,f,c
  8985  003094  321A               	rrcf	___altoft@c+2,f,c
  8986  003096  3219               	rrcf	___altoft@c+1,f,c
  8987  003098  3218               	rrcf	___altoft@c,f,c
  8988  00309A  2A20               	incf	___altoft@exp,f,c
  8989  00309C                     l4144:
  8990  00309C  0E00               	movlw	0
  8991  00309E  1418               	andwf	___altoft@c,w,c
  8992  0030A0  6E1C               	movwf	??___altoft& (0+255),c
  8993  0030A2  0E00               	movlw	0
  8994  0030A4  1419               	andwf	___altoft@c+1,w,c
  8995  0030A6  6E1D               	movwf	(??___altoft+1)& (0+255),c
  8996  0030A8  0E00               	movlw	0
  8997  0030AA  141A               	andwf	___altoft@c+2,w,c
  8998  0030AC  6E1E               	movwf	(??___altoft+2)& (0+255),c
  8999  0030AE  0EFF               	movlw	255
  9000  0030B0  141B               	andwf	___altoft@c+3,w,c
  9001  0030B2  6E1F               	movwf	(??___altoft+3)& (0+255),c
  9002  0030B4  501C               	movf	??___altoft,w,c
  9003  0030B6  101D               	iorwf	??___altoft+1,w,c
  9004  0030B8  101E               	iorwf	??___altoft+2,w,c
  9005  0030BA  101F               	iorwf	??___altoft+3,w,c
  9006  0030BC  A4D8               	btfss	status,2,c
  9007  0030BE  D7E8               	goto	l4142
  9008  0030C0  C018  F010         	movff	___altoft@c,___ftpack@arg
  9009  0030C4  C019  F011         	movff	___altoft@c+1,___ftpack@arg+1
  9010  0030C8  C01A  F012         	movff	___altoft@c+2,___ftpack@arg+2
  9011  0030CC  C020  F013         	movff	___altoft@exp,___ftpack@exp
  9012  0030D0  C021  F014         	movff	___altoft@sign,___ftpack@sign
  9013  0030D4  ECBB  F015         	call	___ftpack	;wreg free
  9014  0030D8  C010  F018         	movff	?___ftpack,?___altoft
  9015  0030DC  C011  F019         	movff	?___ftpack+1,?___altoft+1
  9016  0030E0  C012  F01A         	movff	?___ftpack+2,?___altoft+2
  9017  0030E4  0012               	return	
  9018  0030E6                     __end_of___altoft:
  9019                           	opt stack 0
  9020                           tblptru	equ	0xFF8
  9021                           tblptrh	equ	0xFF7
  9022                           tblptrl	equ	0xFF6
  9023                           tablat	equ	0xFF5
  9024                           prodh	equ	0xFF4
  9025                           prodl	equ	0xFF3
  9026                           intcon	equ	0xFF2
  9027                           postinc0	equ	0xFEE
  9028                           wreg	equ	0xFE8
  9029                           indf1	equ	0xFE7
  9030                           fsr1h	equ	0xFE2
  9031                           fsr1l	equ	0xFE1
  9032                           indf2	equ	0xFDF
  9033                           postinc2	equ	0xFDE
  9034                           postdec2	equ	0xFDD
  9035                           fsr2h	equ	0xFDA
  9036                           fsr2l	equ	0xFD9
  9037                           status	equ	0xFD8
  9038                           
  9039 ;; *************** function ___ftpack *****************
  9040 ;; Defined at:
  9041 ;;		line 62 in file "D:\mplab\sources\common\float.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;  arg             3   15[COMRAM] unsigned um
  9044 ;;  exp             1   18[COMRAM] unsigned char 
  9045 ;;  sign            1   19[COMRAM] unsigned char 
  9046 ;; Auto vars:     Size  Location     Type
  9047 ;;		None
  9048 ;; Return value:  Size  Location     Type
  9049 ;;                  3   15[COMRAM] float 
  9050 ;; Registers used:
  9051 ;;		wreg, status,2, status,0
  9052 ;; Tracked objects:
  9053 ;;		On entry : 0/0
  9054 ;;		On exit  : 0/0
  9055 ;;		Unchanged: 0/0
  9056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9057 ;;      Params:         5       0       0       0       0       0       0       0       0
  9058 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9059 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9060 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9061 ;;Total ram usage:        8 bytes
  9062 ;; Hardware stack levels used:    1
  9063 ;; Hardware stack levels required when called:    1
  9064 ;; This function calls:
  9065 ;;		Nothing
  9066 ;; This function is called by:
  9067 ;;		___altoft
  9068 ;;		___awtoft
  9069 ;;		___ftadd
  9070 ;;		___ftdiv
  9071 ;;		___ftmul
  9072 ;;		___lltoft
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076                           	psect	text39
  9077  002B76                     __ptext39:
  9078                           	opt stack 0
  9079  002B76                     ___ftpack:
  9080                           	opt stack 26
  9081                           
  9082                           ;incstack = 0
  9083  002B76  5013               	movf	___ftpack@exp,w,c
  9084  002B78  B4D8               	btfsc	status,2,c
  9085  002B7A  D005               	goto	l4102
  9086  002B7C  5010               	movf	___ftpack@arg,w,c
  9087  002B7E  1011               	iorwf	___ftpack@arg+1,w,c
  9088  002B80  1012               	iorwf	___ftpack@arg+2,w,c
  9089  002B82  A4D8               	btfss	status,2,c
  9090  002B84  D00C               	goto	l4108
  9091  002B86                     l4102:
  9092  002B86  0E00               	movlw	0
  9093  002B88  6E10               	movwf	?___ftpack,c
  9094  002B8A  0E00               	movlw	0
  9095  002B8C  6E11               	movwf	?___ftpack+1,c
  9096  002B8E  0E00               	movlw	0
  9097  002B90  6E12               	movwf	?___ftpack+2,c
  9098  002B92  0012               	return	
  9099  002B94                     l4106:
  9100  002B94  2A13               	incf	___ftpack@exp,f,c
  9101  002B96  90D8               	bcf	status,0,c
  9102  002B98  3212               	rrcf	___ftpack@arg+2,f,c
  9103  002B9A  3211               	rrcf	___ftpack@arg+1,f,c
  9104  002B9C  3210               	rrcf	___ftpack@arg,f,c
  9105  002B9E                     l4108:
  9106  002B9E  0E00               	movlw	0
  9107  002BA0  1410               	andwf	___ftpack@arg,w,c
  9108  002BA2  6E15               	movwf	??___ftpack& (0+255),c
  9109  002BA4  0E00               	movlw	0
  9110  002BA6  1411               	andwf	___ftpack@arg+1,w,c
  9111  002BA8  6E16               	movwf	(??___ftpack+1)& (0+255),c
  9112  002BAA  0EFE               	movlw	254
  9113  002BAC  1412               	andwf	___ftpack@arg+2,w,c
  9114  002BAE  6E17               	movwf	(??___ftpack+2)& (0+255),c
  9115  002BB0  5015               	movf	??___ftpack,w,c
  9116  002BB2  1016               	iorwf	??___ftpack+1,w,c
  9117  002BB4  1017               	iorwf	??___ftpack+2,w,c
  9118  002BB6  B4D8               	btfsc	status,2,c
  9119  002BB8  D00C               	goto	l4114
  9120  002BBA  D7EC               	goto	l4106
  9121  002BBC                     l4110:
  9122  002BBC  2A13               	incf	___ftpack@exp,f,c
  9123  002BBE  0E01               	movlw	1
  9124  002BC0  2610               	addwf	___ftpack@arg,f,c
  9125  002BC2  0E00               	movlw	0
  9126  002BC4  2211               	addwfc	___ftpack@arg+1,f,c
  9127  002BC6  0E00               	movlw	0
  9128  002BC8  2212               	addwfc	___ftpack@arg+2,f,c
  9129  002BCA  90D8               	bcf	status,0,c
  9130  002BCC  3212               	rrcf	___ftpack@arg+2,f,c
  9131  002BCE  3211               	rrcf	___ftpack@arg+1,f,c
  9132  002BD0  3210               	rrcf	___ftpack@arg,f,c
  9133  002BD2                     l4114:
  9134  002BD2  0E00               	movlw	0
  9135  002BD4  1410               	andwf	___ftpack@arg,w,c
  9136  002BD6  6E15               	movwf	??___ftpack& (0+255),c
  9137  002BD8  0E00               	movlw	0
  9138  002BDA  1411               	andwf	___ftpack@arg+1,w,c
  9139  002BDC  6E16               	movwf	(??___ftpack+1)& (0+255),c
  9140  002BDE  0EFF               	movlw	255
  9141  002BE0  1412               	andwf	___ftpack@arg+2,w,c
  9142  002BE2  6E17               	movwf	(??___ftpack+2)& (0+255),c
  9143  002BE4  5015               	movf	??___ftpack,w,c
  9144  002BE6  1016               	iorwf	??___ftpack+1,w,c
  9145  002BE8  1017               	iorwf	??___ftpack+2,w,c
  9146  002BEA  B4D8               	btfsc	status,2,c
  9147  002BEC  D006               	goto	l4118
  9148  002BEE  D7E6               	goto	l4110
  9149  002BF0                     l4116:
  9150  002BF0  0613               	decf	___ftpack@exp,f,c
  9151  002BF2  90D8               	bcf	status,0,c
  9152  002BF4  3610               	rlcf	___ftpack@arg,f,c
  9153  002BF6  3611               	rlcf	___ftpack@arg+1,f,c
  9154  002BF8  3612               	rlcf	___ftpack@arg+2,f,c
  9155  002BFA                     l4118:
  9156  002BFA  BE11               	btfsc	___ftpack@arg+1,7,c
  9157  002BFC  D003               	goto	l681
  9158  002BFE  0E02               	movlw	2
  9159  002C00  6013               	cpfslt	___ftpack@exp,c
  9160  002C02  D7F6               	goto	l4116
  9161  002C04                     l681:
  9162  002C04  A013               	btfss	___ftpack@exp,0,c
  9163  002C06  9E11               	bcf	___ftpack@arg+1,7,c
  9164  002C08  90D8               	bcf	status,0,c
  9165  002C0A  3213               	rrcf	___ftpack@exp,f,c
  9166  002C0C  5013               	movf	___ftpack@exp,w,c
  9167  002C0E  1212               	iorwf	___ftpack@arg+2,f,c
  9168  002C10  5014               	movf	___ftpack@sign,w,c
  9169  002C12  A4D8               	btfss	status,2,c
  9170  002C14  8E12               	bsf	___ftpack@arg+2,7,c
  9171  002C16  C010  F010         	movff	___ftpack@arg,?___ftpack
  9172  002C1A  C011  F011         	movff	___ftpack@arg+1,?___ftpack+1
  9173  002C1E  C012  F012         	movff	___ftpack@arg+2,?___ftpack+2
  9174  002C22  0012               	return	
  9175  002C24                     __end_of___ftpack:
  9176                           	opt stack 0
  9177                           tblptru	equ	0xFF8
  9178                           tblptrh	equ	0xFF7
  9179                           tblptrl	equ	0xFF6
  9180                           tablat	equ	0xFF5
  9181                           prodh	equ	0xFF4
  9182                           prodl	equ	0xFF3
  9183                           intcon	equ	0xFF2
  9184                           postinc0	equ	0xFEE
  9185                           wreg	equ	0xFE8
  9186                           indf1	equ	0xFE7
  9187                           fsr1h	equ	0xFE2
  9188                           fsr1l	equ	0xFE1
  9189                           indf2	equ	0xFDF
  9190                           postinc2	equ	0xFDE
  9191                           postdec2	equ	0xFDD
  9192                           fsr2h	equ	0xFDA
  9193                           fsr2l	equ	0xFD9
  9194                           status	equ	0xFD8
  9195                           
  9196 ;; *************** function _LCD_String_xy *****************
  9197 ;; Defined at:
  9198 ;;		line 57 in file "LCD_20x4_C_file.c"
  9199 ;; Parameters:    Size  Location     Type
  9200 ;;  row             1    wreg     unsigned char 
  9201 ;;  pos             1   24[COMRAM] unsigned char 
  9202 ;;  str             2   25[COMRAM] PTR const unsigned char 
  9203 ;;		 -> STR_11(6), STR_8(7), STR_5(6), STR_2(11), 
  9204 ;; Auto vars:     Size  Location     Type
  9205 ;;  row             1   27[COMRAM] unsigned char 
  9206 ;; Return value:  Size  Location     Type
  9207 ;;                  1    wreg      void 
  9208 ;; Registers used:
  9209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9210 ;; Tracked objects:
  9211 ;;		On entry : 0/0
  9212 ;;		On exit  : 0/0
  9213 ;;		Unchanged: 0/0
  9214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9215 ;;      Params:         3       0       0       0       0       0       0       0       0
  9216 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9217 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9218 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9219 ;;Total ram usage:        4 bytes
  9220 ;; Hardware stack levels used:    1
  9221 ;; Hardware stack levels required when called:    4
  9222 ;; This function calls:
  9223 ;;		_LCD_Command
  9224 ;;		_LCD_String
  9225 ;; This function is called by:
  9226 ;;		_main
  9227 ;; This function uses a non-reentrant model
  9228 ;;
  9229                           
  9230                           	psect	text40
  9231  00328A                     __ptext40:
  9232                           	opt stack 0
  9233  00328A                     _LCD_String_xy:
  9234                           	opt stack 26
  9235                           
  9236                           ;incstack = 0
  9237                           ;LCD_String_xy@row stored from wreg
  9238  00328A  6E1C               	movwf	LCD_String_xy@row,c
  9239                           
  9240                           ;LCD_20x4_C_file.c: 59: if (row == 1)
  9241  00328C  041C               	decf	LCD_String_xy@row,w,c
  9242  00328E  A4D8               	btfss	status,2,c
  9243  003290  D006               	goto	l3854
  9244                           
  9245                           ;LCD_20x4_C_file.c: 60: LCD_Command((pos & 0x0F)|0x80);
  9246  003292  5019               	movf	LCD_String_xy@pos,w,c
  9247  003294  0B0F               	andlw	15
  9248  003296  0980               	iorlw	128
  9249  003298  EC2F  F01B         	call	_LCD_Command
  9250  00329C  D01D               	goto	l3866
  9251  00329E                     l3854:
  9252                           
  9253                           ;LCD_20x4_C_file.c: 61: else if (row == 2)
  9254  00329E  0E02               	movlw	2
  9255  0032A0  181C               	xorwf	LCD_String_xy@row,w,c
  9256  0032A2  A4D8               	btfss	status,2,c
  9257  0032A4  D006               	goto	l3858
  9258                           
  9259                           ;LCD_20x4_C_file.c: 62: LCD_Command((pos & 0x0F)|0xC0);
  9260  0032A6  5019               	movf	LCD_String_xy@pos,w,c
  9261  0032A8  0B0F               	andlw	15
  9262  0032AA  09C0               	iorlw	192
  9263  0032AC  EC2F  F01B         	call	_LCD_Command
  9264  0032B0  D013               	goto	l3866
  9265  0032B2                     l3858:
  9266                           
  9267                           ;LCD_20x4_C_file.c: 63: else if (row == 3)
  9268  0032B2  0E03               	movlw	3
  9269  0032B4  181C               	xorwf	LCD_String_xy@row,w,c
  9270  0032B6  A4D8               	btfss	status,2,c
  9271  0032B8  D006               	goto	l3862
  9272                           
  9273                           ;LCD_20x4_C_file.c: 64: LCD_Command((pos & 0x0F)|0x94);
  9274  0032BA  5019               	movf	LCD_String_xy@pos,w,c
  9275  0032BC  0B0F               	andlw	15
  9276  0032BE  0994               	iorlw	148
  9277  0032C0  EC2F  F01B         	call	_LCD_Command
  9278  0032C4  D009               	goto	l3866
  9279  0032C6                     l3862:
  9280                           
  9281                           ;LCD_20x4_C_file.c: 65: else if (row == 4)
  9282  0032C6  0E04               	movlw	4
  9283  0032C8  181C               	xorwf	LCD_String_xy@row,w,c
  9284  0032CA  A4D8               	btfss	status,2,c
  9285  0032CC  D005               	goto	l3866
  9286                           
  9287                           ;LCD_20x4_C_file.c: 66: LCD_Command((pos & 0x0F)|0xD4);
  9288  0032CE  5019               	movf	LCD_String_xy@pos,w,c
  9289  0032D0  0B0F               	andlw	15
  9290  0032D2  09D4               	iorlw	212
  9291  0032D4  EC2F  F01B         	call	_LCD_Command
  9292  0032D8                     l3866:
  9293                           
  9294                           ;LCD_20x4_C_file.c: 67: LCD_String(str);
  9295  0032D8  C01A  F017         	movff	LCD_String_xy@str,LCD_String@str
  9296  0032DC  C01B  F018         	movff	LCD_String_xy@str+1,LCD_String@str+1
  9297  0032E0  ECCA  F019         	call	_LCD_String	;wreg free
  9298  0032E4  0012               	return		;funcret
  9299  0032E6                     __end_of_LCD_String_xy:
  9300                           	opt stack 0
  9301                           tblptru	equ	0xFF8
  9302                           tblptrh	equ	0xFF7
  9303                           tblptrl	equ	0xFF6
  9304                           tablat	equ	0xFF5
  9305                           prodh	equ	0xFF4
  9306                           prodl	equ	0xFF3
  9307                           intcon	equ	0xFF2
  9308                           postinc0	equ	0xFEE
  9309                           wreg	equ	0xFE8
  9310                           indf1	equ	0xFE7
  9311                           fsr1h	equ	0xFE2
  9312                           fsr1l	equ	0xFE1
  9313                           indf2	equ	0xFDF
  9314                           postinc2	equ	0xFDE
  9315                           postdec2	equ	0xFDD
  9316                           fsr2h	equ	0xFDA
  9317                           fsr2l	equ	0xFD9
  9318                           status	equ	0xFD8
  9319                           
  9320 ;; *************** function _LCD_String *****************
  9321 ;; Defined at:
  9322 ;;		line 47 in file "LCD_20x4_C_file.c"
  9323 ;; Parameters:    Size  Location     Type
  9324 ;;  str             2   22[COMRAM] PTR const unsigned char 
  9325 ;;		 -> STR_11(6), STR_8(7), STR_5(6), STR_3(3), 
  9326 ;;		 -> Data_Buffer(15), STR_2(11), main@GPS_Buffer(15), 
  9327 ;; Auto vars:     Size  Location     Type
  9328 ;;  i               2    0        int 
  9329 ;; Return value:  Size  Location     Type
  9330 ;;                  1    wreg      void 
  9331 ;; Registers used:
  9332 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9333 ;; Tracked objects:
  9334 ;;		On entry : 0/0
  9335 ;;		On exit  : 0/0
  9336 ;;		Unchanged: 0/0
  9337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9338 ;;      Params:         2       0       0       0       0       0       0       0       0
  9339 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9341 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9342 ;;Total ram usage:        2 bytes
  9343 ;; Hardware stack levels used:    1
  9344 ;; Hardware stack levels required when called:    3
  9345 ;; This function calls:
  9346 ;;		_LCD_Char
  9347 ;; This function is called by:
  9348 ;;		_main
  9349 ;;		_LCD_String_xy
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           	psect	text41
  9354  003394                     __ptext41:
  9355                           	opt stack 0
  9356  003394                     _LCD_String:
  9357                           	opt stack 26
  9358                           
  9359                           ;LCD_20x4_C_file.c: 49: int i;
  9360                           ;LCD_20x4_C_file.c: 50: while((*str)!=0)
  9361                           
  9362                           ;incstack = 0
  9363  003394  D014               	goto	l3732
  9364  003396                     l3728:
  9365                           
  9366                           ;LCD_20x4_C_file.c: 51: {
  9367                           ;LCD_20x4_C_file.c: 52: LCD_Char (*str);
  9368  003396  C017  FFF6         	movff	LCD_String@str,tblptrl
  9369  00339A  C018  FFF7         	movff	LCD_String@str+1,tblptrh
  9370  00339E  6AF8               	clrf	tblptru,c
  9371  0033A0  0E07               	movlw	(high __ramtop+-1)
  9372  0033A2  64F7               	cpfsgt	tblptrh,c
  9373  0033A4  D003               	bra	u4077
  9374  0033A6  0008               	tblrd		*
  9375  0033A8  50F5               	movf	tablat,w,c
  9376  0033AA  D005               	bra	u4070
  9377  0033AC                     u4077:
  9378  0033AC  CFF6 FFE1          	movff	tblptrl,fsr1l
  9379  0033B0  CFF7 FFE2          	movff	tblptrh,fsr1h
  9380  0033B4  50E7               	movf	indf1,w,c
  9381  0033B6                     u4070:
  9382  0033B6  EC20  F01B         	call	_LCD_Char
  9383                           
  9384                           ;LCD_20x4_C_file.c: 53: str++;
  9385  0033BA  4A17               	infsnz	LCD_String@str,f,c
  9386  0033BC  2A18               	incf	LCD_String@str+1,f,c
  9387  0033BE                     l3732:
  9388  0033BE  C017  FFF6         	movff	LCD_String@str,tblptrl
  9389  0033C2  C018  FFF7         	movff	LCD_String@str+1,tblptrh
  9390  0033C6  6AF8               	clrf	tblptru,c
  9391  0033C8  0E07               	movlw	(high __ramtop+-1)
  9392  0033CA  64F7               	cpfsgt	tblptrh,c
  9393  0033CC  D003               	bra	u4087
  9394  0033CE  0008               	tblrd		*
  9395  0033D0  50F5               	movf	tablat,w,c
  9396  0033D2  D005               	bra	u4080
  9397  0033D4                     u4087:
  9398  0033D4  CFF6 FFE1          	movff	tblptrl,fsr1l
  9399  0033D8  CFF7 FFE2          	movff	tblptrh,fsr1h
  9400  0033DC  50E7               	movf	indf1,w,c
  9401  0033DE                     u4080:
  9402  0033DE  0900               	iorlw	0
  9403  0033E0  B4D8               	btfsc	status,2,c
  9404  0033E2  0012               	return	
  9405  0033E4  D7D8               	goto	l3728
  9406  0033E6                     __end_of_LCD_String:
  9407                           	opt stack 0
  9408                           tblptru	equ	0xFF8
  9409                           tblptrh	equ	0xFF7
  9410                           tblptrl	equ	0xFF6
  9411                           tablat	equ	0xFF5
  9412                           prodh	equ	0xFF4
  9413                           prodl	equ	0xFF3
  9414                           intcon	equ	0xFF2
  9415                           postinc0	equ	0xFEE
  9416                           wreg	equ	0xFE8
  9417                           indf1	equ	0xFE7
  9418                           fsr1h	equ	0xFE2
  9419                           fsr1l	equ	0xFE1
  9420                           indf2	equ	0xFDF
  9421                           postinc2	equ	0xFDE
  9422                           postdec2	equ	0xFDD
  9423                           fsr2h	equ	0xFDA
  9424                           fsr2l	equ	0xFD9
  9425                           status	equ	0xFD8
  9426                           
  9427 ;; *************** function _LCD_Char *****************
  9428 ;; Defined at:
  9429 ;;		line 22 in file "LCD_20x4_C_file.c"
  9430 ;; Parameters:    Size  Location     Type
  9431 ;;  char_data       1    wreg     unsigned char 
  9432 ;; Auto vars:     Size  Location     Type
  9433 ;;  char_data       1   21[COMRAM] unsigned char 
  9434 ;; Return value:  Size  Location     Type
  9435 ;;                  1    wreg      void 
  9436 ;; Registers used:
  9437 ;;		wreg, status,2, status,0, cstack
  9438 ;; Tracked objects:
  9439 ;;		On entry : 0/0
  9440 ;;		On exit  : 0/0
  9441 ;;		Unchanged: 0/0
  9442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9443 ;;      Params:         0       0       0       0       0       0       0       0       0
  9444 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9445 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9446 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9447 ;;Total ram usage:        1 bytes
  9448 ;; Hardware stack levels used:    1
  9449 ;; Hardware stack levels required when called:    2
  9450 ;; This function calls:
  9451 ;;		_MSdelay
  9452 ;; This function is called by:
  9453 ;;		_LCD_String
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457                           	psect	text42
  9458  003640                     __ptext42:
  9459                           	opt stack 0
  9460  003640                     _LCD_Char:
  9461                           	opt stack 26
  9462                           
  9463                           ;incstack = 0
  9464                           ;LCD_Char@char_data stored from wreg
  9465  003640  6E16               	movwf	LCD_Char@char_data,c
  9466                           
  9467                           ;LCD_20x4_C_file.c: 24: LATB = char_data;
  9468  003642  C016  FF8A         	movff	LCD_Char@char_data,3978	;volatile
  9469                           
  9470                           ;LCD_20x4_C_file.c: 25: LATD0 = 1;
  9471  003646  808C               	bsf	3980,0,c	;volatile
  9472                           
  9473                           ;LCD_20x4_C_file.c: 26: LATD1 = 0;
  9474  003648  928C               	bcf	3980,1,c	;volatile
  9475                           
  9476                           ;LCD_20x4_C_file.c: 27: LATD2 = 1;
  9477  00364A  848C               	bsf	3980,2,c	;volatile
  9478                           
  9479                           ;LCD_20x4_C_file.c: 28: __nop();
  9480  00364C  F000               	nop	
  9481                           
  9482                           ;LCD_20x4_C_file.c: 29: LATD2 = 0;
  9483  00364E  948C               	bcf	3980,2,c	;volatile
  9484                           
  9485                           ;LCD_20x4_C_file.c: 30: MSdelay(3);
  9486  003650  0E00               	movlw	0
  9487  003652  6E11               	movwf	MSdelay@val+1,c
  9488  003654  0E03               	movlw	3
  9489  003656  6E10               	movwf	MSdelay@val,c
  9490  003658  EC55  F01A         	call	_MSdelay	;wreg free
  9491  00365C  0012               	return		;funcret
  9492  00365E                     __end_of_LCD_Char:
  9493                           	opt stack 0
  9494                           tblptru	equ	0xFF8
  9495                           tblptrh	equ	0xFF7
  9496                           tblptrl	equ	0xFF6
  9497                           tablat	equ	0xFF5
  9498                           prodh	equ	0xFF4
  9499                           prodl	equ	0xFF3
  9500                           intcon	equ	0xFF2
  9501                           postinc0	equ	0xFEE
  9502                           wreg	equ	0xFE8
  9503                           indf1	equ	0xFE7
  9504                           fsr1h	equ	0xFE2
  9505                           fsr1l	equ	0xFE1
  9506                           indf2	equ	0xFDF
  9507                           postinc2	equ	0xFDE
  9508                           postdec2	equ	0xFDD
  9509                           fsr2h	equ	0xFDA
  9510                           fsr2l	equ	0xFD9
  9511                           status	equ	0xFD8
  9512                           
  9513 ;; *************** function _LCD_Init *****************
  9514 ;; Defined at:
  9515 ;;		line 33 in file "LCD_20x4_C_file.c"
  9516 ;; Parameters:    Size  Location     Type
  9517 ;;		None
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;		None
  9520 ;; Return value:  Size  Location     Type
  9521 ;;                  1    wreg      void 
  9522 ;; Registers used:
  9523 ;;		wreg, status,2, status,0, cstack
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9529 ;;      Params:         0       0       0       0       0       0       0       0       0
  9530 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9531 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9532 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9533 ;;Total ram usage:        0 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:    3
  9536 ;; This function calls:
  9537 ;;		_LCD_Command
  9538 ;;		_MSdelay
  9539 ;; This function is called by:
  9540 ;;		_main
  9541 ;; This function uses a non-reentrant model
  9542 ;;
  9543                           
  9544                           	psect	text43
  9545  003432                     __ptext43:
  9546                           	opt stack 0
  9547  003432                     _LCD_Init:
  9548                           	opt stack 27
  9549                           
  9550                           ;LCD_20x4_C_file.c: 35: TRISD = 0;
  9551                           
  9552                           ;incstack = 0
  9553  003432  0E00               	movlw	0
  9554  003434  6E95               	movwf	3989,c	;volatile
  9555                           
  9556                           ;LCD_20x4_C_file.c: 36: TRISB = 0;
  9557  003436  0E00               	movlw	0
  9558  003438  6E93               	movwf	3987,c	;volatile
  9559                           
  9560                           ;LCD_20x4_C_file.c: 38: MSdelay(20);
  9561  00343A  0E00               	movlw	0
  9562  00343C  6E11               	movwf	MSdelay@val+1,c
  9563  00343E  0E14               	movlw	20
  9564  003440  6E10               	movwf	MSdelay@val,c
  9565  003442  EC55  F01A         	call	_MSdelay	;wreg free
  9566                           
  9567                           ;LCD_20x4_C_file.c: 39: LCD_Command (0x38);
  9568  003446  0E38               	movlw	56
  9569  003448  EC2F  F01B         	call	_LCD_Command
  9570                           
  9571                           ;LCD_20x4_C_file.c: 40: LCD_Command (0x0C);
  9572  00344C  0E0C               	movlw	12
  9573  00344E  EC2F  F01B         	call	_LCD_Command
  9574                           
  9575                           ;LCD_20x4_C_file.c: 41: LCD_Command (0x06);
  9576  003452  0E06               	movlw	6
  9577  003454  EC2F  F01B         	call	_LCD_Command
  9578                           
  9579                           ;LCD_20x4_C_file.c: 42: LCD_Command (0x01);
  9580  003458  0E01               	movlw	1
  9581  00345A  EC2F  F01B         	call	_LCD_Command
  9582                           
  9583                           ;LCD_20x4_C_file.c: 43: MSdelay(3);
  9584  00345E  0E00               	movlw	0
  9585  003460  6E11               	movwf	MSdelay@val+1,c
  9586  003462  0E03               	movlw	3
  9587  003464  6E10               	movwf	MSdelay@val,c
  9588  003466  EC55  F01A         	call	_MSdelay	;wreg free
  9589                           
  9590                           ;LCD_20x4_C_file.c: 44: LCD_Command (0x80);
  9591  00346A  0E80               	movlw	128
  9592  00346C  EC2F  F01B         	call	_LCD_Command
  9593  003470  0012               	return		;funcret
  9594  003472                     __end_of_LCD_Init:
  9595                           	opt stack 0
  9596                           tblptru	equ	0xFF8
  9597                           tblptrh	equ	0xFF7
  9598                           tblptrl	equ	0xFF6
  9599                           tablat	equ	0xFF5
  9600                           prodh	equ	0xFF4
  9601                           prodl	equ	0xFF3
  9602                           intcon	equ	0xFF2
  9603                           postinc0	equ	0xFEE
  9604                           wreg	equ	0xFE8
  9605                           indf1	equ	0xFE7
  9606                           fsr1h	equ	0xFE2
  9607                           fsr1l	equ	0xFE1
  9608                           indf2	equ	0xFDF
  9609                           postinc2	equ	0xFDE
  9610                           postdec2	equ	0xFDD
  9611                           fsr2h	equ	0xFDA
  9612                           fsr2l	equ	0xFD9
  9613                           status	equ	0xFD8
  9614                           
  9615 ;; *************** function _LCD_Command *****************
  9616 ;; Defined at:
  9617 ;;		line 11 in file "LCD_20x4_C_file.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;  cmd             1    wreg     unsigned char 
  9620 ;; Auto vars:     Size  Location     Type
  9621 ;;  cmd             1   21[COMRAM] unsigned char 
  9622 ;; Return value:  Size  Location     Type
  9623 ;;                  1    wreg      void 
  9624 ;; Registers used:
  9625 ;;		wreg, status,2, status,0, cstack
  9626 ;; Tracked objects:
  9627 ;;		On entry : 0/0
  9628 ;;		On exit  : 0/0
  9629 ;;		Unchanged: 0/0
  9630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9631 ;;      Params:         0       0       0       0       0       0       0       0       0
  9632 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9633 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9634 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9635 ;;Total ram usage:        1 bytes
  9636 ;; Hardware stack levels used:    1
  9637 ;; Hardware stack levels required when called:    2
  9638 ;; This function calls:
  9639 ;;		_MSdelay
  9640 ;; This function is called by:
  9641 ;;		_LCD_Init
  9642 ;;		_LCD_String_xy
  9643 ;;		_LCD_Clear
  9644 ;; This function uses a non-reentrant model
  9645 ;;
  9646                           
  9647                           	psect	text44
  9648  00365E                     __ptext44:
  9649                           	opt stack 0
  9650  00365E                     _LCD_Command:
  9651                           	opt stack 27
  9652                           
  9653                           ;incstack = 0
  9654                           ;LCD_Command@cmd stored from wreg
  9655  00365E  6E16               	movwf	LCD_Command@cmd,c
  9656                           
  9657                           ;LCD_20x4_C_file.c: 13: LATB = cmd;
  9658  003660  C016  FF8A         	movff	LCD_Command@cmd,3978	;volatile
  9659                           
  9660                           ;LCD_20x4_C_file.c: 14: LATD0 = 0;
  9661  003664  908C               	bcf	3980,0,c	;volatile
  9662                           
  9663                           ;LCD_20x4_C_file.c: 15: LATD1 = 0;
  9664  003666  928C               	bcf	3980,1,c	;volatile
  9665                           
  9666                           ;LCD_20x4_C_file.c: 16: LATD2 = 1;
  9667  003668  848C               	bsf	3980,2,c	;volatile
  9668                           
  9669                           ;LCD_20x4_C_file.c: 17: __nop();
  9670  00366A  F000               	nop	
  9671                           
  9672                           ;LCD_20x4_C_file.c: 18: LATD2 = 0;
  9673  00366C  948C               	bcf	3980,2,c	;volatile
  9674                           
  9675                           ;LCD_20x4_C_file.c: 19: MSdelay(3);
  9676  00366E  0E00               	movlw	0
  9677  003670  6E11               	movwf	MSdelay@val+1,c
  9678  003672  0E03               	movlw	3
  9679  003674  6E10               	movwf	MSdelay@val,c
  9680  003676  EC55  F01A         	call	_MSdelay	;wreg free
  9681  00367A  0012               	return		;funcret
  9682  00367C                     __end_of_LCD_Command:
  9683                           	opt stack 0
  9684                           tblptru	equ	0xFF8
  9685                           tblptrh	equ	0xFF7
  9686                           tblptrl	equ	0xFF6
  9687                           tablat	equ	0xFF5
  9688                           prodh	equ	0xFF4
  9689                           prodl	equ	0xFF3
  9690                           intcon	equ	0xFF2
  9691                           postinc0	equ	0xFEE
  9692                           wreg	equ	0xFE8
  9693                           indf1	equ	0xFE7
  9694                           fsr1h	equ	0xFE2
  9695                           fsr1l	equ	0xFE1
  9696                           indf2	equ	0xFDF
  9697                           postinc2	equ	0xFDE
  9698                           postdec2	equ	0xFDD
  9699                           fsr2h	equ	0xFDA
  9700                           fsr2l	equ	0xFD9
  9701                           status	equ	0xFD8
  9702                           
  9703 ;; *************** function _MSdelay *****************
  9704 ;; Defined at:
  9705 ;;		line 78 in file "LCD_20x4_C_file.c"
  9706 ;; Parameters:    Size  Location     Type
  9707 ;;  val             2   15[COMRAM] unsigned int 
  9708 ;; Auto vars:     Size  Location     Type
  9709 ;;  j               2   19[COMRAM] unsigned int 
  9710 ;;  i               2   17[COMRAM] unsigned int 
  9711 ;; Return value:  Size  Location     Type
  9712 ;;                  1    wreg      void 
  9713 ;; Registers used:
  9714 ;;		wreg, status,2, status,0
  9715 ;; Tracked objects:
  9716 ;;		On entry : 0/0
  9717 ;;		On exit  : 0/0
  9718 ;;		Unchanged: 0/0
  9719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9720 ;;      Params:         2       0       0       0       0       0       0       0       0
  9721 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9722 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9723 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9724 ;;Total ram usage:        6 bytes
  9725 ;; Hardware stack levels used:    1
  9726 ;; Hardware stack levels required when called:    1
  9727 ;; This function calls:
  9728 ;;		Nothing
  9729 ;; This function is called by:
  9730 ;;		_LCD_Command
  9731 ;;		_LCD_Char
  9732 ;;		_LCD_Init
  9733 ;;		_LCD_Clear
  9734 ;; This function uses a non-reentrant model
  9735 ;;
  9736                           
  9737                           	psect	text45
  9738  0034AA                     __ptext45:
  9739                           	opt stack 0
  9740  0034AA                     _MSdelay:
  9741                           	opt stack 26
  9742                           
  9743                           ;LCD_20x4_C_file.c: 80: unsigned int i,j;
  9744                           ;LCD_20x4_C_file.c: 81: for(i=0;i<val;i++)
  9745                           
  9746                           ;incstack = 0
  9747  0034AA  0E00               	movlw	0
  9748  0034AC  6E13               	movwf	MSdelay@i+1,c
  9749  0034AE  0E00               	movlw	0
  9750  0034B0  6E12               	movwf	MSdelay@i,c
  9751  0034B2  D00F               	goto	l2682
  9752  0034B4                     l2670:
  9753                           
  9754                           ;LCD_20x4_C_file.c: 82: for(j=0;j<165;j++);
  9755  0034B4  0E00               	movlw	0
  9756  0034B6  6E15               	movwf	MSdelay@j+1,c
  9757  0034B8  0E00               	movlw	0
  9758  0034BA  6E14               	movwf	MSdelay@j,c
  9759  0034BC                     l2672:
  9760  0034BC  5015               	movf	MSdelay@j+1,w,c
  9761  0034BE  E107               	bnz	l2680
  9762  0034C0  0EA5               	movlw	165
  9763  0034C2  5C14               	subwf	MSdelay@j,w,c
  9764  0034C4  B0D8               	btfsc	status,0,c
  9765  0034C6  D003               	goto	l2680
  9766  0034C8  4A14               	infsnz	MSdelay@j,f,c
  9767  0034CA  2A15               	incf	MSdelay@j+1,f,c
  9768  0034CC  D7F7               	goto	l2672
  9769  0034CE                     l2680:
  9770  0034CE  4A12               	infsnz	MSdelay@i,f,c
  9771  0034D0  2A13               	incf	MSdelay@i+1,f,c
  9772  0034D2                     l2682:
  9773  0034D2  5010               	movf	MSdelay@val,w,c
  9774  0034D4  5C12               	subwf	MSdelay@i,w,c
  9775  0034D6  5011               	movf	MSdelay@val+1,w,c
  9776  0034D8  5813               	subwfb	MSdelay@i+1,w,c
  9777  0034DA  B0D8               	btfsc	status,0,c
  9778  0034DC  0012               	return	
  9779  0034DE  D7EA               	goto	l2670
  9780  0034E0                     __end_of_MSdelay:
  9781                           	opt stack 0
  9782                           tblptru	equ	0xFF8
  9783                           tblptrh	equ	0xFF7
  9784                           tblptrl	equ	0xFF6
  9785                           tablat	equ	0xFF5
  9786                           prodh	equ	0xFF4
  9787                           prodl	equ	0xFF3
  9788                           intcon	equ	0xFF2
  9789                           postinc0	equ	0xFEE
  9790                           wreg	equ	0xFE8
  9791                           indf1	equ	0xFE7
  9792                           fsr1h	equ	0xFE2
  9793                           fsr1l	equ	0xFE1
  9794                           indf2	equ	0xFDF
  9795                           postinc2	equ	0xFDE
  9796                           postdec2	equ	0xFDD
  9797                           fsr2h	equ	0xFDA
  9798                           fsr2l	equ	0xFD9
  9799                           status	equ	0xFD8
  9800                           
  9801 ;; *************** function _ADC_Read *****************
  9802 ;; Defined at:
  9803 ;;		line 147 in file "GPS.c"
  9804 ;; Parameters:    Size  Location     Type
  9805 ;;  channel         2   15[COMRAM] int 
  9806 ;; Auto vars:     Size  Location     Type
  9807 ;;  digital         2   21[COMRAM] int 
  9808 ;; Return value:  Size  Location     Type
  9809 ;;                  2   15[COMRAM] int 
  9810 ;; Registers used:
  9811 ;;		wreg, status,2, status,0
  9812 ;; Tracked objects:
  9813 ;;		On entry : 0/0
  9814 ;;		On exit  : 0/0
  9815 ;;		Unchanged: 0/0
  9816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9817 ;;      Params:         2       0       0       0       0       0       0       0       0
  9818 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9819 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9820 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9821 ;;Total ram usage:        8 bytes
  9822 ;; Hardware stack levels used:    1
  9823 ;; Hardware stack levels required when called:    1
  9824 ;; This function calls:
  9825 ;;		Nothing
  9826 ;; This function is called by:
  9827 ;;		_main
  9828 ;; This function uses a non-reentrant model
  9829 ;;
  9830                           
  9831                           	psect	text46
  9832  002FF4                     __ptext46:
  9833                           	opt stack 0
  9834  002FF4                     _ADC_Read:
  9835                           	opt stack 29
  9836                           
  9837                           ;GPS.c: 149: int digital;
  9838                           ;GPS.c: 152: ADCON0 =(ADCON0 & 0b11000011)|((channel<<2) & 0b00111100);
  9839                           
  9840                           ;incstack = 0
  9841  002FF4  C010  F012         	movff	ADC_Read@channel,??_ADC_Read
  9842  002FF8  90D8               	bcf	status,0,c
  9843  002FFA  3612               	rlcf	??_ADC_Read,f,c
  9844  002FFC  90D8               	bcf	status,0,c
  9845  002FFE  3612               	rlcf	??_ADC_Read,f,c
  9846  003000  0E3C               	movlw	60
  9847  003002  1612               	andwf	??_ADC_Read,f,c
  9848  003004  50C2               	movf	4034,w,c	;volatile
  9849  003006  0BC3               	andlw	195
  9850  003008  1012               	iorwf	??_ADC_Read,w,c
  9851  00300A  6EC2               	movwf	4034,c	;volatile
  9852                           
  9853                           ;GPS.c: 154: ADCON0 |= ((1<<ADON)|(1<<GO));
  9854  00300C  A2C2               	btfss	4034,1,c	;volatile
  9855  00300E  D003               	goto	u4180
  9856  003010  6A12               	clrf	??_ADC_Read& (0+255),c
  9857  003012  2A12               	incf	??_ADC_Read& (0+255),f,c
  9858  003014  D001               	goto	u4198
  9859  003016                     u4180:
  9860  003016  6A12               	clrf	??_ADC_Read& (0+255),c
  9861  003018                     u4198:
  9862  003018  0E01               	movlw	1
  9863  00301A  6E13               	movwf	(??_ADC_Read+1)& (0+255),c
  9864  00301C  2A12               	incf	??_ADC_Read,f,c
  9865  00301E  D002               	goto	u4204
  9866  003020                     u4205:
  9867  003020  90D8               	bcf	status,0,c
  9868  003022  3613               	rlcf	??_ADC_Read+1,f,c
  9869  003024                     u4204:
  9870  003024  2E12               	decfsz	??_ADC_Read,f,c
  9871  003026  D7FC               	goto	u4205
  9872  003028  A0C2               	btfss	4034,0,c	;volatile
  9873  00302A  D003               	goto	u4210
  9874  00302C  6A14               	clrf	(??_ADC_Read+2)& (0+255),c
  9875  00302E  2A14               	incf	(??_ADC_Read+2)& (0+255),f,c
  9876  003030  D001               	goto	u4228
  9877  003032                     u4210:
  9878  003032  6A14               	clrf	(??_ADC_Read+2)& (0+255),c
  9879  003034                     u4228:
  9880  003034  0E01               	movlw	1
  9881  003036  6E15               	movwf	(??_ADC_Read+3)& (0+255),c
  9882  003038  2A14               	incf	??_ADC_Read+2,f,c
  9883  00303A  D002               	goto	u4234
  9884  00303C                     u4235:
  9885  00303C  90D8               	bcf	status,0,c
  9886  00303E  3615               	rlcf	??_ADC_Read+3,f,c
  9887  003040                     u4234:
  9888  003040  2E14               	decfsz	??_ADC_Read+2,f,c
  9889  003042  D7FC               	goto	u4235
  9890  003044  5015               	movf	??_ADC_Read+3,w,c
  9891  003046  1013               	iorwf	??_ADC_Read+1,w,c
  9892  003048  12C2               	iorwf	4034,f,c	;volatile
  9893  00304A                     l110:
  9894  00304A  B2C2               	btfsc	4034,1,c	;volatile
  9895  00304C  D7FE               	goto	l110
  9896                           
  9897                           ;GPS.c: 159: digital = (ADRESH*256) | (ADRESL);
  9898  00304E  50C3               	movf	4035,w,c	;volatile
  9899  003050  CFC4 F012          	movff	4036,??_ADC_Read	;volatile
  9900  003054  6A13               	clrf	(??_ADC_Read+1)& (0+255),c
  9901  003056  C012  F013         	movff	??_ADC_Read,??_ADC_Read+1
  9902  00305A  6A12               	clrf	??_ADC_Read,c
  9903  00305C  1012               	iorwf	??_ADC_Read,w,c
  9904  00305E  6E16               	movwf	ADC_Read@digital,c
  9905  003060  5013               	movf	??_ADC_Read+1,w,c
  9906  003062  6E17               	movwf	ADC_Read@digital+1,c
  9907                           
  9908                           ;GPS.c: 160: return(digital);
  9909  003064  C016  F010         	movff	ADC_Read@digital,?_ADC_Read
  9910  003068  C017  F011         	movff	ADC_Read@digital+1,?_ADC_Read+1
  9911  00306C  0012               	return	
  9912  00306E                     __end_of_ADC_Read:
  9913                           	opt stack 0
  9914                           tblptru	equ	0xFF8
  9915                           tblptrh	equ	0xFF7
  9916                           tblptrl	equ	0xFF6
  9917                           tablat	equ	0xFF5
  9918                           prodh	equ	0xFF4
  9919                           prodl	equ	0xFF3
  9920                           intcon	equ	0xFF2
  9921                           postinc0	equ	0xFEE
  9922                           wreg	equ	0xFE8
  9923                           indf1	equ	0xFE7
  9924                           fsr1h	equ	0xFE2
  9925                           fsr1l	equ	0xFE1
  9926                           indf2	equ	0xFDF
  9927                           postinc2	equ	0xFDE
  9928                           postdec2	equ	0xFDD
  9929                           fsr2h	equ	0xFDA
  9930                           fsr2l	equ	0xFD9
  9931                           status	equ	0xFD8
  9932                           
  9933 ;; *************** function _ADC_Init *****************
  9934 ;; Defined at:
  9935 ;;		line 138 in file "GPS.c"
  9936 ;; Parameters:    Size  Location     Type
  9937 ;;		None
  9938 ;; Auto vars:     Size  Location     Type
  9939 ;;		None
  9940 ;; Return value:  Size  Location     Type
  9941 ;;                  1    wreg      void 
  9942 ;; Registers used:
  9943 ;;		wreg, status,2
  9944 ;; Tracked objects:
  9945 ;;		On entry : 0/0
  9946 ;;		On exit  : 0/0
  9947 ;;		Unchanged: 0/0
  9948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9949 ;;      Params:         0       0       0       0       0       0       0       0       0
  9950 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9951 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9952 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9953 ;;Total ram usage:        0 bytes
  9954 ;; Hardware stack levels used:    1
  9955 ;; Hardware stack levels required when called:    1
  9956 ;; This function calls:
  9957 ;;		Nothing
  9958 ;; This function is called by:
  9959 ;;		_main
  9960 ;; This function uses a non-reentrant model
  9961 ;;
  9962                           
  9963                           	psect	text47
  9964  00367C                     __ptext47:
  9965                           	opt stack 0
  9966  00367C                     _ADC_Init:
  9967                           	opt stack 29
  9968                           
  9969                           ;GPS.c: 140: TRISA = 0xFF;
  9970                           
  9971                           ;incstack = 0
  9972  00367C  6892               	setf	3986,c	;volatile
  9973                           
  9974                           ;GPS.c: 141: ADCON1 = 0x0E;
  9975  00367E  0E0E               	movlw	14
  9976  003680  6EC1               	movwf	4033,c	;volatile
  9977                           
  9978                           ;GPS.c: 142: ADCON2 = 0x92;
  9979  003682  0E92               	movlw	146
  9980  003684  6EC0               	movwf	4032,c	;volatile
  9981                           
  9982                           ;GPS.c: 143: ADRESH=0;
  9983  003686  0E00               	movlw	0
  9984  003688  6EC4               	movwf	4036,c	;volatile
  9985                           
  9986                           ;GPS.c: 144: ADRESL=0;
  9987  00368A  0E00               	movlw	0
  9988  00368C  6EC3               	movwf	4035,c	;volatile
  9989  00368E  0012               	return		;funcret
  9990  003690                     __end_of_ADC_Init:
  9991                           	opt stack 0
  9992                           tblptru	equ	0xFF8
  9993                           tblptrh	equ	0xFF7
  9994                           tblptrl	equ	0xFF6
  9995                           tablat	equ	0xFF5
  9996                           prodh	equ	0xFF4
  9997                           prodl	equ	0xFF3
  9998                           intcon	equ	0xFF2
  9999                           postinc0	equ	0xFEE
 10000                           wreg	equ	0xFE8
 10001                           indf1	equ	0xFE7
 10002                           fsr1h	equ	0xFE2
 10003                           fsr1l	equ	0xFE1
 10004                           indf2	equ	0xFDF
 10005                           postinc2	equ	0xFDE
 10006                           postdec2	equ	0xFDD
 10007                           fsr2h	equ	0xFDA
 10008                           fsr2l	equ	0xFD9
 10009                           status	equ	0xFD8
 10010                           
 10011 ;; *************** function _Serial_ISR *****************
 10012 ;; Defined at:
 10013 ;;		line 265 in file "GPS.c"
 10014 ;; Parameters:    Size  Location     Type
 10015 ;;		None
 10016 ;; Auto vars:     Size  Location     Type
 10017 ;;  received_cha    1   14[COMRAM] unsigned char 
 10018 ;; Return value:  Size  Location     Type
 10019 ;;                  1    wreg      void 
 10020 ;; Registers used:
 10021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10022 ;; Tracked objects:
 10023 ;;		On entry : 0/0
 10024 ;;		On exit  : 0/0
 10025 ;;		Unchanged: 0/0
 10026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10027 ;;      Params:         0       0       0       0       0       0       0       0       0
 10028 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10029 ;;      Temps:         14       0       0       0       0       0       0       0       0
 10030 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10031 ;;Total ram usage:       15 bytes
 10032 ;; Hardware stack levels used:    1
 10033 ;; This function calls:
 10034 ;;		Nothing
 10035 ;; This function is called by:
 10036 ;;		Interrupt level 2
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           	psect	intcode
 10041  000008                     __pintcode:
 10042                           	opt stack 0
 10043  000008                     _Serial_ISR:
 10044                           	opt stack 25
 10045                           
 10046                           ;incstack = 0
 10047  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10048  00000A  ED3F  F013         	call	int_func,f	;refresh shadow registers
 10049                           tblptru	equ	0xFF8
 10050                           tblptrh	equ	0xFF7
 10051                           tblptrl	equ	0xFF6
 10052                           tablat	equ	0xFF5
 10053                           prodh	equ	0xFF4
 10054                           prodl	equ	0xFF3
 10055                           intcon	equ	0xFF2
 10056                           postinc0	equ	0xFEE
 10057                           wreg	equ	0xFE8
 10058                           indf1	equ	0xFE7
 10059                           fsr1h	equ	0xFE2
 10060                           fsr1l	equ	0xFE1
 10061                           indf2	equ	0xFDF
 10062                           postinc2	equ	0xFDE
 10063                           postdec2	equ	0xFDD
 10064                           fsr2h	equ	0xFDA
 10065                           fsr2l	equ	0xFD9
 10066                           status	equ	0xFD8
 10067                           
 10068                           	psect	intcode_body
 10069  00267E                     __pintcode_body:
 10070                           	opt stack 25
 10071  00267E                     int_func:
 10072                           	opt stack 25
 10073  00267E  0006               	pop		; remove dummy address from shadow register refresh
 10074  002680  CFFA F001          	movff	pclath,??_Serial_ISR
 10075  002684  CFFB F002          	movff	pclatu,??_Serial_ISR+1
 10076  002688  CFE9 F003          	movff	fsr0l,??_Serial_ISR+2
 10077  00268C  CFEA F004          	movff	fsr0h,??_Serial_ISR+3
 10078  002690  CFE1 F005          	movff	fsr1l,??_Serial_ISR+4
 10079  002694  CFE2 F006          	movff	fsr1h,??_Serial_ISR+5
 10080  002698  CFD9 F007          	movff	fsr2l,??_Serial_ISR+6
 10081  00269C  CFDA F008          	movff	fsr2h,??_Serial_ISR+7
 10082  0026A0  CFF3 F009          	movff	prodl,??_Serial_ISR+8
 10083  0026A4  CFF4 F00A          	movff	prodh,??_Serial_ISR+9
 10084  0026A8  CFF6 F00B          	movff	tblptrl,??_Serial_ISR+10
 10085  0026AC  CFF7 F00C          	movff	tblptrh,??_Serial_ISR+11
 10086  0026B0  CFF8 F00D          	movff	tblptru,??_Serial_ISR+12
 10087  0026B4  CFF5 F00E          	movff	tablat,??_Serial_ISR+13
 10088                           
 10089                           ;GPS.c: 268: if(RCIF){
 10090  0026B8  AA9E               	btfss	3998,5,c	;volatile
 10091  0026BA  D04D               	goto	i2l158
 10092                           
 10093                           ;GPS.c: 269: GIE = 0;
 10094  0026BC  9EF2               	bcf	intcon,7,c	;volatile
 10095                           
 10096                           ;GPS.c: 270: unsigned char received_char = RCREG;
 10097  0026BE  CFAE F00F          	movff	4014,Serial_ISR@received_char	;volatile
 10098                           
 10099                           ;GPS.c: 271: if(RCSTAbits.OERR){
 10100  0026C2  A2AB               	btfss	4011,1,c	;volatile
 10101  0026C4  D003               	goto	i2l4072
 10102                           
 10103                           ;GPS.c: 272: CREN = 0;
 10104  0026C6  98AB               	bcf	4011,4,c	;volatile
 10105                           
 10106                           ;GPS.c: 273: __nop();
 10107  0026C8  F000               	nop	
 10108                           
 10109                           ;GPS.c: 274: CREN=1;
 10110  0026CA  88AB               	bsf	4011,4,c	;volatile
 10111  0026CC                     i2l4072:
 10112                           
 10113                           ;GPS.c: 275: }
 10114                           ;GPS.c: 277: if(received_char =='$'){
 10115  0026CC  0E24               	movlw	36
 10116  0026CE  180F               	xorwf	Serial_ISR@received_char,w,c
 10117  0026D0  A4D8               	btfss	status,2,c
 10118  0026D2  D009               	goto	i2l4076
 10119                           
 10120                           ;GPS.c: 278: GGA_Index = 0;
 10121  0026D4  0E00               	movlw	0
 10122  0026D6  6E4A               	movwf	_GGA_Index+1,c	;volatile
 10123  0026D8  0E00               	movlw	0
 10124  0026DA  6E49               	movwf	_GGA_Index,c	;volatile
 10125                           
 10126                           ;GPS.c: 279: IsItGGAString = 0;
 10127  0026DC  0E00               	movlw	0
 10128  0026DE  6E4B               	movwf	_IsItGGAString,c	;volatile
 10129                           
 10130                           ;GPS.c: 280: CommaCounter = 0;
 10131  0026E0  0E00               	movlw	0
 10132  0026E2  6E4C               	movwf	_CommaCounter,c
 10133                           
 10134                           ;GPS.c: 281: }
 10135  0026E4  D038               	goto	i2l158
 10136  0026E6                     i2l4076:
 10137                           
 10138                           ;GPS.c: 282: else if(IsItGGAString == 1){
 10139  0026E6  044B               	decf	_IsItGGAString,w,c	;volatile
 10140  0026E8  A4D8               	btfss	status,2,c
 10141  0026EA  D01A               	goto	i2l4088
 10142                           
 10143                           ;GPS.c: 283: if(received_char == ',' ) GGA_Pointers[CommaCounter++] = GGA_Index;
 10144  0026EC  0E2C               	movlw	44
 10145  0026EE  180F               	xorwf	Serial_ISR@received_char,w,c
 10146  0026F0  A4D8               	btfss	status,2,c
 10147  0026F2  D00B               	goto	i2l4084
 10148  0026F4  504C               	movf	_CommaCounter,w,c
 10149  0026F6  0D01               	mullw	1
 10150  0026F8  0EC0               	movlw	low _GGA_Pointers
 10151  0026FA  24F3               	addwf	prodl,w,c
 10152  0026FC  6ED9               	movwf	fsr2l,c
 10153  0026FE  0E00               	movlw	high _GGA_Pointers
 10154  002700  20F4               	addwfc	prodh,w,c
 10155  002702  6EDA               	movwf	fsr2h,c
 10156  002704  C049  FFDF         	movff	_GGA_Index,indf2	;volatile
 10157  002708  2A4C               	incf	_CommaCounter,f,c
 10158  00270A                     i2l4084:
 10159                           
 10160                           ;GPS.c: 284: GGA_Buffer[GGA_Index++] = received_char;
 10161  00270A  0E00               	movlw	low _GGA_Buffer
 10162  00270C  2449               	addwf	_GGA_Index,w,c	;volatile
 10163  00270E  6ED9               	movwf	fsr2l,c
 10164  002710  0E01               	movlw	high _GGA_Buffer
 10165  002712  204A               	addwfc	_GGA_Index+1,w,c	;volatile
 10166  002714  6EDA               	movwf	fsr2h,c
 10167  002716  C00F  FFDF         	movff	Serial_ISR@received_char,indf2
 10168  00271A  4A49               	infsnz	_GGA_Index,f,c	;volatile
 10169  00271C  2A4A               	incf	_GGA_Index+1,f,c	;volatile
 10170                           
 10171                           ;GPS.c: 285: }
 10172  00271E  D01B               	goto	i2l158
 10173  002720                     i2l4088:
 10174                           
 10175                           ;GPS.c: 286: else if(GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A'){
 10176  002720  0E47               	movlw	71
 10177  002722  1846               	xorwf	_GGA_CODE,w,c
 10178  002724  A4D8               	btfss	status,2,c
 10179  002726  D011               	goto	i2l156
 10180  002728  0E47               	movlw	71
 10181  00272A  1847               	xorwf	_GGA_CODE+1,w,c
 10182  00272C  A4D8               	btfss	status,2,c
 10183  00272E  D00D               	goto	i2l156
 10184  002730  0E41               	movlw	65
 10185  002732  1848               	xorwf	_GGA_CODE+2,w,c
 10186  002734  A4D8               	btfss	status,2,c
 10187  002736  D009               	goto	i2l156
 10188                           
 10189                           ;GPS.c: 287: IsItGGAString = 1;
 10190  002738  0E01               	movlw	1
 10191  00273A  6E4B               	movwf	_IsItGGAString,c	;volatile
 10192                           
 10193                           ;GPS.c: 288: GGA_CODE[0] = 0; GGA_CODE[1] = 0; GGA_CODE[2] = 0;
 10194  00273C  0E00               	movlw	0
 10195  00273E  6E46               	movwf	_GGA_CODE,c
 10196  002740  0E00               	movlw	0
 10197  002742  6E47               	movwf	_GGA_CODE+1,c
 10198  002744  0E00               	movlw	0
 10199  002746  6E48               	movwf	_GGA_CODE+2,c
 10200                           
 10201                           ;GPS.c: 289: }
 10202  002748  D006               	goto	i2l158
 10203  00274A                     i2l156:
 10204                           
 10205                           ;GPS.c: 290: else{
 10206                           ;GPS.c: 291: GGA_CODE[0] = GGA_CODE[1]; GGA_CODE[1] = GGA_CODE[2]; GGA_CODE[2] = receive
      +                          d_char;
 10207  00274A  C047  F046         	movff	_GGA_CODE+1,_GGA_CODE
 10208  00274E  C048  F047         	movff	_GGA_CODE+2,_GGA_CODE+1
 10209  002752  C00F  F048         	movff	Serial_ISR@received_char,_GGA_CODE+2
 10210  002756                     i2l158:
 10211  002756  C00E  FFF5         	movff	??_Serial_ISR+13,tablat
 10212  00275A  C00D  FFF8         	movff	??_Serial_ISR+12,tblptru
 10213  00275E  C00C  FFF7         	movff	??_Serial_ISR+11,tblptrh
 10214  002762  C00B  FFF6         	movff	??_Serial_ISR+10,tblptrl
 10215  002766  C00A  FFF4         	movff	??_Serial_ISR+9,prodh
 10216  00276A  C009  FFF3         	movff	??_Serial_ISR+8,prodl
 10217  00276E  C008  FFDA         	movff	??_Serial_ISR+7,fsr2h
 10218  002772  C007  FFD9         	movff	??_Serial_ISR+6,fsr2l
 10219  002776  C006  FFE2         	movff	??_Serial_ISR+5,fsr1h
 10220  00277A  C005  FFE1         	movff	??_Serial_ISR+4,fsr1l
 10221  00277E  C004  FFEA         	movff	??_Serial_ISR+3,fsr0h
 10222  002782  C003  FFE9         	movff	??_Serial_ISR+2,fsr0l
 10223  002786  C002  FFFB         	movff	??_Serial_ISR+1,pclatu
 10224  00278A  C001  FFFA         	movff	??_Serial_ISR,pclath
 10225  00278E  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10226  002790  0011               	retfie		f
 10227  002792                     __end_of_Serial_ISR:
 10228                           	opt stack 0
 10229                           pclatu	equ	0xFFB
 10230                           pclath	equ	0xFFA
 10231                           tblptru	equ	0xFF8
 10232                           tblptrh	equ	0xFF7
 10233                           tblptrl	equ	0xFF6
 10234                           tablat	equ	0xFF5
 10235                           prodh	equ	0xFF4
 10236                           prodl	equ	0xFF3
 10237                           intcon	equ	0xFF2
 10238                           postinc0	equ	0xFEE
 10239                           fsr0h	equ	0xFEA
 10240                           fsr0l	equ	0xFE9
 10241                           wreg	equ	0xFE8
 10242                           indf1	equ	0xFE7
 10243                           fsr1h	equ	0xFE2
 10244                           fsr1l	equ	0xFE1
 10245                           indf2	equ	0xFDF
 10246                           postinc2	equ	0xFDE
 10247                           postdec2	equ	0xFDD
 10248                           fsr2h	equ	0xFDA
 10249                           fsr2l	equ	0xFD9
 10250                           status	equ	0xFD8
 10251                           pclatu	equ	0xFFB
 10252                           pclath	equ	0xFFA
 10253                           tblptru	equ	0xFF8
 10254                           tblptrh	equ	0xFF7
 10255                           tblptrl	equ	0xFF6
 10256                           tablat	equ	0xFF5
 10257                           prodh	equ	0xFF4
 10258                           prodl	equ	0xFF3
 10259                           intcon	equ	0xFF2
 10260                           postinc0	equ	0xFEE
 10261                           fsr0h	equ	0xFEA
 10262                           fsr0l	equ	0xFE9
 10263                           wreg	equ	0xFE8
 10264                           indf1	equ	0xFE7
 10265                           fsr1h	equ	0xFE2
 10266                           fsr1l	equ	0xFE1
 10267                           indf2	equ	0xFDF
 10268                           postinc2	equ	0xFDE
 10269                           postdec2	equ	0xFDD
 10270                           fsr2h	equ	0xFDA
 10271                           fsr2l	equ	0xFD9
 10272                           status	equ	0xFD8
 10273                           
 10274                           	psect	rparam
 10275  0000                     pclatu	equ	0xFFB
 10276                           pclath	equ	0xFFA
 10277                           tblptru	equ	0xFF8
 10278                           tblptrh	equ	0xFF7
 10279                           tblptrl	equ	0xFF6
 10280                           tablat	equ	0xFF5
 10281                           prodh	equ	0xFF4
 10282                           prodl	equ	0xFF3
 10283                           intcon	equ	0xFF2
 10284                           postinc0	equ	0xFEE
 10285                           fsr0h	equ	0xFEA
 10286                           fsr0l	equ	0xFE9
 10287                           wreg	equ	0xFE8
 10288                           indf1	equ	0xFE7
 10289                           fsr1h	equ	0xFE2
 10290                           fsr1l	equ	0xFE1
 10291                           indf2	equ	0xFDF
 10292                           postinc2	equ	0xFDE
 10293                           postdec2	equ	0xFDD
 10294                           fsr2h	equ	0xFDA
 10295                           fsr2l	equ	0xFD9
 10296                           status	equ	0xFD8
 10297                           
 10298                           	psect	temp
 10299  00004F                     btemp:
 10300                           	opt stack 0
 10301  00004F                     	ds	1
 10302  0000                     int$flags	set	btemp
 10303                           pclatu	equ	0xFFB
 10304                           pclath	equ	0xFFA
 10305                           tblptru	equ	0xFF8
 10306                           tblptrh	equ	0xFF7
 10307                           tblptrl	equ	0xFF6
 10308                           tablat	equ	0xFF5
 10309                           prodh	equ	0xFF4
 10310                           prodl	equ	0xFF3
 10311                           intcon	equ	0xFF2
 10312                           postinc0	equ	0xFEE
 10313                           fsr0h	equ	0xFEA
 10314                           fsr0l	equ	0xFE9
 10315                           wreg	equ	0xFE8
 10316                           indf1	equ	0xFE7
 10317                           fsr1h	equ	0xFE2
 10318                           fsr1l	equ	0xFE1
 10319                           indf2	equ	0xFDF
 10320                           postinc2	equ	0xFDE
 10321                           postdec2	equ	0xFDD
 10322                           fsr2h	equ	0xFDA
 10323                           fsr2l	equ	0xFD9
 10324                           status	equ	0xFD8


Data Sizes:
    Strings     60
    Constant    118
    Data        0
    BSS         187
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      78
    BANK0           160     96     144
    BANK1           256      0     130
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 15
		 -> Data_Buffer(BANK0[15]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 50
		 -> stringBT(BANK1[50]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 50
		 -> stringBT(BANK1[50]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_10(CODE[2]), STR_7(CODE[2]), STR_4(CODE[2]), main@GPS_Buffer(BANK0[15]), 
		 -> Temperature(BANK0[10]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 50
		 -> stringBT(BANK1[50]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 50
		 -> stringBT(BANK1[50]), 

    memset@p1	PTR void  size(2) Largest target is 15
		 -> main@GPS_Buffer(BANK0[15]), 

    memset@p	PTR unsigned char  size(2) Largest target is 15
		 -> main@GPS_Buffer(BANK0[15]), 

    atol@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_gpstime@Time_Buffer(COMRAM[15]), 

    atof@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_altitude@Alt_Buffer(BANK0[12]), get_longitude@Long_Buffer(BANK0[15]), get_latitude@Lat_Buffer(BANK0[15]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_altitude@Alt_Buffer(BANK0[12]), get_longitude@Long_Buffer(BANK0[15]), get_latitude@Lat_Buffer(BANK0[15]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_13(CODE[9]), STR_12(CODE[5]), STR_9(CODE[6]), STR_6(CODE[6]), 
		 -> STR_1(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 15
		 -> Data_Buffer(BANK0[15]), main@GPS_Buffer(BANK0[15]), Temperature(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    USART_SendString@out	PTR const unsigned char  size(2) Largest target is 50
		 -> stringBT(BANK1[50]), 

    LCD_String_xy@str	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_11(CODE[6]), STR_8(CODE[7]), STR_5(CODE[6]), STR_2(CODE[11]), 

    LCD_String@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_11(CODE[6]), STR_8(CODE[7]), STR_5(CODE[6]), STR_3(CODE[3]), 
		 -> Data_Buffer(BANK0[15]), STR_2(CODE[11]), main@GPS_Buffer(BANK0[15]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 50
		 -> stringBT(BANK1[50]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 50
		 -> stringBT(BANK1[50]), 

    sp__memset	PTR void  size(2) Largest target is 15
		 -> main@GPS_Buffer(BANK0[15]), 


Critical Paths under _main in COMRAM

    _main->_get_altitude
    _main->_get_latitude
    _main->_get_longitude
    _get_longitude->_atof
    _get_latitude->_atof
    _get_gpstime->_atol
    _atol->___lmul
    _get_altitude->_atof
    _atof->_strtod
    _strtod->___ftneg
    _convert_to_degrees->___ftadd
    ___awtoft->_ADC_Read
    ___awtoft->___ftpack
    _sprintf->___ftadd
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___lldiv->___llmod
    ___ftsub->___ftadd
    ___ftneg->___ftmul
    _USART_SendString->_USART_TxChar
    _USART_Init->___ftadd
    ___fttol->_scale
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___altoft->___ftpack
    _LCD_String_xy->_LCD_String
    _LCD_String->_LCD_Char
    _LCD_Char->_MSdelay
    _LCD_Init->_LCD_Command
    _LCD_Command->_MSdelay

Critical Paths under _Serial_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_convert_time_to_UTC
    _convert_to_degrees->___fttol
    _convert_time_to_UTC->_sprintf
    _sprintf->___ftsub
    ___ftsub->___ftadd
    _USART_Init->___fttol

Critical Paths under _Serial_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Serial_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Serial_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Serial_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Serial_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Serial_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Serial_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Serial_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0  218683
                                             66 BANK0     30    30      0
                           _ADC_Init
                           _ADC_Read
                           _LCD_Init
                         _LCD_String
                      _LCD_String_xy
                         _USART_Init
                   _USART_SendString
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                _convert_time_to_UTC
                 _convert_to_degrees
                       _get_altitude
                        _get_gpstime
                       _get_latitude
                      _get_longitude
                             _memset
                            _sprintf
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     203
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _strcat                                               6     2      4     866
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     672
                                             15 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _get_longitude                                       25    22      3   17247
                                             68 COMRAM     1     1      0
                                              0 BANK0     24    21      3
                               _atof
 ---------------------------------------------------------------------------------
 (1) _get_latitude                                        25    22      3   17247
                                             68 COMRAM     1     1      0
                                              0 BANK0     24    21      3
                               _atof
 ---------------------------------------------------------------------------------
 (1) _get_gpstime                                         25    21      4    1043
                                             41 COMRAM    25    21      4
                               _atol
 ---------------------------------------------------------------------------------
 (2) _atol                                                14    10      4     902
                                             27 COMRAM    14    10      4
                             ___lmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _get_altitude                                        22    19      3   17213
                                             68 COMRAM     1     1      0
                                              0 BANK0     21    18      3
                               _atof
 ---------------------------------------------------------------------------------
 (2) _atof                                                 3     0      3   16930
                                             65 COMRAM     3     0      3
                             _strtod
 ---------------------------------------------------------------------------------
 (3) _strtod                                              12     8      4   16668
                                             53 COMRAM    12     8      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (4) _isspace                                              3     3      0      90
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     450
                                             15 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _convert_to_degrees                                  17    14      3   19282
                                              6 BANK0     14    11      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2948
                                             23 COMRAM     4     1      3
                           _ADC_Read (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _convert_time_to_UTC                                 14    10      4   57775
                                             52 BANK0     14    10      4
                            ___lldiv
                            ___llmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             46    36     10   55612
                                              9 BANK0     43    33     10
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   12172
                                             50 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   11893
                                             50 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2335
                                             29 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6112
                                             35 COMRAM    15     9      6
                           _ADC_Read (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                             21 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                             15 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                             15 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2763
                                             23 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8    1055
                                             15 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     802
                                             24 COMRAM    13     5      8
                            ___llmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5057
                                              3 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     237
                                             50 COMRAM     3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     776
                                             15 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _USART_SendString                                     2     0      2     131
                                             16 COMRAM     2     0      2
                       _USART_TxChar
 ---------------------------------------------------------------------------------
 (2) _USART_TxChar                                         1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           7     3      4   12652
                                              6 BANK0      7     3      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     833
                                             57 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    4042
                                             33 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4693
                                             60 COMRAM     9     3      6
                                              0 BANK0      3     3      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2942
                                             23 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                             15 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _LCD_String_xy                                        4     1      3    2135
                                             24 COMRAM     4     1      3
                        _LCD_Command
                         _LCD_String
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           4     2      2     927
                                             22 COMRAM     2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Char                                             1     1      0     498
                                             21 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0     974
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          1     1      0     498
                                             21 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (4) _MSdelay                                              6     4      2     476
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             8     6      2     109
                                             15 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Serial_ISR                                          15    15      0      89
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _LCD_Init
     _LCD_Command
       _MSdelay
     _MSdelay
   _LCD_String
     _LCD_Char
       _MSdelay
   _LCD_String_xy
     _LCD_Command
       _MSdelay
     _LCD_String
       _LCD_Char
         _MSdelay
   _USART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _USART_SendString
     _USART_TxChar
   ___awtoft
     _ADC_Read (ARG)
     ___ftpack (ARG)
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftmul
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       _ADC_Read (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___fttol
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       _ADC_Read (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _convert_time_to_UTC
     ___lldiv
       ___llmod (ARG)
     ___llmod
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftsub
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _ADC_Read (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _ADC_Read (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               _ADC_Read (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _ADC_Read (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
         ___llmod (ARG)
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _convert_to_degrees
     ___awtoft
       _ADC_Read (ARG)
       ___ftpack (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       _ADC_Read (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _get_altitude
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
         _isdigit
         _isspace
   _get_gpstime
     _atol
       ___lmul
       _isdigit
   _get_latitude
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
         _isdigit
         _isspace
   _get_longitude
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
         _isdigit
         _isspace
   _memset
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       _ADC_Read (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
       ___llmod (ARG)
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _strcat
   _strcpy

 _Serial_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      82       7       50.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     60      90       5       90.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4E       1       83.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     160      20        0.0%
DATA                 0      0     160       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Oct 06 10:44:31 2020

                   ___altoft@exp 0020                   ?_get_longitude 0060  
                   ?_LCD_Command 0001                    ___altoft@sign 0021  
                             _GO 007E11                     ___awdiv@sign 001B  
                   main@Altitude 00B5              ___wmul@multiplicand 0020  
                    ?_LCD_String 0017            get_latitude@_latitude 0072  
                   ___ftadd@exp1 0062                     ___ftadd@exp2 0061  
          get_altitude@_Altitude 006F                     ___ftadd@sign 0060  
                            l110 304A                              l240 3692  
                            l342 0EDC                              l710 2082  
                            l542 1772                              l704 2028  
                            l544 1776                              l571 1A04  
                            l708 205E                              l719 213C  
                            l728 215A                              l681 2C04  
                            l833 2F68                              l649 2550  
                            l753 2428                              l746 239A  
                            l739 2B44                              l843 321C  
                            l747 23C2                              l597 298A  
                            l778 35CE                              _GIE 007F97  
                            _E_W 004D                              _N_S 004E  
                   main@Latitude 00BA                     ___awmod@sign 0015  
                            prod 000FF3                              wreg 000FE8  
      convert_to_degrees@dec_deg 006C        convert_to_degrees@decimal 0071  
      convert_to_degrees@degrees 006F                     ___ftdiv@cntr 002B  
                   ___ftdiv@sign 0030                             l3000 2DEC  
                           l3124 23EE                             l4110 2BBC  
                           l4102 2B86                             l3150 2476  
                           l3134 2416                             l4200 2130  
                           l3144 2458                             l3136 2422  
                           l3128 23FE                             l4114 2BD2  
                           l4106 2B94                             l4116 2BF0  
                           l4108 2B9E                             l3172 24E8  
                           l3164 24B8                             l4118 2BFA  
                           l4142 3090                             l4206 2178  
                           l3094 2360                             l4302 2A46  
                           l4144 309C                             l4216 21AC  
                           l4232 2AE0                             l3424 2F1A  
                           l3184 2516                             l3088 2334  
                           l2704 334E                             l4400 16CA  
                           l4170 207A                             l4226 2AB8  
                           l3426 2F26                             l3194 253E  
                           l4306 2A56                             l4402 16CE  
                           l4180 20AA                             l4164 206C  
                           l4252 2B1E                             l3436 2F5A  
                           l3428 2F2A                             l3452 320E  
                           l3444 31DA                             l3196 254A  
                           l3188 2526                             l4332 1F94  
                           l4324 1ED4                             l2708 3362  
                           l2900 3586                             l4500 191C  
                           l2670 34B4                             l4190 20EE  
                           l4158 2036                             l3446 31E6  
                           l2902 358A                             l4510 1954  
                           l4414 16FE                             l2680 34CE  
                           l2672 34BC                             l4192 20FA  
                           l3448 31EA                             l2920 2E98  
                           l4272 29C4                             l4352 1464  
                           l4432 177C                             l4408 16E6  
                           l2682 34D2                             l4186 20D4  
                           l2930 2EBA                             l2914 2E88  
                           l4370 1658                             l4346 13C0  
                           l4522 199A                             l4506 1946  
                           l4514 1962                             l4442 17B8  
                           l3732 33BE                             l4188 20E0  
                           l4292 2A1E                             l2692 3638  
                           l4364 15B4                             l4356 1488  
                           l4620 0916                             l4612 08E4  
                           l4524 19A2                             l3900 330C  
                           l4198 2124                             l2926 2EAE  
                           l2942 2EE0                             l4278 29EC  
                           l4702 0BE6                             l4630 0978  
                           l4606 08C4                             l4518 196E  
                           l4446 17C8                             l4470 185C  
                           l4438 17A0                             l3750 28E4  
                           l3734 28A4                             l3728 3396  
                           l2928 2EB6                             l4296 2A2E  
                           l4704 0BFC                             l4632 097E  
                           l4624 0952                             l4544 1A24  
                           l4528 19CC                             l4448 17CC  
                           l3760 2938                             l3752 28EA  
                           l4554 2592                             l4378 3408  
                           l2946 2EEE                             l2938 2ED6  
                           l2970 3192                             l2962 3178  
                           l4714 0C84                             l4706 0C2C  
                           l4650 09FA                             l4626 0968  
                           l4490 18BA                             l4466 1858  
                           l4386 1696                             l4572 2608  
                           l4804 1070                             l4732 0D6E  
                           l4708 0C42                             l4644 09C8  
                           l4388 169A                             l3764 2946  
                           l3844 354A                             l3862 32C6  
                           l3854 329E                             l4590 266C  
                           l4582 2636                             l2990 2D90  
                           l2982 31BE                             l2974 31A6  
                           l2966 3186                             l2958 316C  
                           l4822 10E8                             l4750 0DE6  
                           l4734 0D74                             l4718 0CAA  
                           l4806 107E                             l4646 09E2  
                           l4638 09A8                             l4494 18E6  
                           l4486 18B2                             l4478 187A  
                           l4398 16C2                             l3758 28F4  
                           l3870 30EC                             l4902 2D06  
                           l4584 2646                             l4576 261C  
                           l2968 318E                             l4840 115C  
                           l4824 10EE                             l4816 10C2  
                           l4752 0DEE                             l4760 0E82  
                           l4728 0D08                             l4664 0A64  
                           l4656 0A12                             l4920 22D2  
                           l4496 18F2                             l3848 355A  
                           l3858 32B2                             l3866 32D8  
                           l4586 2650                             l2994 2DC0  
                           l2978 31B0                             l4850 11BA  
                           l4770 0EBE                             l4762 0E90  
                           l4746 0DBA                             l4690 0B58  
                           l4674 0AAA                             l4658 0A4A  
                           l4922 22FA                             l3874 3112  
                           l4930 2C38                             l3890 3524  
                           l4596 3234                             l4844 118C  
                           l4836 1134                             l4860 127E  
                           l3982 35F0                             l4598 3240  
                           l4854 1244                             l4782 0F10  
                           l4774 0EE0                             l3894 32F0  
                           l4856 124A                             l4768 0EAA  
                           l4952 2E04                             l4936 2C68  
                           l3896 32F4                             l3888 351C  
                           l3978 35DE                             l4786 0F62  
                           l4698 0BC0                             l4858 1260  
                           l3898 3304                             l4796 1048  
                           l4876 3486                             l4980 1A5A  
                           l4798 1056                             l4958 2E34  
                           l4896 2CD6                             _ADON 007E10  
                           STR_1 088B                             STR_2 0877  
                           STR_3 0890                             STR_4 08B1  
                           STR_5 089A                             STR_6 08A6  
                           STR_7 08B1                             STR_8 0893  
                           STR_9 08A6                             _CREN 007D5C  
                           u3011 2318                             _LATB 000F8A  
                           u3031 2344                             u4210 3032  
                           u4204 3024                             u4205 3020  
                           u4070 33B6                             u4080 33DE  
                           u4234 3040                             u4330 3334  
                           u4235 303C                             u4228 3034  
                           u4180 3016                             u4077 33AC  
                           u4087 33D4                             u4601 1FFA  
                           u5321 2572                             u4337 332A  
                           u5340 25B0                             u4198 3018  
                           u5510 0AF0                             u4801 2AA0  
                           u5345 25A8                             u5515 0AE4  
                           _RCIF 007CF5                             u4821 2AC8  
                           u4591 1FE4                             u4851 29AC  
                           u5670 0ED4                             u4871 29D4  
                 ??_get_altitude 0045                             _TXIF 007CF4  
      convert_to_degrees@minutes 0069                             _atof 3600  
                           _atol 28A4                             _main 1A32  
                   ___ftpack@arg 0010                     ___ftpack@exp 0013  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           fsr2h 000FDA                             fsr0l 000FE9  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 004F         __end_of_USART_SendString 3600  
          get_latitude@lat_index 0077                 __end_of_ADC_Init 3690  
               __end_of_ADC_Read 306E                   ??_get_latitude 0045  
                           prodh 000FF4                             prodl 000FF3  
                           start 000E                  __end_of_MSdelay 34E0  
                  _LCD_String_xy 328A                     _sprintf$1186 0079  
                   ___ftmul@cntr 0031                     ___param_bank 000000  
                   ___ftmul@sign 0032                    main@Longitude 00BD  
                   ___fttol@exp1 0065                     ___fttol@lval 0061  
               __end_of_LCD_Char 365E                      _Data_Buffer 00D7  
               __end_of_LCD_Init 3472                            ?_atof 0042  
                          ?_atol 001C                            ?_main 0001  
                __end_of___awdiv 2EF8                  __end_of___ftadd 21D2  
                          STR_10 08B1                            STR_11 08A0  
                          STR_12 08AC                            STR_13 0882  
                __end_of___awmod 31C8                  __end_of___ftdiv 2B76  
                __end_of___ftneg 35DC                  __end_of___lldiv 2F7A  
                __end_of___ftmul 2A90                  ___awdiv@divisor 0018  
                __end_of___llmod 322E                  __end_of___ftsub 3432  
                __end_of___fttol 267E                            _LATD0 007C60  
                          _LATD1 007C61                            _LATD2 007C62  
                          i2l156 274A                            i2l158 2756  
                ___awdiv@counter 001A                            _RCREG 000FAE  
                          _RCSTA 000FAB                            _SPBRG 000FAF  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISD 000F95                            _TXREG 000FAD  
                          _TXSTA 000FAC              ___lmul@multiplicand 0014  
                   ___lltoft@exp 0020  convert_to_degrees@NMEA_lat_long 0066  
                  ___awtoft@sign 001B                  __end_of_dpowers 0829  
                          _scale 128C                  __end_of_isdigit 3640  
       get_longitude@Long_Buffer 0063                    ___ftpack@sign 0014  
                          atof@s 0042                            atol@a 0025  
                          atol@c 0029                            atol@s 001C  
                __end_of_isspace 3592                            pclath 000FFA  
                          tablat 000FF5            get_altitude@alt_index 0073  
                          status 000FD8              __size_of_LCD_String 0052  
                __end_of_sprintf 128C                   ?_LCD_String_xy 0019  
                    ?_USART_Init 0066                  __initialization 34E0  
                ??_get_longitude 0045                     __end_of_atof 3622  
                   __end_of_atol 299C                     __end_of_main 1D8E  
               get_gpstime@_Time 003E                 get_gpstime@index 0042  
                         ??_atof 0045                           ??_atol 0020  
                         ??_main 0046                    ___fttol@sign1 0060  
                  __activetblptr 000002             __size_of__tdiv_to_l_ 0132  
    __size_of_convert_to_degrees 0136                           _ADCON0 000FC2  
                         _ADCON1 000FC1                           _ADCON2 000FC0  
               __end_of___altoft 30E6                 ___llmod@dividend 0010  
                         ?_scale 0033                           _ADRESH 000FC4  
                         _ADRESL 000FC3                 ___awdiv@dividend 0016  
               __end_of___awtoft 34AA                 __end_of___ftpack 2C24  
               LCD_String_xy@pos 0019                 LCD_String_xy@row 001C  
               LCD_String_xy@str 001A                 __end_of___lltoft 328A  
                      ??_MSdelay 0012                           i2l4072 26CC  
                         i2l4084 270A                           i2l4076 26E6  
                         i2l4088 2720                           _OSCCON 000FD3  
                         _TRISC6 007CA6                           _TRISC7 007CA7  
                     _Serial_ISR 0008                get_altitude@index 0074  
             get_longitude@index 0076                 __end_of__powers_ 0850  
                         ___ftge 2D60                           ___lmul 333E  
                         ___wmul 3592                        ??___awdiv 001A  
                      ??___ftadd 0043                        ??___awmod 0014  
                      ??___ftdiv 0028                        ??___ftneg 0036  
                      ??___lldiv 0021                        ??___ftmul 002A  
                      ??___llmod 0018                        ??___ftsub 0046  
                      ??___fttol 003E             __size_of_get_gpstime 0072  
                ADC_Read@channel 0010                           _memset 3540  
                         _fround 1D8E                  ADC_Read@digital 0016  
                         clear_0 34E6                           clear_1 34F2  
                         clear_2 34FE                 ___awdiv@quotient 001C  
                ___awmod@divisor 0012             __end_of_get_altitude 2E74  
                ___awmod@counter 0014             __size_of_LCD_Command 001E  
                         _strcat 32E6                           _strcpy 3512  
                         _strtod 167C            ___ftmul@f3_as_product 002E  
        get_longitude@_longitude 0072                        ??_isdigit 0010  
           __end_of_get_latitude 2D60                        ?_ADC_Init 0001  
                      ?_ADC_Read 0010                     __mediumconst 0000  
                      ??_isspace 0010                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
            __size_of_USART_Init 007A          get_latitude@lat_pointer 0075  
                      ??_sprintf 0073                        ?_LCD_Char 0001  
                     __accesstop 0060          __end_of__initialization 3504  
                     ___altoft@c 0018                        ?_LCD_Init 0001  
                ??_LCD_String_xy 001C                       ___ftadd@f1 003D  
                     ___ftadd@f2 0040                       ___ftge@ff1 0010  
                     ___ftge@ff2 0013         _convert_time_to_UTC$1182 0098  
                  ___rparam_used 000001                       ___ftdiv@f1 0022  
                     ___ftdiv@f2 0025                       ___ftdiv@f3 002C  
                     ___ftneg@f1 0033                       ___awtoft@c 0018  
                     ___ftmul@f1 0024                       ___ftmul@f2 0027  
                     ___ftsub@f1 0063                       ___ftsub@f2 0066  
                     ___fttol@f1 003A                   __pcstackCOMRAM 0001  
                     ___lltoft@c 0018                    __end_of_scale 167C  
                   ??_LCD_String 0019                       __div_to_l_ 243A  
                     ??_ADC_Init 0010                       ??_ADC_Read 0012  
                __div_to_l_@exp1 001B                  __div_to_l_@cntr 001A  
                        ??_scale 0036                  __div_to_l_@quot 0016  
                     __pbssBANK0 00C0                       __pbssBANK1 0100  
                     ??_LCD_Char 0016                       ??_LCD_Init 0017  
             __end_of_LCD_String 33E6                ?_USART_SendString 0011  
                  __div_to_l_@f1 0010                    __div_to_l_@f2 0013  
                    ?_Serial_ISR 0001               ??_USART_SendString 0013  
        get_longitude@long_index 0077                          ?___ftge 0010  
   __size_of_convert_time_to_UTC 0112                          ?___lmul 0010  
                        ?___wmul 001E                        ?___altoft 0018  
                        ?_memset 0010                          ?_fround 0033  
                 ___lmul@product 0018                        ?___awtoft 0018  
                      ?___ftpack 0010                        ?___lltoft 0018  
                        ?_strcat 0010                          ?_strcpy 0010  
                        ?_strtod 0036                     _CommaCounter 004C  
                        _MSdelay 34AA                     _GGA_Pointers 00C0  
                  LCD_String@str 0017                     ??_USART_Init 0046  
              __end_of__npowers_ 0877                          __Hparam 0000  
                     _scale$1185 0036                          __Lparam 0000  
          __size_of_get_altitude 0084                  __size_of___ftge 0090  
                        ___awdiv 2E74                  __size_of___lmul 0056  
                        ___ftadd 1FD4                          ___awmod 3158  
                        ___ftdiv 2A90                          ___ftneg 35B8  
                        ___lldiv 2EF8                  __size_of___wmul 0026  
                        ___ftmul 299C                          ___llmod 31C8  
                        ___ftsub 33E6                          ___fttol 2562  
                   __psmallconst 0800                       ??___altoft 001C  
          __size_of_get_latitude 009E                      _Temperature 00E6  
                        __pcinit 34E0                       ??___awtoft 001B  
                     ??___ftpack 0015                  __size_of_memset 002C  
                __size_of_fround 0246                          __ramtop 0800  
                        _celsius 00D4                       ??___lltoft 001C  
                        __ptext0 1A32                          __ptext1 3512  
                        __ptext2 32E6                          __ptext3 3540  
                        __ptext4 2C24                          __ptext5 2CC2  
                        __ptext6 30E6                          __ptext7 28A4  
                        __ptext8 2DF0                          __ptext9 3600  
            USART_SendString@out 0011           convert_time_to_UTC@min 009E  
         convert_time_to_UTC@sec 00A0                        _GGA_Index 0049  
                __size_of_strcat 0058                  __size_of_strcpy 002E  
                    ?__div_to_l_ 0010                  __size_of_strtod 03B6  
                 USART_Init@temp 006A                          _dpowers 0801  
                        _isdigit 3622                 ___awmod@dividend 0010  
            __size_of_Serial_ISR 278A                          _isspace 356C  
             __end_of_USART_Init 2FF4                          _sprintf 08B4  
                 __pintcode_body 267E             end_of_initialization 3504  
                   _get_altitude 2DF0                          memset@c 0012  
                        memset@n 0014                          memset@p 0016  
                 LCD_Command@cmd 0016                    __Lmediumconst 0000  
                        int_func 267E                  ___lldiv@divisor 001D  
                   _get_latitude 2CC2                  ___lldiv@counter 0025  
                      _RCSTAbits 000FAB                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
        get_altitude@alt_pointer 0072            __end_of_get_longitude 2CC2  
                 __tdiv_to_l_@f1 0010                   __tdiv_to_l_@f2 0013  
                  ??__tdiv_to_l_ 0016                          strtod@s 0036  
     __end_of_convert_to_degrees 2308                __size_of_ADC_Init 0014  
              __size_of_ADC_Read 007A              USART_Init@baud_rate 0066  
                    ___ftdiv@exp 002F                    ?_USART_TxChar 0001  
              __size_of_LCD_Char 001E                __size_of_LCD_Init 0040  
            __size_of__div_to_l_ 0128                    ??_get_gpstime 002E  
                    ___ftmul@exp 002D                    _IsItGGAString 004B  
                  ??_LCD_Command 0016                   __end_of___ftge 2DF0  
                 __end_of___lmul 3394                LCD_Char@char_data 0016  
                 __end_of___wmul 35B8                   __end_of_memset 356C  
                 __end_of_fround 1FD4                   __end_of_strcat 333E  
                 __end_of_strcpy 3540                   __end_of_strtod 1A32  
            start_initialization 34E0              __end_of__tdiv_to_l_ 243A  
            _convert_time_to_UTC 2792                   ??_USART_TxChar 0010  
                ___llmod@divisor 0014                  ___llmod@counter 0018  
                   ??_Serial_ISR 0001            __end_of_LCD_String_xy 32E6  
           ?_convert_time_to_UTC 0094                         ??___ftge 0016  
                       ??___lmul 0018                         ??___wmul 0022  
                       ??_memset 0016                         ??_fround 0036  
            __end_of_get_gpstime 3158                    sprintf@tmpval 0086  
                       ??_strcat 0014                         ??_strcpy 0014  
                       ??_strtod 003A        __size_of_USART_SendString 0024  
              __size_of___altoft 0078                       fround@prec 003C  
              __size_of___awtoft 0038                __size_of___ftpack 00AE  
            __end_of_LCD_Command 367C                __size_of___lltoft 005C  
                    __pbssCOMRAM 0046                    __pcstackBANK0 0060  
             __end_of_Serial_ISR 2792                         ?_MSdelay 0010  
                    sprintf@flag 0082                      sprintf@fval 008E  
                    sprintf@prec 0091                        _main$1181 00B8  
          ??_convert_time_to_UTC 0046                        __pintcode 0008  
                       ?___awdiv 0016                         ?___ftadd 003D  
                       ?___awmod 0010                         ?___ftdiv 0022  
                       ?___ftneg 0033                         ?___lldiv 0019  
                       ?___ftmul 0024                         ?___llmod 0010  
                       ?___ftsub 0063                        __npowers_ 0850  
                       ?___fttol 003A                      __tdiv_to_l_ 2308  
                   ??__div_to_l_ 0016                      __smallconst 0800  
                       ?_isdigit 0001                         _ADC_Init 367C  
                       _ADC_Read 2FF4                         ?_isspace 0001  
                       _GGA_CODE 0046                         ?_sprintf 0069  
                 __size_of_scale 03F0                         MSdelay@i 0012  
                       MSdelay@j 0014                         _LCD_Char 3640  
                       _LCD_Init 3432                   ___wmul@product 0022  
                       _PIE1bits 000F9D               __end_of__div_to_l_ 2562  
                    _get_gpstime 30E6                      strtod@flags 003C  
                    strtod@expon 003D                      _LCD_Command 365E  
        Serial_ISR@received_char 000F                       _ADCON0bits 000FC2  
           __end_of_USART_TxChar 369C                ___wmul@multiplier 001E  
              ___lmul@multiplier 0010               _convert_to_degrees 21D2  
               __size_of_MSdelay 0036                         __Hrparam 0000  
            ?_convert_to_degrees 0066                         __Lrparam 0000  
               __size_of___awdiv 0084                 __size_of___ftadd 01FE  
               __size_of___awmod 0070                 __size_of___ftdiv 00E6  
               __size_of___ftneg 0024                 __size_of___lldiv 0082  
                       ___altoft 306E                 __size_of___ftmul 00F4  
               __size_of___llmod 0066                 __size_of___ftsub 004C  
               __size_of___fttol 011C                         ___awtoft 3472  
                       ___ftpack 2B76                      _fround$1183 0039  
                    _fround$1184 0036                         ___lltoft 322E  
                    _isdigit$831 0011                 _USART_SendString 35DC  
         get_latitude@Lat_Buffer 0063                       sprintf@len 007E  
                     sprintf@exp 0084                       sprintf@val 008A  
                     strcat@from 0012             ??_convert_to_degrees 0046  
               __size_of_isdigit 001E                 __size_of_isspace 0026  
                       __ptext10 167C                         __ptext11 356C  
                       __ptext20 3592                         __ptext12 333E  
                       __ptext21 299C                         __ptext13 21D2  
                       __ptext30 35B8                         __ptext22 3158  
                       __ptext14 3472                         __ptext31 2D60  
                       __ptext23 2E74                         __ptext15 2792  
                       __ptext40 328A                         __ptext32 35DC  
                       __ptext24 2308                         __ptext16 08B4  
                       __ptext41 3394                         __ptext33 3690  
                       __ptext25 243A                         __ptext17 128C  
                       __ptext42 3640                         __ptext34 2F7A  
                       __ptext26 322E                         __ptext18 3622  
                       __ptext43 3432                         __ptext35 2562  
                       __ptext27 31C8                         __ptext19 1D8E  
                       __ptext44 365E                         __ptext36 2A90  
                       __ptext28 2EF8                         __ptext45 34AA  
                       __ptext37 1FD4                         __ptext29 33E6  
                       __ptext46 2FF4                         __ptext38 306E  
                       __ptext47 367C                         __ptext39 2B76  
                       __powers_ 0829                       _GGA_Buffer 0100  
        convert_time_to_UTC@hour 009C                 __size_of_sprintf 09D8  
         __size_of_get_longitude 009E                       strcpy@from 0012  
                  __size_of_atof 0022                    __size_of_atol 00F8  
                  __size_of_main 035C                       MSdelay@val 0010  
                     strtod@eexp 003B                         int$flags 004F  
                       atol@sign 0024                         main@Time 00B1  
                       _stringBT 0150                       _LCD_String 3394  
                 main@GPS_Buffer 00A2                      _isspace$834 0011  
         get_gpstime@Time_Buffer 002F                       _INTCONbits 000FF2  
                       isdigit@c 0012                         memset@p1 0010  
                USART_TxChar@out 0010                         scale@scl 0039  
                       intlevel2 0000                        sprintf@ap 0080  
                      sprintf@cp 007C                 __tdiv_to_l_@exp1 001E  
               __tdiv_to_l_@cntr 001D                        sprintf@sp 0069  
               __tdiv_to_l_@quot 0019      convert_time_to_UTC@UTC_Time 0094  
                       isspace@c 0012                 ___lldiv@dividend 0019  
                      strtod@res 0038        get_longitude@long_pointer 0075  
          __size_of_USART_TxChar 000C                get_latitude@index 0076  
         get_altitude@Alt_Buffer 0063                    _get_longitude 2C24  
                   ?__tdiv_to_l_ 0010                         sprintf@c 0093  
                       sprintf@f 006B                         strcat@cp 0014  
                       strcat@to 0010                 ___lldiv@quotient 0021  
                       strcpy@cp 0014                         strcpy@to 0010  
         __size_of_LCD_String_xy 005C                         strtod@_u 003E  
                  ?_get_altitude 0060      __end_of_convert_time_to_UTC 28A4  
                   _USART_TxChar 3690                    ?_get_latitude 0060  
                     _USART_Init 2F7A                     ?_get_gpstime 002A  
