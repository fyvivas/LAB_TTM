

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Sep 22 15:44:35 2020

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27  0000                     
    28                           ; Version 1.41
    29                           ; Generated 25/01/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F45K50 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	idataCOMRAM
    64  000C36                     __pidataCOMRAM:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _retardo
    68  000C36  0064               	dw	100
    69                           
    70                           	psect	smallconst
    71  000800                     __psmallconst:
    72                           	opt stack 0
    73  000800  00                 	db	0
    74  000801                     main@F5969:
    75                           	opt stack 0
    76  000801  37                 	db	55
    77  000802  38                 	db	56
    78  000803  39                 	db	57
    79  000804  2F                 	db	47
    80  000805  34                 	db	52
    81  000806  35                 	db	53
    82  000807  36                 	db	54
    83  000808  2A                 	db	42
    84  000809  31                 	db	49
    85  00080A  32                 	db	50
    86  00080B  33                 	db	51
    87  00080C  2D                 	db	45
    88  00080D  0D                 	db	13
    89  00080E  30                 	db	48
    90  00080F  3D                 	db	61
    91  000810  2B                 	db	43
    92  000811  00                 	db	0
    93  000812                     __end_ofmain@F5969:
    94                           	opt stack 0
    95  000812                     Keypad_Key_Press@F5948:
    96                           	opt stack 0
    97  000812  37                 	db	55
    98  000813  38                 	db	56
    99  000814  39                 	db	57
   100  000815  2F                 	db	47
   101  000816  34                 	db	52
   102  000817  35                 	db	53
   103  000818  36                 	db	54
   104  000819  2A                 	db	42
   105  00081A  31                 	db	49
   106  00081B  32                 	db	50
   107  00081C  33                 	db	51
   108  00081D  2D                 	db	45
   109  00081E  0D                 	db	13
   110  00081F  30                 	db	48
   111  000820  3D                 	db	61
   112  000821  2B                 	db	43
   113  000822  00                 	db	0
   114  000823                     __end_ofKeypad_Key_Press@F5948:
   115                           	opt stack 0
   116  000823                     _password:
   117                           	opt stack 0
   118  000823  37                 	db	55
   119  000824  38                 	db	56
   120  000825  39                 	db	57
   121  000826  30                 	db	48
   122  000827  00                 	db	0
   123  000828                     __end_of_password:
   124                           	opt stack 0
   125  0000                     _ANSELA	set	3931
   126  0000                     _ANSELE	set	3935
   127  0000                     _ANSELD	set	3934
   128  0000                     _ANSELB	set	3932
   129  0000                     _ANSELC	set	3933
   130  0000                     _PORTD	set	3971
   131  0000                     _PORTDbits	set	3971
   132  0000                     _PORTBbits	set	3969
   133  0000                     _INTCON2bits	set	4081
   134  0000                     _WPUB	set	3973
   135  0000                     _TRISD	set	3989
   136  0000                     _TRISC	set	3988
   137  0000                     _TRISB	set	3987
   138  0000                     _TRISA	set	3986
   139  0000                     _TRISE	set	3990
   140  0000                     _LATC	set	3979
   141  0000                     _LATB	set	3978
   142  0000                     _LATA	set	3977
   143  0000                     _LATD	set	3980
   144  0000                     _LATE	set	3981
   145  0000                     _ACTCON	set	4021
   146  0000                     _OSCTUNE	set	3995
   147  0000                     _OSCCON2	set	4050
   148  0000                     _OSCCON	set	4051
   149  0000                     _LATC0	set	31832
   150  0000                     _TRISC0	set	31904
   151  0000                     _LATA0	set	31816
   152  000828                     STR_3:
   153  000828  54                 	db	84	;'T'
   154  000829  45                 	db	69	;'E'
   155  00082A  43                 	db	67	;'C'
   156  00082B  4C                 	db	76	;'L'
   157  00082C  41                 	db	65	;'A'
   158  00082D  44                 	db	68	;'D'
   159  00082E  4F                 	db	79	;'O'
   160  00082F  00                 	db	0
   161  000830                     STR_1:
   162  000830  20                 	db	32
   163  000831  20                 	db	32
   164  000832  20                 	db	32
   165  000833  20                 	db	32
   166  000834  20                 	db	32
   167  000835  20                 	db	32
   168  000836  00                 	db	0
   169  0000                     
   170                           ; #config settings
   171  000837  00                 	db	0	; dummy byte at the end
   172  0000                     
   173                           	psect	cinit
   174  000B8C                     __pcinit:
   175                           	opt stack 0
   176  000B8C                     start_initialization:
   177                           	opt stack 0
   178  000B8C                     __initialization:
   179                           	opt stack 0
   180                           
   181                           ; Initialize objects allocated to COMRAM (2 bytes)
   182                           ; load TBLPTR registers with __pidataCOMRAM
   183  000B8C  0E36               	movlw	low __pidataCOMRAM
   184  000B8E  6EF6               	movwf	tblptrl,c
   185  000B90  0E0C               	movlw	high __pidataCOMRAM
   186  000B92  6EF7               	movwf	tblptrh,c
   187  000B94  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   188  000B96  6EF8               	movwf	tblptru,c
   189  000B98  0009               	tblrd		*+	;fetch initializer
   190  000B9A  CFF5 F049          	movff	tablat,__pdataCOMRAM
   191  000B9E  0009               	tblrd		*+	;fetch initializer
   192  000BA0  CFF5 F04A          	movff	tablat,__pdataCOMRAM+1
   193                           
   194                           ; Clear objects allocated to COMRAM (32 bytes)
   195  000BA4  EE00  F029         	lfsr	0,__pbssCOMRAM
   196  000BA8  0E20               	movlw	32
   197  000BAA                     clear_0:
   198  000BAA  6AEE               	clrf	postinc0,c
   199  000BAC  06E8               	decf	wreg,f,c
   200  000BAE  E1FD               	bnz	clear_0
   201  000BB0                     end_of_initialization:
   202                           	opt stack 0
   203  000BB0                     __end_of__initialization:
   204                           	opt stack 0
   205  000BB0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   206  000BB2  6EF8               	movwf	tblptru,c
   207  000BB4  0100               	movlb	0
   208  000BB6  EF1C  F004         	goto	_main	;jump to C main() function
   209                           tblptru	equ	0xFF8
   210                           tblptrh	equ	0xFF7
   211                           tblptrl	equ	0xFF6
   212                           tablat	equ	0xFF5
   213                           postinc0	equ	0xFEE
   214                           wreg	equ	0xFE8
   215                           
   216                           	psect	bssCOMRAM
   217  000029                     __pbssCOMRAM:
   218                           	opt stack 0
   219  000029                     _texto:
   220                           	opt stack 0
   221  000029                     	ds	20
   222  00003D                     _estado_teclado:
   223                           	opt stack 0
   224  00003D                     	ds	1
   225  00003E                     _tecla:
   226                           	opt stack 0
   227  00003E                     	ds	1
   228  00003F                     _retardo_cad:
   229                           	opt stack 0
   230  00003F                     	ds	10
   231                           tblptru	equ	0xFF8
   232                           tblptrh	equ	0xFF7
   233                           tblptrl	equ	0xFF6
   234                           tablat	equ	0xFF5
   235                           postinc0	equ	0xFEE
   236                           wreg	equ	0xFE8
   237                           
   238                           	psect	dataCOMRAM
   239  000049                     __pdataCOMRAM:
   240                           	opt stack 0
   241  000049                     _retardo:
   242                           	opt stack 0
   243  000049                     	ds	2
   244                           tblptru	equ	0xFF8
   245                           tblptrh	equ	0xFF7
   246                           tblptrl	equ	0xFF6
   247                           tablat	equ	0xFF5
   248                           postinc0	equ	0xFEE
   249                           wreg	equ	0xFE8
   250                           
   251                           	psect	cstackCOMRAM
   252  000001                     __pcstackCOMRAM:
   253                           	opt stack 0
   254  000001                     ?_keypad_read:
   255                           	opt stack 0
   256  000001                     Lcd_Port@a:
   257                           	opt stack 0
   258  000001                     Keypad_Key_Press@keypad_deco:
   259                           	opt stack 0
   260                           
   261                           ; 17 bytes @ 0x0
   262  000001                     	ds	1
   263  000002                     ??_Lcd_Cmd:
   264  000002                     Lcd_Write_Char@temp:
   265                           	opt stack 0
   266                           
   267                           ; 1 bytes @ 0x1
   268  000002                     	ds	1
   269  000003                     ??_keypad_read:
   270  000003                     Lcd_Cmd@a:
   271                           	opt stack 0
   272  000003                     Lcd_Write_Char@y:
   273                           	opt stack 0
   274                           
   275                           ; 1 bytes @ 0x2
   276  000003                     	ds	1
   277  000004                     ??_Lcd_Init:
   278  000004                     Lcd_Set_Cursor@b:
   279                           	opt stack 0
   280  000004                     Lcd_Write_Char@a:
   281                           	opt stack 0
   282                           
   283                           ; 1 bytes @ 0x3
   284  000004                     	ds	1
   285  000005                     Lcd_Set_Cursor@a:
   286                           	opt stack 0
   287  000005                     keypad_read@count:
   288                           	opt stack 0
   289  000005                     Lcd_Write_String@a:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x4
   293  000005                     	ds	1
   294  000006                     Lcd_Set_Cursor@z:
   295                           	opt stack 0
   296  000006                     keypad_read@keys:
   297                           	opt stack 0
   298                           
   299                           ; 2 bytes @ 0x5
   300  000006                     	ds	1
   301  000007                     ??_Lcd_Write_String:
   302  000007                     Lcd_Set_Cursor@y:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x6
   306  000007                     	ds	1
   307  000008                     Lcd_Set_Cursor@temp:
   308                           	opt stack 0
   309  000008                     keypad_read@bitmask:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0x7
   313  000008                     	ds	1
   314  000009                     Lcd_Write_String@i:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x8
   318  000009                     	ds	9
   319  000012                     Keypad_Key_Press@tec:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x11
   323  000012                     	ds	2
   324  000014                     Keypad_Key_Press@fila:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x13
   328  000014                     	ds	2
   329  000016                     ??_main:
   330                           
   331                           ; 1 bytes @ 0x15
   332  000016                     	ds	2
   333  000018                     main@keypad_deco:
   334                           	opt stack 0
   335                           
   336                           ; 17 bytes @ 0x17
   337  000018                     	ds	17
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           
   345 ;;
   346 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   347 ;;
   348 ;; *************** function _main *****************
   349 ;; Defined at:
   350 ;;		line 203 in file "main.c"
   351 ;; Parameters:    Size  Location     Type
   352 ;;		None
   353 ;; Auto vars:     Size  Location     Type
   354 ;;  keypad_deco    17   23[COMRAM] const unsigned char [17]
   355 ;; Return value:  Size  Location     Type
   356 ;;                  1    wreg      void 
   357 ;; Registers used:
   358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   359 ;; Tracked objects:
   360 ;;		On entry : 0/0
   361 ;;		On exit  : 0/0
   362 ;;		Unchanged: 0/0
   363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   364 ;;      Params:         0       0       0       0       0       0       0       0       0
   365 ;;      Locals:        17       0       0       0       0       0       0       0       0
   366 ;;      Temps:          2       0       0       0       0       0       0       0       0
   367 ;;      Totals:        19       0       0       0       0       0       0       0       0
   368 ;;Total ram usage:       19 bytes
   369 ;; Hardware stack levels required when called:    3
   370 ;; This function calls:
   371 ;;		_Keypad_Init
   372 ;;		_Keypad_Key_Press
   373 ;;		_Lcd_Clear
   374 ;;		_Lcd_Init
   375 ;;		_Lcd_Set_Cursor
   376 ;;		_Lcd_Write_Char
   377 ;;		_Lcd_Write_String
   378 ;;		_SYSTEM_Initialize
   379 ;;		_keypad_read
   380 ;; This function is called by:
   381 ;;		Startup code after reset
   382 ;; This function uses a non-reentrant model
   383 ;;
   384                           
   385                           	psect	text0
   386  000838                     __ptext0:
   387                           	opt stack 0
   388  000838                     _main:
   389                           	opt stack 28
   390                           
   391                           ;main.c: 206: const unsigned char keypad_deco[17]=
   392                           ;main.c: 207: {'7', '8', '9', '/', '4', '5', '6', '*', '1', '2', '3', '-', 13, '0', '=',
      +                           '+', 0};
   393                           
   394                           ;incstack = 0
   395  000838  0E01               	movlw	low main@F5969
   396  00083A  6EF6               	movwf	tblptrl,c
   397  00083C                     	if	1	;There is more than 1 active tblptr byte
   398  00083C  0E08               	movlw	high main@F5969
   399  00083E  6EF7               	movwf	tblptrh,c
   400  000840                     	endif
   401  000840                     	if	0	;There are less than 3 active tblptr bytes
   402  000840                     	endif
   403  000840  EE20  F018         	lfsr	2,main@keypad_deco
   404  000844  0E10               	movlw	16
   405  000846                     u520:
   406  000846  0009               	tblrd		*+
   407  000848  CFF5 FFDE          	movff	tablat,postinc2
   408  00084C  06E8               	decf	wreg,f,c
   409  00084E  E2FB               	bc	u520
   410                           
   411                           ;main.c: 209: SYSTEM_Initialize();
   412  000850  EC13  F006         	call	_SYSTEM_Initialize	;wreg free
   413                           
   414                           ;main.c: 214: ANSELA=0;
   415  000854  0E00               	movlw	0
   416  000856  010F               	movlb	15	; () banked
   417  000858  6F5B               	movwf	91,b	;volatile
   418                           
   419                           ; BSR set to: 15
   420                           ;main.c: 215: ANSELB=0;
   421  00085A  0E00               	movlw	0
   422  00085C  010F               	movlb	15	; () banked
   423  00085E  6F5C               	movwf	92,b	;volatile
   424                           
   425                           ; BSR set to: 15
   426                           ;main.c: 216: ANSELC=0;
   427  000860  0E00               	movlw	0
   428  000862  010F               	movlb	15	; () banked
   429  000864  6F5D               	movwf	93,b	;volatile
   430                           
   431                           ; BSR set to: 15
   432                           ;main.c: 217: ANSELD=0;
   433  000866  0E00               	movlw	0
   434  000868  010F               	movlb	15	; () banked
   435  00086A  6F5E               	movwf	94,b	;volatile
   436                           
   437                           ; BSR set to: 15
   438                           ;main.c: 218: ANSELE=0;
   439  00086C  0E00               	movlw	0
   440  00086E  010F               	movlb	15	; () banked
   441  000870  6F5F               	movwf	95,b	;volatile
   442                           
   443                           ; BSR set to: 15
   444                           ;main.c: 220: Keypad_Init();
   445  000872  EC18  F006         	call	_Keypad_Init	;wreg free
   446                           
   447                           ;main.c: 222: TRISB=0;
   448  000876  0E00               	movlw	0
   449  000878  6E93               	movwf	3987,c	;volatile
   450                           
   451                           ;main.c: 224: Lcd_Init();
   452  00087A  EC02  F005         	call	_Lcd_Init	;wreg free
   453                           
   454                           ;main.c: 225: Lcd_Clear();
   455  00087E  EC0C  F006         	call	_Lcd_Clear	;wreg free
   456                           
   457                           ;main.c: 226: Lcd_Set_Cursor(1,6);
   458  000882  0E06               	movlw	6
   459  000884  6E04               	movwf	Lcd_Set_Cursor@b,c
   460  000886  0E01               	movlw	1
   461  000888  EC3B  F005         	call	_Lcd_Set_Cursor
   462                           
   463                           ;main.c: 227: Lcd_Write_String("TECLADO");
   464  00088C  0E28               	movlw	low STR_3
   465  00088E  6E05               	movwf	Lcd_Write_String@a,c
   466  000890  0E08               	movlw	high STR_3
   467  000892  6E06               	movwf	Lcd_Write_String@a+1,c
   468  000894  EC63  F005         	call	_Lcd_Write_String	;wreg free
   469                           
   470                           ;main.c: 230: TRISC0=0;
   471  000898  9094               	bcf	3988,0,c	;volatile
   472                           
   473                           ;main.c: 231: TRISA=0;
   474  00089A  0E00               	movlw	0
   475  00089C  6E92               	movwf	3986,c	;volatile
   476                           
   477                           ;main.c: 234: LATC0=1;
   478  00089E  808B               	bsf	3979,0,c	;volatile
   479                           
   480                           ;main.c: 235: LATA0=0;
   481  0008A0  9089               	bcf	3977,0,c	;volatile
   482  0008A2                     l1374:
   483                           
   484                           ;main.c: 238: {
   485                           ;main.c: 240: tecla= keypad_read();
   486  0008A2  EC7D  F004         	call	_keypad_read	;wreg free
   487  0008A6  5001               	movf	?_keypad_read,w,c
   488  0008A8  6E3E               	movwf	_tecla,c
   489                           
   490                           ;main.c: 244: tecla= Keypad_Key_Press();
   491  0008AA  ECC7  F004         	call	_Keypad_Key_Press	;wreg free
   492  0008AE  6E3E               	movwf	_tecla,c
   493                           
   494                           ;main.c: 245: if (tecla!=0)
   495  0008B0  503E               	movf	_tecla,w,c
   496  0008B2  B4D8               	btfsc	status,2,c
   497  0008B4  D01C               	goto	l1386
   498                           
   499                           ;main.c: 246: {
   500                           ;main.c: 247: Lcd_Set_Cursor(2,8);
   501  0008B6  0E08               	movlw	8
   502  0008B8  6E04               	movwf	Lcd_Set_Cursor@b,c
   503  0008BA  0E02               	movlw	2
   504  0008BC  EC3B  F005         	call	_Lcd_Set_Cursor
   505                           
   506                           ;main.c: 248: Lcd_Write_Char(keypad_deco[tecla]);
   507  0008C0  503E               	movf	_tecla,w,c
   508  0008C2  0D01               	mullw	1
   509  0008C4  0E18               	movlw	low main@keypad_deco
   510  0008C6  24F3               	addwf	prodl,w,c
   511  0008C8  6ED9               	movwf	fsr2l,c
   512  0008CA  0E00               	movlw	high main@keypad_deco
   513  0008CC  20F4               	addwfc	prodh,w,c
   514  0008CE  6EDA               	movwf	fsr2h,c
   515  0008D0  50DF               	movf	indf2,w,c
   516  0008D2  ECAA  F005         	call	_Lcd_Write_Char
   517                           
   518                           ;main.c: 249: _delay((unsigned long)((400)*(4000000/4000.0)));
   519  0008D6  0E03               	movlw	3
   520  0008D8  6E17               	movwf	(??_main+1)& (0+255),c
   521  0008DA  0E08               	movlw	8
   522  0008DC  6E16               	movwf	??_main& (0+255),c
   523  0008DE  0E77               	movlw	119
   524  0008E0                     u567:
   525  0008E0  2EE8               	decfsz	wreg,f,c
   526  0008E2  D7FE               	bra	u567
   527  0008E4  2E16               	decfsz	??_main& (0+255),f,c
   528  0008E6  D7FC               	bra	u567
   529  0008E8  2E17               	decfsz	(??_main+1)& (0+255),f,c
   530  0008EA  D7FA               	bra	u567
   531  0008EC  F000               	nop	
   532  0008EE                     l1386:
   533                           
   534                           ;main.c: 251: }
   535                           ;main.c: 253: LATC0=~LATC0;
   536  0008EE  B08B               	btfsc	3979,0,c	;volatile
   537  0008F0  D002               	goto	u540
   538  0008F2  808B               	bsf	3979,0,c	;volatile
   539  0008F4  D7D6               	goto	l1374
   540  0008F6                     u540:
   541  0008F6  908B               	bcf	3979,0,c	;volatile
   542  0008F8  D7D4               	goto	l1374
   543  0008FA                     __end_of_main:
   544                           	opt stack 0
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           prodh	equ	0xFF4
   550                           prodl	equ	0xFF3
   551                           postinc0	equ	0xFEE
   552                           wreg	equ	0xFE8
   553                           indf2	equ	0xFDF
   554                           postinc2	equ	0xFDE
   555                           fsr2h	equ	0xFDA
   556                           fsr2l	equ	0xFD9
   557                           status	equ	0xFD8
   558                           
   559 ;; *************** function _keypad_read *****************
   560 ;; Defined at:
   561 ;;		line 62 in file "main.c"
   562 ;; Parameters:    Size  Location     Type
   563 ;;		None
   564 ;; Auto vars:     Size  Location     Type
   565 ;;  keys            2    5[COMRAM] unsigned int 
   566 ;;  bitmask         1    7[COMRAM] unsigned char 
   567 ;;  count           1    4[COMRAM] unsigned char 
   568 ;; Return value:  Size  Location     Type
   569 ;;                  2    0[COMRAM] unsigned int 
   570 ;; Registers used:
   571 ;;		wreg, status,2, status,0
   572 ;; Tracked objects:
   573 ;;		On entry : 0/0
   574 ;;		On exit  : 0/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   577 ;;      Params:         2       0       0       0       0       0       0       0       0
   578 ;;      Locals:         4       0       0       0       0       0       0       0       0
   579 ;;      Temps:          2       0       0       0       0       0       0       0       0
   580 ;;      Totals:         8       0       0       0       0       0       0       0       0
   581 ;;Total ram usage:        8 bytes
   582 ;; Hardware stack levels used:    1
   583 ;; This function calls:
   584 ;;		Nothing
   585 ;; This function is called by:
   586 ;;		_main
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590                           	psect	text1
   591  0008FA                     __ptext1:
   592                           	opt stack 0
   593  0008FA                     _keypad_read:
   594                           	opt stack 30
   595                           
   596                           ;main.c: 64: unsigned char count = 0;
   597                           
   598                           ;incstack = 0
   599  0008FA  0E00               	movlw	0
   600  0008FC  6E05               	movwf	keypad_read@count,c
   601                           
   602                           ;main.c: 65: unsigned char bitmask = 0x10;
   603  0008FE  0E10               	movlw	16
   604  000900  6E08               	movwf	keypad_read@bitmask,c
   605                           
   606                           ;main.c: 67: uint16_t keys =0;
   607  000902  0E00               	movlw	0
   608  000904  6E07               	movwf	keypad_read@keys+1,c
   609  000906  0E00               	movlw	0
   610  000908  6E06               	movwf	keypad_read@keys,c
   611                           
   612                           ;main.c: 70: if( PORTD & 0x0F )
   613  00090A  CF83 F003          	movff	3971,??_keypad_read	;volatile
   614  00090E  0E0F               	movlw	15
   615  000910  1603               	andwf	??_keypad_read,f,c
   616  000912  B4D8               	btfsc	status,2,c
   617  000914  D037               	goto	l1232
   618  000916                     l1212:
   619                           
   620                           ;main.c: 74: {
   621                           ;main.c: 75: PORTD &= 0x0F;
   622  000916  0E0F               	movlw	15
   623  000918  1683               	andwf	3971,f,c	;volatile
   624                           
   625                           ;main.c: 76: TRISD &= ~bitmask;
   626  00091A  5008               	movf	keypad_read@bitmask,w,c
   627  00091C  0AFF               	xorlw	255
   628  00091E  1695               	andwf	3989,f,c	;volatile
   629                           
   630                           ;main.c: 77: PORTD |= bitmask;
   631  000920  5008               	movf	keypad_read@bitmask,w,c
   632  000922  1283               	iorwf	3971,f,c	;volatile
   633                           
   634                           ;main.c: 78: _delay((unsigned long)((100)*(4000000/4000.0)));
   635  000924  0E82               	movlw	130
   636  000926  6E03               	movwf	??_keypad_read& (0+255),c
   637  000928  0EDE               	movlw	222
   638  00092A                     u577:
   639  00092A  2EE8               	decfsz	wreg,f,c
   640  00092C  D7FE               	bra	u577
   641  00092E  2E03               	decfsz	??_keypad_read& (0+255),f,c
   642  000930  D7FC               	bra	u577
   643                           
   644                           ;main.c: 80: keys |= (PORTD & 0x0F);
   645  000932  CF83 F003          	movff	3971,??_keypad_read	;volatile
   646  000936  0E0F               	movlw	15
   647  000938  1603               	andwf	??_keypad_read,f,c
   648  00093A  5003               	movf	??_keypad_read,w,c
   649  00093C  1206               	iorwf	keypad_read@keys,f,c
   650                           
   651                           ;main.c: 81: if( count == 3 )
   652  00093E  0E03               	movlw	3
   653  000940  1805               	xorwf	keypad_read@count,w,c
   654  000942  B4D8               	btfsc	status,2,c
   655  000944  D016               	goto	l1226
   656                           
   657                           ;main.c: 83: keys = keys<<4;
   658                           
   659                           ;main.c: 82: break;
   660  000946  C006  F003         	movff	keypad_read@keys,??_keypad_read
   661  00094A  C007  F004         	movff	keypad_read@keys+1,??_keypad_read+1
   662  00094E  3A03               	swapf	??_keypad_read,f,c
   663  000950  3A04               	swapf	??_keypad_read+1,f,c
   664  000952  0EF0               	movlw	240
   665  000954  1604               	andwf	??_keypad_read+1,f,c
   666  000956  5003               	movf	??_keypad_read,w,c
   667  000958  0B0F               	andlw	15
   668  00095A  1204               	iorwf	??_keypad_read+1,f,c
   669  00095C  0EF0               	movlw	240
   670  00095E  1603               	andwf	??_keypad_read,f,c
   671  000960  C003  F006         	movff	??_keypad_read,keypad_read@keys
   672  000964  C004  F007         	movff	??_keypad_read+1,keypad_read@keys+1
   673                           
   674                           ;main.c: 84: bitmask = bitmask<<1;
   675  000968  5008               	movf	keypad_read@bitmask,w,c
   676  00096A  2408               	addwf	keypad_read@bitmask,w,c
   677  00096C  6E08               	movwf	keypad_read@bitmask,c
   678                           
   679                           ;main.c: 85: count ++;
   680  00096E  2A05               	incf	keypad_read@count,f,c
   681                           
   682                           ;main.c: 86: } while(1);
   683  000970  D7D2               	goto	l1212
   684  000972                     l1226:
   685                           
   686                           ;main.c: 88: TRISD = 0x0F;
   687  000972  0E0F               	movlw	15
   688  000974  6E95               	movwf	3989,c	;volatile
   689                           
   690                           ;main.c: 89: PORTD = 0xF0;
   691  000976  0EF0               	movlw	240
   692  000978  6E83               	movwf	3971,c	;volatile
   693                           
   694                           ;main.c: 90: return keys;
   695  00097A  C006  F001         	movff	keypad_read@keys,?_keypad_read
   696  00097E  C007  F002         	movff	keypad_read@keys+1,?_keypad_read+1
   697  000982  0012               	return	
   698  000984                     l1232:
   699                           
   700                           ;main.c: 91: }
   701                           ;main.c: 93: return 0;
   702  000984  0E00               	movlw	0
   703  000986  6E02               	movwf	?_keypad_read+1,c
   704  000988  0E00               	movlw	0
   705  00098A  6E01               	movwf	?_keypad_read,c
   706  00098C  0012               	return	
   707  00098E                     __end_of_keypad_read:
   708                           	opt stack 0
   709                           tblptru	equ	0xFF8
   710                           tblptrh	equ	0xFF7
   711                           tblptrl	equ	0xFF6
   712                           tablat	equ	0xFF5
   713                           prodh	equ	0xFF4
   714                           prodl	equ	0xFF3
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           indf2	equ	0xFDF
   718                           postinc2	equ	0xFDE
   719                           fsr2h	equ	0xFDA
   720                           fsr2l	equ	0xFD9
   721                           status	equ	0xFD8
   722                           
   723 ;; *************** function _SYSTEM_Initialize *****************
   724 ;; Defined at:
   725 ;;		line 116 in file "mcc_generated_files/mcc.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;		None
   728 ;; Auto vars:     Size  Location     Type
   729 ;;		None
   730 ;; Return value:  Size  Location     Type
   731 ;;                  1    wreg      void 
   732 ;; Registers used:
   733 ;;		wreg, status,2, cstack
   734 ;; Tracked objects:
   735 ;;		On entry : 0/0
   736 ;;		On exit  : 0/0
   737 ;;		Unchanged: 0/0
   738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   739 ;;      Params:         0       0       0       0       0       0       0       0       0
   740 ;;      Locals:         0       0       0       0       0       0       0       0       0
   741 ;;      Temps:          0       0       0       0       0       0       0       0       0
   742 ;;      Totals:         0       0       0       0       0       0       0       0       0
   743 ;;Total ram usage:        0 bytes
   744 ;; Hardware stack levels used:    1
   745 ;; Hardware stack levels required when called:    1
   746 ;; This function calls:
   747 ;;		_OSCILLATOR_Initialize
   748 ;;		_PIN_MANAGER_Initialize
   749 ;; This function is called by:
   750 ;;		_main
   751 ;; This function uses a non-reentrant model
   752 ;;
   753                           
   754                           	psect	text2
   755  000C26                     __ptext2:
   756                           	opt stack 0
   757  000C26                     _SYSTEM_Initialize:
   758                           	opt stack 29
   759                           
   760                           ;mcc.c: 119: PIN_MANAGER_Initialize();
   761                           
   762                           ;incstack = 0
   763  000C26  EC88  F005         	call	_PIN_MANAGER_Initialize	;wreg free
   764                           
   765                           ;mcc.c: 120: OSCILLATOR_Initialize();
   766  000C2A  EC03  F006         	call	_OSCILLATOR_Initialize	;wreg free
   767  000C2E  0012               	return		;funcret
   768  000C30                     __end_of_SYSTEM_Initialize:
   769                           	opt stack 0
   770                           tblptru	equ	0xFF8
   771                           tblptrh	equ	0xFF7
   772                           tblptrl	equ	0xFF6
   773                           tablat	equ	0xFF5
   774                           prodh	equ	0xFF4
   775                           prodl	equ	0xFF3
   776                           postinc0	equ	0xFEE
   777                           wreg	equ	0xFE8
   778                           indf2	equ	0xFDF
   779                           postinc2	equ	0xFDE
   780                           fsr2h	equ	0xFDA
   781                           fsr2l	equ	0xFD9
   782                           status	equ	0xFD8
   783                           
   784 ;; *************** function _PIN_MANAGER_Initialize *****************
   785 ;; Defined at:
   786 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;		None
   789 ;; Auto vars:     Size  Location     Type
   790 ;;		None
   791 ;; Return value:  Size  Location     Type
   792 ;;                  1    wreg      void 
   793 ;; Registers used:
   794 ;;		wreg, status,2
   795 ;; Tracked objects:
   796 ;;		On entry : 0/0
   797 ;;		On exit  : 0/0
   798 ;;		Unchanged: 0/0
   799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   800 ;;      Params:         0       0       0       0       0       0       0       0       0
   801 ;;      Locals:         0       0       0       0       0       0       0       0       0
   802 ;;      Temps:          0       0       0       0       0       0       0       0       0
   803 ;;      Totals:         0       0       0       0       0       0       0       0       0
   804 ;;Total ram usage:        0 bytes
   805 ;; Hardware stack levels used:    1
   806 ;; This function calls:
   807 ;;		Nothing
   808 ;; This function is called by:
   809 ;;		_SYSTEM_Initialize
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           	psect	text3
   814  000B10                     __ptext3:
   815                           	opt stack 0
   816  000B10                     _PIN_MANAGER_Initialize:
   817                           	opt stack 29
   818                           
   819                           ;pin_manager.c: 57: LATE = 0x00;
   820                           
   821                           ;incstack = 0
   822  000B10  0E00               	movlw	0
   823  000B12  6E8D               	movwf	3981,c	;volatile
   824                           
   825                           ;pin_manager.c: 58: LATD = 0x00;
   826  000B14  0E00               	movlw	0
   827  000B16  6E8C               	movwf	3980,c	;volatile
   828                           
   829                           ;pin_manager.c: 59: LATA = 0x00;
   830  000B18  0E00               	movlw	0
   831  000B1A  6E89               	movwf	3977,c	;volatile
   832                           
   833                           ;pin_manager.c: 60: LATB = 0x00;
   834  000B1C  0E00               	movlw	0
   835  000B1E  6E8A               	movwf	3978,c	;volatile
   836                           
   837                           ;pin_manager.c: 61: LATC = 0x00;
   838  000B20  0E00               	movlw	0
   839  000B22  6E8B               	movwf	3979,c	;volatile
   840                           
   841                           ;pin_manager.c: 66: TRISE = 0x07;
   842  000B24  0E07               	movlw	7
   843  000B26  6E96               	movwf	3990,c	;volatile
   844                           
   845                           ;pin_manager.c: 67: TRISA = 0xFF;
   846  000B28  6892               	setf	3986,c	;volatile
   847                           
   848                           ;pin_manager.c: 68: TRISB = 0xFF;
   849  000B2A  6893               	setf	3987,c	;volatile
   850                           
   851                           ;pin_manager.c: 69: TRISC = 0xC7;
   852  000B2C  0EC7               	movlw	199
   853  000B2E  6E94               	movwf	3988,c	;volatile
   854                           
   855                           ;pin_manager.c: 70: TRISD = 0xFF;
   856  000B30  6895               	setf	3989,c	;volatile
   857                           
   858                           ;pin_manager.c: 75: ANSELC = 0xC4;
   859  000B32  0EC4               	movlw	196
   860  000B34  010F               	movlb	15	; () banked
   861  000B36  6F5D               	movwf	93,b	;volatile
   862                           
   863                           ;pin_manager.c: 76: ANSELB = 0x3F;
   864  000B38  0E3F               	movlw	63
   865  000B3A  010F               	movlb	15	; () banked
   866  000B3C  6F5C               	movwf	92,b	;volatile
   867                           
   868                           ; BSR set to: 15
   869                           ;pin_manager.c: 77: ANSELD = 0xFF;
   870  000B3E  010F               	movlb	15	; () banked
   871  000B40  695E               	setf	94,b	;volatile
   872                           
   873                           ;pin_manager.c: 78: ANSELE = 0x07;
   874  000B42  0E07               	movlw	7
   875  000B44  010F               	movlb	15	; () banked
   876  000B46  6F5F               	movwf	95,b	;volatile
   877                           
   878                           ;pin_manager.c: 79: ANSELA = 0x2F;
   879  000B48  0E2F               	movlw	47
   880  000B4A  010F               	movlb	15	; () banked
   881  000B4C  6F5B               	movwf	91,b	;volatile
   882                           
   883                           ; BSR set to: 15
   884                           ;pin_manager.c: 84: WPUB = 0xFF;
   885  000B4E  6885               	setf	3973,c	;volatile
   886                           
   887                           ; BSR set to: 15
   888                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
   889  000B50  9EF1               	bcf	intcon2,7,c	;volatile
   890                           
   891                           ; BSR set to: 15
   892  000B52  0012               	return		;funcret
   893  000B54                     __end_of_PIN_MANAGER_Initialize:
   894                           	opt stack 0
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           prodh	equ	0xFF4
   900                           prodl	equ	0xFF3
   901                           intcon2	equ	0xFF1
   902                           postinc0	equ	0xFEE
   903                           wreg	equ	0xFE8
   904                           indf2	equ	0xFDF
   905                           postinc2	equ	0xFDE
   906                           fsr2h	equ	0xFDA
   907                           fsr2l	equ	0xFD9
   908                           status	equ	0xFD8
   909                           
   910 ;; *************** function _OSCILLATOR_Initialize *****************
   911 ;; Defined at:
   912 ;;		line 123 in file "mcc_generated_files/mcc.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;		None
   915 ;; Auto vars:     Size  Location     Type
   916 ;;		None
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      void 
   919 ;; Registers used:
   920 ;;		wreg, status,2
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   926 ;;      Params:         0       0       0       0       0       0       0       0       0
   927 ;;      Locals:         0       0       0       0       0       0       0       0       0
   928 ;;      Temps:          0       0       0       0       0       0       0       0       0
   929 ;;      Totals:         0       0       0       0       0       0       0       0       0
   930 ;;Total ram usage:        0 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; This function calls:
   933 ;;		Nothing
   934 ;; This function is called by:
   935 ;;		_SYSTEM_Initialize
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           	psect	text4
   940  000C06                     __ptext4:
   941                           	opt stack 0
   942  000C06                     _OSCILLATOR_Initialize:
   943                           	opt stack 29
   944                           
   945                           ;mcc.c: 126: OSCCON = 0x10;
   946                           
   947                           ; BSR set to: 15
   948                           ;incstack = 0
   949  000C06  0E10               	movlw	16
   950  000C08  6ED3               	movwf	4051,c	;volatile
   951                           
   952                           ;mcc.c: 128: OSCCON2 = 0x00;
   953  000C0A  0E00               	movlw	0
   954  000C0C  6ED2               	movwf	4050,c	;volatile
   955                           
   956                           ;mcc.c: 130: OSCTUNE = 0x00;
   957  000C0E  0E00               	movlw	0
   958  000C10  6E9B               	movwf	3995,c	;volatile
   959                           
   960                           ;mcc.c: 132: ACTCON = 0x00;
   961  000C12  0E00               	movlw	0
   962  000C14  6EB5               	movwf	4021,c	;volatile
   963  000C16  0012               	return		;funcret
   964  000C18                     __end_of_OSCILLATOR_Initialize:
   965                           	opt stack 0
   966                           tblptru	equ	0xFF8
   967                           tblptrh	equ	0xFF7
   968                           tblptrl	equ	0xFF6
   969                           tablat	equ	0xFF5
   970                           prodh	equ	0xFF4
   971                           prodl	equ	0xFF3
   972                           intcon2	equ	0xFF1
   973                           postinc0	equ	0xFEE
   974                           wreg	equ	0xFE8
   975                           indf2	equ	0xFDF
   976                           postinc2	equ	0xFDE
   977                           fsr2h	equ	0xFDA
   978                           fsr2l	equ	0xFD9
   979                           status	equ	0xFD8
   980                           
   981 ;; *************** function _Lcd_Write_String *****************
   982 ;; Defined at:
   983 ;;		line 97 in file "lcd.h"
   984 ;; Parameters:    Size  Location     Type
   985 ;;  a               2    4[COMRAM] PTR unsigned char 
   986 ;;		 -> STR_3(8), STR_2(7), STR_1(7), 
   987 ;; Auto vars:     Size  Location     Type
   988 ;;  i               2    8[COMRAM] int 
   989 ;; Return value:  Size  Location     Type
   990 ;;                  1    wreg      void 
   991 ;; Registers used:
   992 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   993 ;; Tracked objects:
   994 ;;		On entry : 0/0
   995 ;;		On exit  : 0/0
   996 ;;		Unchanged: 0/0
   997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   998 ;;      Params:         2       0       0       0       0       0       0       0       0
   999 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1000 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1001 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1002 ;;Total ram usage:        6 bytes
  1003 ;; Hardware stack levels used:    1
  1004 ;; Hardware stack levels required when called:    2
  1005 ;; This function calls:
  1006 ;;		_Lcd_Write_Char
  1007 ;; This function is called by:
  1008 ;;		_main
  1009 ;;		_teclado_estado
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           	psect	text5
  1014  000AC6                     __ptext5:
  1015                           	opt stack 0
  1016  000AC6                     _Lcd_Write_String:
  1017                           	opt stack 28
  1018                           
  1019                           ;lcd.h: 99: int i;
  1020                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
  1021                           
  1022                           ;incstack = 0
  1023  000AC6  0E00               	movlw	0
  1024  000AC8  6E0A               	movwf	Lcd_Write_String@i+1,c
  1025  000ACA  0E00               	movlw	0
  1026  000ACC  6E09               	movwf	Lcd_Write_String@i,c
  1027  000ACE  D010               	goto	l1206
  1028  000AD0                     l1202:
  1029                           
  1030                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
  1031  000AD0  5009               	movf	Lcd_Write_String@i,w,c
  1032  000AD2  2405               	addwf	Lcd_Write_String@a,w,c
  1033  000AD4  6E07               	movwf	??_Lcd_Write_String& (0+255),c
  1034  000AD6  500A               	movf	Lcd_Write_String@i+1,w,c
  1035  000AD8  2006               	addwfc	Lcd_Write_String@a+1,w,c
  1036  000ADA  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  1037  000ADC  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
  1038  000AE0  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  1039  000AE4                     	if	0	;tblptru may be non-zero
  1040  000AE4                     	endif
  1041  000AE4                     	if	0	;tblptru may be non-zero
  1042  000AE4                     	endif
  1043  000AE4  0008               	tblrd		*
  1044  000AE6  50F5               	movf	tablat,w,c
  1045  000AE8  ECAA  F005         	call	_Lcd_Write_Char
  1046  000AEC  4A09               	infsnz	Lcd_Write_String@i,f,c
  1047  000AEE  2A0A               	incf	Lcd_Write_String@i+1,f,c
  1048  000AF0                     l1206:
  1049  000AF0  5009               	movf	Lcd_Write_String@i,w,c
  1050  000AF2  2405               	addwf	Lcd_Write_String@a,w,c
  1051  000AF4  6E07               	movwf	??_Lcd_Write_String& (0+255),c
  1052  000AF6  500A               	movf	Lcd_Write_String@i+1,w,c
  1053  000AF8  2006               	addwfc	Lcd_Write_String@a+1,w,c
  1054  000AFA  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  1055  000AFC  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
  1056  000B00  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  1057  000B04                     	if	0	;tblptru may be non-zero
  1058  000B04                     	endif
  1059  000B04                     	if	0	;tblptru may be non-zero
  1060  000B04                     	endif
  1061  000B04  0008               	tblrd		*
  1062  000B06  50F5               	movf	tablat,w,c
  1063  000B08  0900               	iorlw	0
  1064  000B0A  B4D8               	btfsc	status,2,c
  1065  000B0C  0012               	return	
  1066  000B0E  D7E0               	goto	l1202
  1067  000B10                     __end_of_Lcd_Write_String:
  1068                           	opt stack 0
  1069                           tblptru	equ	0xFF8
  1070                           tblptrh	equ	0xFF7
  1071                           tblptrl	equ	0xFF6
  1072                           tablat	equ	0xFF5
  1073                           prodh	equ	0xFF4
  1074                           prodl	equ	0xFF3
  1075                           intcon2	equ	0xFF1
  1076                           postinc0	equ	0xFEE
  1077                           wreg	equ	0xFE8
  1078                           indf2	equ	0xFDF
  1079                           postinc2	equ	0xFDE
  1080                           fsr2h	equ	0xFDA
  1081                           fsr2l	equ	0xFD9
  1082                           status	equ	0xFD8
  1083                           
  1084 ;; *************** function _Lcd_Write_Char *****************
  1085 ;; Defined at:
  1086 ;;		line 81 in file "lcd.h"
  1087 ;; Parameters:    Size  Location     Type
  1088 ;;  a               1    wreg     unsigned char 
  1089 ;; Auto vars:     Size  Location     Type
  1090 ;;  a               1    3[COMRAM] unsigned char 
  1091 ;;  y               1    2[COMRAM] unsigned char 
  1092 ;;  temp            1    1[COMRAM] unsigned char 
  1093 ;; Return value:  Size  Location     Type
  1094 ;;                  1    wreg      void 
  1095 ;; Registers used:
  1096 ;;		wreg, status,2, status,0, cstack
  1097 ;; Tracked objects:
  1098 ;;		On entry : 0/0
  1099 ;;		On exit  : 0/0
  1100 ;;		Unchanged: 0/0
  1101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1102 ;;      Params:         0       0       0       0       0       0       0       0       0
  1103 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1104 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1105 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1106 ;;Total ram usage:        3 bytes
  1107 ;; Hardware stack levels used:    1
  1108 ;; Hardware stack levels required when called:    1
  1109 ;; This function calls:
  1110 ;;		_Lcd_Port
  1111 ;; This function is called by:
  1112 ;;		_Lcd_Write_String
  1113 ;;		_main
  1114 ;;		_teclado_estado
  1115 ;; This function uses a non-reentrant model
  1116 ;;
  1117                           
  1118                           	psect	text6
  1119  000B54                     __ptext6:
  1120                           	opt stack 0
  1121  000B54                     _Lcd_Write_Char:
  1122                           	opt stack 28
  1123                           
  1124                           ;incstack = 0
  1125                           ;Lcd_Write_Char@a stored from wreg
  1126  000B54  6E04               	movwf	Lcd_Write_Char@a,c
  1127                           
  1128                           ;lcd.h: 83: char temp,y;
  1129                           ;lcd.h: 84: temp = a&0x0F;
  1130  000B56  5004               	movf	Lcd_Write_Char@a,w,c
  1131  000B58  0B0F               	andlw	15
  1132  000B5A  6E02               	movwf	Lcd_Write_Char@temp,c
  1133                           
  1134                           ;lcd.h: 85: y = a&0xF0;
  1135  000B5C  5004               	movf	Lcd_Write_Char@a,w,c
  1136  000B5E  0BF0               	andlw	240
  1137  000B60  6E03               	movwf	Lcd_Write_Char@y,c
  1138                           
  1139                           ;lcd.h: 86: PORTBbits.RB7 = 1;
  1140  000B62  8E81               	bsf	3969,7,c	;volatile
  1141                           
  1142                           ;lcd.h: 87: Lcd_Port(y>>4);
  1143  000B64  3803               	swapf	Lcd_Write_Char@y,w,c
  1144  000B66  0B0F               	andlw	15
  1145  000B68  ECDD  F005         	call	_Lcd_Port
  1146                           
  1147                           ;lcd.h: 88: PORTBbits.RB6 = 1;
  1148  000B6C  8C81               	bsf	3969,6,c	;volatile
  1149                           
  1150                           ;lcd.h: 89: _delay((unsigned long)((40)*(4000000/4000000.0)));
  1151  000B6E  0E0D               	movlw	13
  1152  000B70                     u587:
  1153  000B70  2EE8               	decfsz	wreg,f,c
  1154  000B72  D7FE               	bra	u587
  1155  000B74  F000               	nop	
  1156                           
  1157                           ;lcd.h: 90: PORTBbits.RB6 = 0;
  1158  000B76  9C81               	bcf	3969,6,c	;volatile
  1159                           
  1160                           ;lcd.h: 91: Lcd_Port(temp);
  1161  000B78  5002               	movf	Lcd_Write_Char@temp,w,c
  1162  000B7A  ECDD  F005         	call	_Lcd_Port
  1163                           
  1164                           ;lcd.h: 92: PORTBbits.RB6 = 1;
  1165  000B7E  8C81               	bsf	3969,6,c	;volatile
  1166                           
  1167                           ;lcd.h: 93: _delay((unsigned long)((40)*(4000000/4000000.0)));
  1168  000B80  0E0D               	movlw	13
  1169  000B82                     u597:
  1170  000B82  2EE8               	decfsz	wreg,f,c
  1171  000B84  D7FE               	bra	u597
  1172  000B86  F000               	nop	
  1173                           
  1174                           ;lcd.h: 94: PORTBbits.RB6 = 0;
  1175  000B88  9C81               	bcf	3969,6,c	;volatile
  1176  000B8A  0012               	return		;funcret
  1177  000B8C                     __end_of_Lcd_Write_Char:
  1178                           	opt stack 0
  1179                           tblptru	equ	0xFF8
  1180                           tblptrh	equ	0xFF7
  1181                           tblptrl	equ	0xFF6
  1182                           tablat	equ	0xFF5
  1183                           prodh	equ	0xFF4
  1184                           prodl	equ	0xFF3
  1185                           intcon2	equ	0xFF1
  1186                           postinc0	equ	0xFEE
  1187                           wreg	equ	0xFE8
  1188                           indf2	equ	0xFDF
  1189                           postinc2	equ	0xFDE
  1190                           fsr2h	equ	0xFDA
  1191                           fsr2l	equ	0xFD9
  1192                           status	equ	0xFD8
  1193                           
  1194 ;; *************** function _Lcd_Set_Cursor *****************
  1195 ;; Defined at:
  1196 ;;		line 41 in file "lcd.h"
  1197 ;; Parameters:    Size  Location     Type
  1198 ;;  a               1    wreg     unsigned char 
  1199 ;;  b               1    3[COMRAM] unsigned char 
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  a               1    4[COMRAM] unsigned char 
  1202 ;;  temp            1    7[COMRAM] unsigned char 
  1203 ;;  y               1    6[COMRAM] unsigned char 
  1204 ;;  z               1    5[COMRAM] unsigned char 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      void 
  1207 ;; Registers used:
  1208 ;;		wreg, status,2, status,0, cstack
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1214 ;;      Params:         1       0       0       0       0       0       0       0       0
  1215 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1216 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1217 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1218 ;;Total ram usage:        5 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; Hardware stack levels required when called:    2
  1221 ;; This function calls:
  1222 ;;		_Lcd_Cmd
  1223 ;; This function is called by:
  1224 ;;		_main
  1225 ;;		_teclado_estado
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           	psect	text7
  1230  000A76                     __ptext7:
  1231                           	opt stack 0
  1232  000A76                     _Lcd_Set_Cursor:
  1233                           	opt stack 28
  1234                           
  1235                           ;incstack = 0
  1236                           ;Lcd_Set_Cursor@a stored from wreg
  1237  000A76  6E05               	movwf	Lcd_Set_Cursor@a,c
  1238                           
  1239                           ;lcd.h: 43: char temp,z,y;
  1240                           ;lcd.h: 44: if(a == 1)
  1241  000A78  0405               	decf	Lcd_Set_Cursor@a,w,c
  1242  000A7A  A4D8               	btfss	status,2,c
  1243  000A7C  D010               	goto	l1192
  1244                           
  1245                           ;lcd.h: 45: {
  1246                           ;lcd.h: 46: temp = 0x80 + b - 1;
  1247  000A7E  5004               	movf	Lcd_Set_Cursor@b,w,c
  1248  000A80  0F7F               	addlw	127
  1249  000A82  6E08               	movwf	Lcd_Set_Cursor@temp,c
  1250                           
  1251                           ;lcd.h: 47: z = temp>>4;
  1252  000A84  3808               	swapf	Lcd_Set_Cursor@temp,w,c
  1253  000A86  0B0F               	andlw	15
  1254  000A88  6E06               	movwf	Lcd_Set_Cursor@z,c
  1255                           
  1256                           ;lcd.h: 48: y = temp & 0x0F;
  1257  000A8A  5008               	movf	Lcd_Set_Cursor@temp,w,c
  1258  000A8C  0B0F               	andlw	15
  1259  000A8E  6E07               	movwf	Lcd_Set_Cursor@y,c
  1260                           
  1261                           ;lcd.h: 49: Lcd_Cmd(z);
  1262  000A90  5006               	movf	Lcd_Set_Cursor@z,w,c
  1263  000A92  ECF3  F005         	call	_Lcd_Cmd
  1264                           
  1265                           ;lcd.h: 50: Lcd_Cmd(y);
  1266  000A96  5007               	movf	Lcd_Set_Cursor@y,w,c
  1267  000A98  ECF3  F005         	call	_Lcd_Cmd
  1268                           
  1269                           ;lcd.h: 51: }
  1270  000A9C  0012               	return	
  1271  000A9E                     l1192:
  1272                           
  1273                           ;lcd.h: 52: else if(a == 2)
  1274  000A9E  0E02               	movlw	2
  1275  000AA0  1805               	xorwf	Lcd_Set_Cursor@a,w,c
  1276  000AA2  A4D8               	btfss	status,2,c
  1277  000AA4  0012               	return	
  1278                           
  1279                           ;lcd.h: 53: {
  1280                           ;lcd.h: 54: temp = 0xC0 + b - 1;
  1281  000AA6  5004               	movf	Lcd_Set_Cursor@b,w,c
  1282  000AA8  0FBF               	addlw	191
  1283  000AAA  6E08               	movwf	Lcd_Set_Cursor@temp,c
  1284                           
  1285                           ;lcd.h: 55: z = temp>>4;
  1286  000AAC  3808               	swapf	Lcd_Set_Cursor@temp,w,c
  1287  000AAE  0B0F               	andlw	15
  1288  000AB0  6E06               	movwf	Lcd_Set_Cursor@z,c
  1289                           
  1290                           ;lcd.h: 56: y = temp & 0x0F;
  1291  000AB2  5008               	movf	Lcd_Set_Cursor@temp,w,c
  1292  000AB4  0B0F               	andlw	15
  1293  000AB6  6E07               	movwf	Lcd_Set_Cursor@y,c
  1294                           
  1295                           ;lcd.h: 57: Lcd_Cmd(z);
  1296  000AB8  5006               	movf	Lcd_Set_Cursor@z,w,c
  1297  000ABA  ECF3  F005         	call	_Lcd_Cmd
  1298                           
  1299                           ;lcd.h: 58: Lcd_Cmd(y);
  1300  000ABE  5007               	movf	Lcd_Set_Cursor@y,w,c
  1301  000AC0  ECF3  F005         	call	_Lcd_Cmd
  1302  000AC4  0012               	return	
  1303  000AC6                     __end_of_Lcd_Set_Cursor:
  1304                           	opt stack 0
  1305                           tblptru	equ	0xFF8
  1306                           tblptrh	equ	0xFF7
  1307                           tblptrl	equ	0xFF6
  1308                           tablat	equ	0xFF5
  1309                           prodh	equ	0xFF4
  1310                           prodl	equ	0xFF3
  1311                           intcon2	equ	0xFF1
  1312                           postinc0	equ	0xFEE
  1313                           wreg	equ	0xFE8
  1314                           indf2	equ	0xFDF
  1315                           postinc2	equ	0xFDE
  1316                           fsr2h	equ	0xFDA
  1317                           fsr2l	equ	0xFD9
  1318                           status	equ	0xFD8
  1319                           
  1320 ;; *************** function _Lcd_Init *****************
  1321 ;; Defined at:
  1322 ;;		line 62 in file "lcd.h"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		wreg, status,2, cstack
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1336 ;;      Params:         0       0       0       0       0       0       0       0       0
  1337 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1338 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1339 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1340 ;;Total ram usage:        1 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; Hardware stack levels required when called:    2
  1343 ;; This function calls:
  1344 ;;		_Lcd_Cmd
  1345 ;;		_Lcd_Port
  1346 ;; This function is called by:
  1347 ;;		_main
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           
  1351                           	psect	text8
  1352  000A04                     __ptext8:
  1353                           	opt stack 0
  1354  000A04                     _Lcd_Init:
  1355                           	opt stack 28
  1356                           
  1357                           ;lcd.h: 64: Lcd_Port(0x00);
  1358                           
  1359                           ;incstack = 0
  1360  000A04  0E00               	movlw	0
  1361  000A06  ECDD  F005         	call	_Lcd_Port
  1362                           
  1363                           ;lcd.h: 65: _delay((unsigned long)((20)*(4000000/4000.0)));
  1364  000A0A  0E1A               	movlw	26
  1365  000A0C  6E04               	movwf	??_Lcd_Init& (0+255),c
  1366  000A0E  0EF8               	movlw	248
  1367  000A10                     u607:
  1368  000A10  2EE8               	decfsz	wreg,f,c
  1369  000A12  D7FE               	bra	u607
  1370  000A14  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1371  000A16  D7FC               	bra	u607
  1372  000A18  D000               	nop2	
  1373                           
  1374                           ;lcd.h: 66: Lcd_Cmd(0x03);
  1375  000A1A  0E03               	movlw	3
  1376  000A1C  ECF3  F005         	call	_Lcd_Cmd
  1377                           
  1378                           ;lcd.h: 67: _delay((unsigned long)((5)*(4000000/4000.0)));
  1379  000A20  0E07               	movlw	7
  1380  000A22  6E04               	movwf	??_Lcd_Init& (0+255),c
  1381  000A24  0E7D               	movlw	125
  1382  000A26                     u617:
  1383  000A26  2EE8               	decfsz	wreg,f,c
  1384  000A28  D7FE               	bra	u617
  1385  000A2A  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1386  000A2C  D7FC               	bra	u617
  1387  000A2E  F000               	nop	
  1388                           
  1389                           ;lcd.h: 68: Lcd_Cmd(0x03);
  1390  000A30  0E03               	movlw	3
  1391  000A32  ECF3  F005         	call	_Lcd_Cmd
  1392                           
  1393                           ;lcd.h: 69: _delay((unsigned long)((11)*(4000000/4000.0)));
  1394  000A36  0E0F               	movlw	15
  1395  000A38  6E04               	movwf	??_Lcd_Init& (0+255),c
  1396  000A3A  0E48               	movlw	72
  1397  000A3C                     u627:
  1398  000A3C  2EE8               	decfsz	wreg,f,c
  1399  000A3E  D7FE               	bra	u627
  1400  000A40  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1401  000A42  D7FC               	bra	u627
  1402                           
  1403                           ;lcd.h: 70: Lcd_Cmd(0x03);
  1404  000A44  0E03               	movlw	3
  1405  000A46  ECF3  F005         	call	_Lcd_Cmd
  1406                           
  1407                           ;lcd.h: 72: Lcd_Cmd(0x02);
  1408  000A4A  0E02               	movlw	2
  1409  000A4C  ECF3  F005         	call	_Lcd_Cmd
  1410                           
  1411                           ;lcd.h: 73: Lcd_Cmd(0x02);
  1412  000A50  0E02               	movlw	2
  1413  000A52  ECF3  F005         	call	_Lcd_Cmd
  1414                           
  1415                           ;lcd.h: 74: Lcd_Cmd(0x08);
  1416  000A56  0E08               	movlw	8
  1417  000A58  ECF3  F005         	call	_Lcd_Cmd
  1418                           
  1419                           ;lcd.h: 75: Lcd_Cmd(0x00);
  1420  000A5C  0E00               	movlw	0
  1421  000A5E  ECF3  F005         	call	_Lcd_Cmd
  1422                           
  1423                           ;lcd.h: 76: Lcd_Cmd(0x0C);
  1424  000A62  0E0C               	movlw	12
  1425  000A64  ECF3  F005         	call	_Lcd_Cmd
  1426                           
  1427                           ;lcd.h: 77: Lcd_Cmd(0x00);
  1428  000A68  0E00               	movlw	0
  1429  000A6A  ECF3  F005         	call	_Lcd_Cmd
  1430                           
  1431                           ;lcd.h: 78: Lcd_Cmd(0x06);
  1432  000A6E  0E06               	movlw	6
  1433  000A70  ECF3  F005         	call	_Lcd_Cmd
  1434  000A74  0012               	return		;funcret
  1435  000A76                     __end_of_Lcd_Init:
  1436                           	opt stack 0
  1437                           tblptru	equ	0xFF8
  1438                           tblptrh	equ	0xFF7
  1439                           tblptrl	equ	0xFF6
  1440                           tablat	equ	0xFF5
  1441                           prodh	equ	0xFF4
  1442                           prodl	equ	0xFF3
  1443                           intcon2	equ	0xFF1
  1444                           postinc0	equ	0xFEE
  1445                           wreg	equ	0xFE8
  1446                           indf2	equ	0xFDF
  1447                           postinc2	equ	0xFDE
  1448                           fsr2h	equ	0xFDA
  1449                           fsr2l	equ	0xFD9
  1450                           status	equ	0xFD8
  1451                           
  1452 ;; *************** function _Lcd_Clear *****************
  1453 ;; Defined at:
  1454 ;;		line 35 in file "lcd.h"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;		None
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;		None
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  2  112[None  ] int 
  1461 ;; Registers used:
  1462 ;;		wreg, status,2, cstack
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1468 ;;      Params:         0       0       0       0       0       0       0       0       0
  1469 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1470 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1471 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1472 ;;Total ram usage:        0 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    2
  1475 ;; This function calls:
  1476 ;;		_Lcd_Cmd
  1477 ;; This function is called by:
  1478 ;;		_main
  1479 ;; This function uses a non-reentrant model
  1480 ;;
  1481                           
  1482                           	psect	text9
  1483  000C18                     __ptext9:
  1484                           	opt stack 0
  1485  000C18                     _Lcd_Clear:
  1486                           	opt stack 28
  1487                           
  1488                           ;lcd.h: 37: Lcd_Cmd(0);
  1489                           
  1490                           ;incstack = 0
  1491  000C18  0E00               	movlw	0
  1492  000C1A  ECF3  F005         	call	_Lcd_Cmd
  1493                           
  1494                           ;lcd.h: 38: Lcd_Cmd(1);
  1495  000C1E  0E01               	movlw	1
  1496  000C20  ECF3  F005         	call	_Lcd_Cmd
  1497  000C24  0012               	return		;funcret
  1498  000C26                     __end_of_Lcd_Clear:
  1499                           	opt stack 0
  1500                           tblptru	equ	0xFF8
  1501                           tblptrh	equ	0xFF7
  1502                           tblptrl	equ	0xFF6
  1503                           tablat	equ	0xFF5
  1504                           prodh	equ	0xFF4
  1505                           prodl	equ	0xFF3
  1506                           intcon2	equ	0xFF1
  1507                           postinc0	equ	0xFEE
  1508                           wreg	equ	0xFE8
  1509                           indf2	equ	0xFDF
  1510                           postinc2	equ	0xFDE
  1511                           fsr2h	equ	0xFDA
  1512                           fsr2l	equ	0xFD9
  1513                           status	equ	0xFD8
  1514                           
  1515 ;; *************** function _Lcd_Cmd *****************
  1516 ;; Defined at:
  1517 ;;		line 26 in file "lcd.h"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;  a               1    wreg     unsigned char 
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;  a               1    2[COMRAM] unsigned char 
  1522 ;; Return value:  Size  Location     Type
  1523 ;;                  1    wreg      void 
  1524 ;; Registers used:
  1525 ;;		wreg, status,2, cstack
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1531 ;;      Params:         0       0       0       0       0       0       0       0       0
  1532 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1533 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1534 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1535 ;;Total ram usage:        2 bytes
  1536 ;; Hardware stack levels used:    1
  1537 ;; Hardware stack levels required when called:    1
  1538 ;; This function calls:
  1539 ;;		_Lcd_Port
  1540 ;; This function is called by:
  1541 ;;		_Lcd_Clear
  1542 ;;		_Lcd_Set_Cursor
  1543 ;;		_Lcd_Init
  1544 ;;		_Lcd_Shift_Right
  1545 ;;		_Lcd_Shift_Left
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text10
  1550  000BE6                     __ptext10:
  1551                           	opt stack 0
  1552  000BE6                     _Lcd_Cmd:
  1553                           	opt stack 28
  1554                           
  1555                           ;incstack = 0
  1556                           ;Lcd_Cmd@a stored from wreg
  1557  000BE6  6E03               	movwf	Lcd_Cmd@a,c
  1558                           
  1559                           ;lcd.h: 28: PORTBbits.RB7 = 0;
  1560  000BE8  9E81               	bcf	3969,7,c	;volatile
  1561                           
  1562                           ;lcd.h: 29: Lcd_Port(a);
  1563  000BEA  5003               	movf	Lcd_Cmd@a,w,c
  1564  000BEC  ECDD  F005         	call	_Lcd_Port
  1565                           
  1566                           ;lcd.h: 30: PORTBbits.RB6 = 1;
  1567  000BF0  8C81               	bsf	3969,6,c	;volatile
  1568                           
  1569                           ;lcd.h: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
  1570  000BF2  0E06               	movlw	6
  1571  000BF4  6E02               	movwf	??_Lcd_Cmd& (0+255),c
  1572  000BF6  0E30               	movlw	48
  1573  000BF8                     u637:
  1574  000BF8  2EE8               	decfsz	wreg,f,c
  1575  000BFA  D7FE               	bra	u637
  1576  000BFC  2E02               	decfsz	??_Lcd_Cmd& (0+255),f,c
  1577  000BFE  D7FC               	bra	u637
  1578  000C00  D000               	nop2	
  1579                           
  1580                           ;lcd.h: 32: PORTBbits.RB6 = 0;
  1581  000C02  9C81               	bcf	3969,6,c	;volatile
  1582  000C04  0012               	return		;funcret
  1583  000C06                     __end_of_Lcd_Cmd:
  1584                           	opt stack 0
  1585                           tblptru	equ	0xFF8
  1586                           tblptrh	equ	0xFF7
  1587                           tblptrl	equ	0xFF6
  1588                           tablat	equ	0xFF5
  1589                           prodh	equ	0xFF4
  1590                           prodl	equ	0xFF3
  1591                           intcon2	equ	0xFF1
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           indf2	equ	0xFDF
  1595                           postinc2	equ	0xFDE
  1596                           fsr2h	equ	0xFDA
  1597                           fsr2l	equ	0xFD9
  1598                           status	equ	0xFD8
  1599                           
  1600 ;; *************** function _Lcd_Port *****************
  1601 ;; Defined at:
  1602 ;;		line 4 in file "lcd.h"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  a               1    wreg     unsigned char 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  a               1    0[COMRAM] unsigned char 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1616 ;;      Params:         0       0       0       0       0       0       0       0       0
  1617 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1618 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1619 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1620 ;;Total ram usage:        1 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; This function calls:
  1623 ;;		Nothing
  1624 ;; This function is called by:
  1625 ;;		_Lcd_Cmd
  1626 ;;		_Lcd_Init
  1627 ;;		_Lcd_Write_Char
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           	psect	text11
  1632  000BBA                     __ptext11:
  1633                           	opt stack 0
  1634  000BBA                     _Lcd_Port:
  1635                           	opt stack 28
  1636                           
  1637                           ;incstack = 0
  1638                           ;Lcd_Port@a stored from wreg
  1639  000BBA  6E01               	movwf	Lcd_Port@a,c
  1640                           
  1641                           ;lcd.h: 6: if(a & 1)
  1642  000BBC  A001               	btfss	Lcd_Port@a,0,c
  1643  000BBE  D002               	goto	l99
  1644                           
  1645                           ;lcd.h: 7: PORTBbits.RB5 = 1;
  1646  000BC0  8A81               	bsf	3969,5,c	;volatile
  1647  000BC2  D001               	goto	l840
  1648  000BC4                     l99:
  1649                           
  1650                           ;lcd.h: 8: else
  1651                           ;lcd.h: 9: PORTBbits.RB5 = 0;
  1652  000BC4  9A81               	bcf	3969,5,c	;volatile
  1653  000BC6                     l840:
  1654                           
  1655                           ;lcd.h: 11: if(a & 2)
  1656  000BC6  A201               	btfss	Lcd_Port@a,1,c
  1657  000BC8  D002               	goto	l101
  1658                           
  1659                           ;lcd.h: 12: PORTBbits.RB4 = 1;
  1660  000BCA  8881               	bsf	3969,4,c	;volatile
  1661  000BCC  D001               	goto	l844
  1662  000BCE                     l101:
  1663                           
  1664                           ;lcd.h: 13: else
  1665                           ;lcd.h: 14: PORTBbits.RB4 = 0;
  1666  000BCE  9881               	bcf	3969,4,c	;volatile
  1667  000BD0                     l844:
  1668                           
  1669                           ;lcd.h: 16: if(a & 4)
  1670  000BD0  A401               	btfss	Lcd_Port@a,2,c
  1671  000BD2  D002               	goto	l103
  1672                           
  1673                           ;lcd.h: 17: PORTBbits.RB3 = 1;
  1674  000BD4  8681               	bsf	3969,3,c	;volatile
  1675  000BD6  D001               	goto	l848
  1676  000BD8                     l103:
  1677                           
  1678                           ;lcd.h: 18: else
  1679                           ;lcd.h: 19: PORTBbits.RB3 = 0;
  1680  000BD8  9681               	bcf	3969,3,c	;volatile
  1681  000BDA                     l848:
  1682                           
  1683                           ;lcd.h: 21: if(a & 8)
  1684  000BDA  A601               	btfss	Lcd_Port@a,3,c
  1685  000BDC  D002               	goto	l105
  1686                           
  1687                           ;lcd.h: 22: PORTBbits.RB2 = 1;
  1688  000BDE  8481               	bsf	3969,2,c	;volatile
  1689  000BE0  0012               	return	
  1690  000BE2                     l105:
  1691                           
  1692                           ;lcd.h: 23: else
  1693                           ;lcd.h: 24: PORTBbits.RB2 = 0;
  1694  000BE2  9481               	bcf	3969,2,c	;volatile
  1695  000BE4  0012               	return	
  1696  000BE6                     __end_of_Lcd_Port:
  1697                           	opt stack 0
  1698                           tblptru	equ	0xFF8
  1699                           tblptrh	equ	0xFF7
  1700                           tblptrl	equ	0xFF6
  1701                           tablat	equ	0xFF5
  1702                           prodh	equ	0xFF4
  1703                           prodl	equ	0xFF3
  1704                           intcon2	equ	0xFF1
  1705                           postinc0	equ	0xFEE
  1706                           wreg	equ	0xFE8
  1707                           indf2	equ	0xFDF
  1708                           postinc2	equ	0xFDE
  1709                           fsr2h	equ	0xFDA
  1710                           fsr2l	equ	0xFD9
  1711                           status	equ	0xFD8
  1712                           
  1713 ;; *************** function _Keypad_Key_Press *****************
  1714 ;; Defined at:
  1715 ;;		line 41 in file "main.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;		None
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  keypad_deco    17    0[COMRAM] const unsigned char [17]
  1720 ;;  fila            2   19[COMRAM] unsigned int 
  1721 ;;  tec             2   17[COMRAM] unsigned int 
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      unsigned char 
  1724 ;; Registers used:
  1725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1731 ;;      Params:         0       0       0       0       0       0       0       0       0
  1732 ;;      Locals:        21       0       0       0       0       0       0       0       0
  1733 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1734 ;;      Totals:        21       0       0       0       0       0       0       0       0
  1735 ;;Total ram usage:       21 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; This function calls:
  1738 ;;		Nothing
  1739 ;; This function is called by:
  1740 ;;		_main
  1741 ;;		_teclado_estado
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           	psect	text12
  1746  00098E                     __ptext12:
  1747                           	opt stack 0
  1748  00098E                     _Keypad_Key_Press:
  1749                           	opt stack 30
  1750                           
  1751                           ;main.c: 43: const unsigned char keypad_deco[17]=
  1752                           ;main.c: 44: {'7', '8', '9', '/', '4', '5', '6', '*', '1', '2', '3', '-', 13, '0', '=', 
      +                          '+', 0};
  1753                           
  1754                           ;incstack = 0
  1755  00098E  0E12               	movlw	low Keypad_Key_Press@F5948
  1756  000990  6EF6               	movwf	tblptrl,c
  1757  000992                     	if	1	;There is more than 1 active tblptr byte
  1758  000992  0E08               	movlw	high Keypad_Key_Press@F5948
  1759  000994  6EF7               	movwf	tblptrh,c
  1760  000996                     	endif
  1761  000996                     	if	0	;There are less than 3 active tblptr bytes
  1762  000996                     	endif
  1763  000996  EE20  F001         	lfsr	2,Keypad_Key_Press@keypad_deco
  1764  00099A  0E10               	movlw	16
  1765  00099C                     u80:
  1766  00099C  0009               	tblrd		*+
  1767  00099E  CFF5 FFDE          	movff	tablat,postinc2
  1768  0009A2  06E8               	decf	wreg,f,c
  1769  0009A4  E2FB               	bc	u80
  1770                           
  1771                           ;main.c: 46: unsigned int tec = 0, fila;
  1772  0009A6  0E00               	movlw	0
  1773  0009A8  6E13               	movwf	Keypad_Key_Press@tec+1,c
  1774  0009AA  0E00               	movlw	0
  1775  0009AC  6E12               	movwf	Keypad_Key_Press@tec,c
  1776                           
  1777                           ;main.c: 49: for (fila = 0b00000001; fila < 0b00010000; fila <<= 1)
  1778  0009AE  0E00               	movlw	0
  1779  0009B0  6E15               	movwf	Keypad_Key_Press@fila+1,c
  1780  0009B2  0E01               	movlw	1
  1781  0009B4  6E14               	movwf	Keypad_Key_Press@fila,c
  1782  0009B6                     l962:
  1783  0009B6  5015               	movf	Keypad_Key_Press@fila+1,w,c
  1784  0009B8  E11B               	bnz	l994
  1785  0009BA  0E10               	movlw	16
  1786  0009BC  5C14               	subwf	Keypad_Key_Press@fila,w,c
  1787  0009BE  B0D8               	btfsc	status,0,c
  1788  0009C0  D017               	goto	l994
  1789                           
  1790                           ;main.c: 50: {
  1791                           ;main.c: 51: LATD =fila<<4;
  1792  0009C2  3814               	swapf	Keypad_Key_Press@fila,w,c
  1793  0009C4  0BF0               	andlw	240
  1794  0009C6  6E8C               	movwf	3980,c	;volatile
  1795                           
  1796                           ;main.c: 52: if (PORTDbits.RD0== 1) break; tec++;
  1797  0009C8  B083               	btfsc	3971,0,c	;volatile
  1798  0009CA  D012               	goto	l994
  1799  0009CC  4A12               	infsnz	Keypad_Key_Press@tec,f,c
  1800  0009CE  2A13               	incf	Keypad_Key_Press@tec+1,f,c
  1801                           
  1802                           ;main.c: 53: if (PORTDbits.RD1 == 1) break; tec++;
  1803  0009D0  B283               	btfsc	3971,1,c	;volatile
  1804  0009D2  D00E               	goto	l994
  1805  0009D4  4A12               	infsnz	Keypad_Key_Press@tec,f,c
  1806  0009D6  2A13               	incf	Keypad_Key_Press@tec+1,f,c
  1807                           
  1808                           ;main.c: 54: if (PORTDbits.RD2 == 1) break; tec++;
  1809  0009D8  B483               	btfsc	3971,2,c	;volatile
  1810  0009DA  D00A               	goto	l994
  1811  0009DC  4A12               	infsnz	Keypad_Key_Press@tec,f,c
  1812  0009DE  2A13               	incf	Keypad_Key_Press@tec+1,f,c
  1813                           
  1814                           ;main.c: 55: if (PORTDbits.RD3 == 1) break; tec++;
  1815  0009E0  B683               	btfsc	3971,3,c	;volatile
  1816  0009E2  D006               	goto	l994
  1817  0009E4  4A12               	infsnz	Keypad_Key_Press@tec,f,c
  1818  0009E6  2A13               	incf	Keypad_Key_Press@tec+1,f,c
  1819  0009E8  90D8               	bcf	status,0,c
  1820  0009EA  3614               	rlcf	Keypad_Key_Press@fila,f,c
  1821  0009EC  3615               	rlcf	Keypad_Key_Press@fila+1,f,c
  1822  0009EE  D7E3               	goto	l962
  1823  0009F0                     l994:
  1824                           
  1825                           ;main.c: 56: }
  1826                           ;main.c: 57: PORTD = 0x00;
  1827  0009F0  0E00               	movlw	0
  1828  0009F2  6E83               	movwf	3971,c	;volatile
  1829                           
  1830                           ;main.c: 58: return keypad_deco[tec];
  1831  0009F4  0E01               	movlw	low Keypad_Key_Press@keypad_deco
  1832  0009F6  2412               	addwf	Keypad_Key_Press@tec,w,c
  1833  0009F8  6ED9               	movwf	fsr2l,c
  1834  0009FA  0E00               	movlw	high Keypad_Key_Press@keypad_deco
  1835  0009FC  2013               	addwfc	Keypad_Key_Press@tec+1,w,c
  1836  0009FE  6EDA               	movwf	fsr2h,c
  1837  000A00  50DF               	movf	indf2,w,c
  1838  000A02  0012               	return	
  1839  000A04                     __end_of_Keypad_Key_Press:
  1840                           	opt stack 0
  1841                           tblptru	equ	0xFF8
  1842                           tblptrh	equ	0xFF7
  1843                           tblptrl	equ	0xFF6
  1844                           tablat	equ	0xFF5
  1845                           prodh	equ	0xFF4
  1846                           prodl	equ	0xFF3
  1847                           intcon2	equ	0xFF1
  1848                           postinc0	equ	0xFEE
  1849                           wreg	equ	0xFE8
  1850                           indf2	equ	0xFDF
  1851                           postinc2	equ	0xFDE
  1852                           fsr2h	equ	0xFDA
  1853                           fsr2l	equ	0xFD9
  1854                           status	equ	0xFD8
  1855                           
  1856 ;; *************** function _Keypad_Init *****************
  1857 ;; Defined at:
  1858 ;;		line 35 in file "main.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;		None
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;		None
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg, status,2
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1872 ;;      Params:         0       0       0       0       0       0       0       0       0
  1873 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1874 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1875 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1876 ;;Total ram usage:        0 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; This function calls:
  1879 ;;		Nothing
  1880 ;; This function is called by:
  1881 ;;		_main
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885                           	psect	text13
  1886  000C30                     __ptext13:
  1887                           	opt stack 0
  1888  000C30                     _Keypad_Init:
  1889                           	opt stack 30
  1890                           
  1891                           ;main.c: 37: TRISD=0B00001111;
  1892                           
  1893                           ;incstack = 0
  1894  000C30  0E0F               	movlw	15
  1895  000C32  6E95               	movwf	3989,c	;volatile
  1896  000C34  0012               	return		;funcret
  1897  000C36                     __end_of_Keypad_Init:
  1898                           	opt stack 0
  1899                           tblptru	equ	0xFF8
  1900                           tblptrh	equ	0xFF7
  1901                           tblptrl	equ	0xFF6
  1902                           tablat	equ	0xFF5
  1903                           prodh	equ	0xFF4
  1904                           prodl	equ	0xFF3
  1905                           intcon2	equ	0xFF1
  1906                           postinc0	equ	0xFEE
  1907                           wreg	equ	0xFE8
  1908                           indf2	equ	0xFDF
  1909                           postinc2	equ	0xFDE
  1910                           fsr2h	equ	0xFDA
  1911                           fsr2l	equ	0xFD9
  1912                           status	equ	0xFD8
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           prodh	equ	0xFF4
  1918                           prodl	equ	0xFF3
  1919                           intcon2	equ	0xFF1
  1920                           postinc0	equ	0xFEE
  1921                           wreg	equ	0xFE8
  1922                           indf2	equ	0xFDF
  1923                           postinc2	equ	0xFDE
  1924                           fsr2h	equ	0xFDA
  1925                           fsr2l	equ	0xFD9
  1926                           status	equ	0xFD8
  1927                           
  1928                           	psect	rparam
  1929  0000                     tblptru	equ	0xFF8
  1930                           tblptrh	equ	0xFF7
  1931                           tblptrl	equ	0xFF6
  1932                           tablat	equ	0xFF5
  1933                           prodh	equ	0xFF4
  1934                           prodl	equ	0xFF3
  1935                           intcon2	equ	0xFF1
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           indf2	equ	0xFDF
  1939                           postinc2	equ	0xFDE
  1940                           fsr2h	equ	0xFDA
  1941                           fsr2l	equ	0xFD9
  1942                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    39
    Data        2
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     40      74
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 8
		 -> STR_3(CODE[8]), STR_2(CODE[7]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_Keypad_Key_Press
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0    1827
                                             21 COMRAM    19    19      0
                        _Keypad_Init
                   _Keypad_Key_Press
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                  _SYSTEM_Initialize
                        _keypad_read
 ---------------------------------------------------------------------------------
 (1) _keypad_read                                          8     6      2     139
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     402
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     857
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     135
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Key_Press                                    21    21      0      75
                                              0 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Keypad_Init
   _Keypad_Key_Press
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _keypad_read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     28      4A       1       77.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4A       6        0.0%
DATA                 0      0      4A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Sep 22 15:44:35 2020

                             l99 0BC4                               u80 099C  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                   __CFG_CP2$OFF 000000                     __CFG_CP3$OFF 000000  
                            l101 0BCE                              l103 0BD8  
                            l105 0BE2                              l840 0BC6  
                            l844 0BD0                              l848 0BDA  
                            l962 09B6                              l994 09F0  
                   __CFG_CPB$OFF 000000                              u520 0846  
                   __CFG_CPD$OFF 000000                              u540 08F6  
                            u607 0A10                              u617 0A26  
                            u627 0A3C                              u637 0BF8  
                            u567 08E0                              u577 092A  
                            u587 0B70                              u597 0B82  
                            prod 000FF3                              wreg 000FE8  
                   __CFG_FOSC$XT 000000                     __CFG_LVP$OFF 000000  
                           l1202 0AD0                             l1212 0916  
                           l1206 0AF0                             l1232 0984  
                           l1226 0972                             l1192 0A9E  
                           l1374 08A2                             l1386 08EE  
                           STR_1 0830                             STR_3 0828  
  __end_ofKeypad_Key_Press@F5948 0823                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           _WPUB 000F85                ?_Lcd_Write_String 0005  
                           _main 0838                             indf2 000FDF  
                           fsr2l 000FD9                    __CFG_BORV$190 000000  
                           prodl 000FF3                             start 0000  
             ??_Lcd_Write_String 0007                    __CFG_IESO$OFF 000000  
                __end_of_Lcd_Cmd 0C06                    __CFG_MCLRE$ON 000000  
                   ___param_bank 000000   __size_of_OSCILLATOR_Initialize 0012  
  __end_of_OSCILLATOR_Initialize 0C18                            ?_main 0001  
                          _LATA0 007C48                            _LATC0 007C58  
                 __CFG_DEBUG$OFF 000000                    ??_Keypad_Init 0001  
                          _PORTD 000F83          __size_of_Lcd_Set_Cursor 0050  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   __CFG_EBTRB$OFF 000000  
                   ?_keypad_read 0001                            _tecla 003E  
                          _texto 0029                            tablat 000FF5  
                          status 000FD8                   __CFG_T3CMX$RC0 000000  
                 __CFG_ICPRT$OFF 000000                   __CFG_PBADEN$ON 000000  
               __end_of_Lcd_Init 0A76                 __end_of_Lcd_Port 0BE6  
                __initialization 0B8C                     __end_of_main 08FA  
                 __CFG_PCLKEN$ON 000000                           ??_main 0016  
             __size_of_Lcd_Clear 000E                    __activetblptr 000002  
                 __CFG_SDOMX$RB3 000000                  __CFG_CCP2MX$RC1 000000  
    Keypad_Key_Press@keypad_deco 0001                           _ACTCON 000FB5  
                         _ANSELA 000F5B                           _ANSELB 000F5C  
                         _ANSELC 000F5D                           _ANSELD 000F5E  
                         _ANSELE 000F5F              __end_of_Keypad_Init 0C36  
                 __CFG_WDTEN$OFF 000000                           _OSCCON 000FD3  
                      ??_Lcd_Cmd 0002          __size_of_Lcd_Write_Char 0038  
                         _TRISC0 007CA0                   __CFG_XINST$OFF 000000  
                 __CFG_STVREN$ON 000000        __size_of_Keypad_Key_Press 0076  
                         clear_0 0BAA                 __end_of_password 0828  
                   __pdataCOMRAM 0049                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                  Lcd_Set_Cursor@a 0005  
                Lcd_Set_Cursor@b 0004                  Lcd_Set_Cursor@y 0007  
                Lcd_Set_Cursor@z 0006             __CFG_LS48MHZ$SYS48X8 000000  
              _SYSTEM_Initialize 0C26                       __accesstop 0060  
        __end_of__initialization 0BB0               ?_SYSTEM_Initialize 0001  
              __end_of_Lcd_Clear 0C26                    ___rparam_used 000001  
                 __pcstackCOMRAM 0001              ??_SYSTEM_Initialize 0001  
                 _Lcd_Set_Cursor 0A76                      _Keypad_Init 0C30  
                      ?_Lcd_Init 0001                        ?_Lcd_Port 0001  
      __end_of_SYSTEM_Initialize 0C30             __size_of_keypad_read 0094  
              __CFG_PLLSEL$PLL4X 000000        __size_of_Lcd_Write_String 004A  
         __end_of_Lcd_Set_Cursor 0AC6                          _OSCCON2 000FD2  
                        _OSCTUNE 000F9B                       ??_Lcd_Init 0004  
                     ??_Lcd_Port 0001                   _Lcd_Write_Char 0B54  
                        _Lcd_Cmd 0BE6            Keypad_Key_Press@F5948 0812  
                        __Hparam 0000                          __Lparam 0000  
               _Keypad_Key_Press 098E                     __psmallconst 0800  
                        __pcinit 0B8C                          __ramtop 0800  
                ?_Lcd_Set_Cursor 0004                          __ptext0 0838  
                        __ptext1 08FA                          __ptext2 0C26  
                        __ptext3 0B10                          __ptext4 0C06  
                        __ptext5 0AC6                          __ptext6 0B54  
                        __ptext7 0A76                          __ptext8 0A04  
                        __ptext9 0C18            _OSCILLATOR_Initialize 0C06  
       ??_PIN_MANAGER_Initialize 0001                          _retardo 0049  
     __size_of_SYSTEM_Initialize 000A           __end_of_Lcd_Write_Char 0B8C  
           end_of_initialization 0BB0                    __Lmediumconst 0000  
              __end_ofmain@F5969 0812                          postinc0 000FEE  
                        postinc2 000FDE                        Lcd_Port@a 0001  
                      _PORTBbits 000F81                        _PORTDbits 000F83  
                ?_Lcd_Write_Char 0001                   _estado_teclado 003D  
              Lcd_Write_String@a 0005                Lcd_Write_String@i 0009  
                      _Lcd_Clear 0C18                 _Lcd_Write_String 0AC6  
                  __pidataCOMRAM 0C36           ?_OSCILLATOR_Initialize 0001  
                   ?_Keypad_Init 0001              start_initialization 0B8C  
__size_of_PIN_MANAGER_Initialize 0044                __size_of_Lcd_Init 0072  
              __size_of_Lcd_Port 002C                  __CFG_nLPBOR$OFF 000000  
                     ?_Lcd_Clear 0001                  Lcd_Write_Char@a 0004  
                Lcd_Write_Char@y 0003                      __pbssCOMRAM 0029  
                __CFG_nPWRTEN$ON 000000                    ??_keypad_read 0003  
       __end_of_Keypad_Key_Press 0A04                         ?_Lcd_Cmd 0001  
         _PIN_MANAGER_Initialize 0B10                 ??_Lcd_Set_Cursor 0005  
             keypad_read@bitmask 0008                      __smallconst 0800  
           Keypad_Key_Press@fila 0014              __end_of_keypad_read 098E  
                       Lcd_Cmd@a 0003                      ??_Lcd_Clear 0004  
               __CFG_WDTPS$32768 000000                        main@F5969 0801  
               ??_Lcd_Write_Char 0002                __CFG_CFGPLLEN$OFF 000000  
                       _Lcd_Init 0A04             __size_of_Keypad_Init 0006  
                       _Lcd_Port 0BBA                  main@keypad_deco 0018  
                    _INTCON2bits 000FF1         __end_of_Lcd_Write_String 0B10  
               __size_of_Lcd_Cmd 0020                         __Hrparam 0000  
                       __Lrparam 0000               __CFG_BOREN$SBORDIS 000000  
        ??_OSCILLATOR_Initialize 0001                         __ptext10 0BE6  
                       __ptext11 0BBA                         __ptext12 098E  
                       __ptext13 0C30                      _keypad_read 08FA  
            Keypad_Key_Press@tec 0012                    __size_of_main 00C2  
                       _password 0823               Lcd_Write_Char@temp 0002  
              ?_Keypad_Key_Press 0001          ?_PIN_MANAGER_Initialize 0001  
             ??_Keypad_Key_Press 0001                 keypad_read@count 0005  
                    _retardo_cad 003F             __CFG_CPUDIV$NOCLKDIV 000000  
             Lcd_Set_Cursor@temp 0008                  keypad_read@keys 0006  
 __end_of_PIN_MANAGER_Initialize 0B54  
